{"projectModel":{"title":"tmo, StreamLab StreamApp 2.3","description":"Release 2.3 of the StreamLab StreamApp project. User projects should start by copying this project.","createdAt":"2019-12-16T12:28:49+00:00","modifiedAt":"2020-01-10T18:54:48+00:00","createdBy":"user","dashCollection":null,"mainScript":"DROP SCHEMA \"StreamLab_Output_tmo\" CASCADE;\nCREATE OR REPLACE SCHEMA \"StreamLab_Output_tmo\";\n-- StreamApp start\n\n-- ECDA reading adapter/agent with Discovery support\n\nCREATE OR REPLACE FUNCTION \"StreamLab_Output_tmo\".\"tmoassets_throttlefunc\"(inputRows CURSOR, throttleScale int)\n    returns TABLE(inputRows.*)\nLANGUAGE JAVA\nPARAMETER STYLE SYSTEM DEFINED JAVA\nNO SQL\nEXTERNAL NAME 'class:com.sqlstream.plugin.timesync.ThrottleStream.throttle';\n\nCREATE OR REPLACE FOREIGN STREAM \"StreamLab_Output_tmo\".\"tmoassets_fs\"\n(\n    \"deviceId\" VARCHAR(16),\n    \"violationPoint\" VARCHAR(32),\n    \"Location\" VARCHAR(32),\n    \"Time\" VARCHAR(32)\n)\n\n    SERVER \"FILE_SERVER\"\n\nOPTIONS (\n\"PARSER\" 'JSON',\n        \"ROW_PATH\" '$',\n\"deviceId_PATH\" '$.deviceId',\n        \"violationPoint_PATH\" '$.violationPoint',\n        \"Location_PATH\" '$.Location[0:]',\n        \"Time_PATH\" '$.Time',\n\n        \"DIRECTORY\" '/home/sqlstream/tmoproc/data',\n        \"FILENAME_PATTERN\" '.*.json'\n\n);\nCREATE OR REPLACE VIEW \"StreamLab_Output_tmo\".\"tmoassets\" AS\nSELECT STREAM *\nFROM STREAM(\"StreamLab_Output_tmo\".\"tmoassets_throttlefunc\"(\n  CURSOR(SELECT STREAM * FROM \"StreamLab_Output_tmo\".\"tmoassets_fs\"), 1000));\n\n!step=e3563,text=pipeline_1 1: Split column Location on comma creating 2 columns\n-- Split Operation\n\nCREATE OR REPLACE VIEW \"StreamLab_Output_tmo\".\"pipeline_1_step_1\" AS\n    SELECT STREAM \"deviceId\",\"violationPoint\",\"input\".r.column1 AS \"Location_1\",\"input\".r.column2 AS \"Location_2\",\"Time\"\n    FROM (SELECT STREAM *,\n\n        VARIABLE_COLUMN_LOG_PARSE(\"Location\",2,',')\n\n    AS r FROM \"StreamLab_Output_tmo\".\"tmoassets\") AS \"input\";\n\n!step=e4773,text=pipeline_1 2: Rename column Location_1 to Longitude\n--  Rename Operation\n\nCREATE OR REPLACE VIEW \"StreamLab_Output_tmo\".\"pipeline_1_step_2\" AS\n    SELECT STREAM \"deviceId\",\"violationPoint\",\"Location_1\" AS \"Longitude\",\"Location_2\",\"Time\"\n    FROM \"StreamLab_Output_tmo\".\"pipeline_1_step_1\" AS \"input\";\n\n!step=e10806,text=pipeline_1 3: Rename column Location_2 to Latitude\n--  Rename Operation\n\nCREATE OR REPLACE VIEW \"StreamLab_Output_tmo\".\"pipeline_1_step_3\" AS\n    SELECT STREAM \"deviceId\",\"violationPoint\",\"Longitude\",\"Location_2\" AS \"Latitude\",\"Time\"\n    FROM \"StreamLab_Output_tmo\".\"pipeline_1_step_2\" AS \"input\";\n\n!step=e11820,text=pipeline_1 4: Calculate the expression trim(trailing ']' from \"Latitude\") on each of: Latitude\n-- Calculate Operation\n\nCREATE OR REPLACE VIEW \"StreamLab_Output_tmo\".\"pipeline_1_step_4\" AS\n    SELECT STREAM \"deviceId\",\"violationPoint\",\"Longitude\",trim(trailing ']' from \"Latitude\") AS \"Latitude\",\"Time\"\n    FROM \"StreamLab_Output_tmo\".\"pipeline_1_step_3\" AS \"input\";\n\n!step=e12745,text=pipeline_1 5: Calculate the expression trim(leading '[' from \"Longitude\") on each of: Longitude\n-- Calculate Operation\n\nCREATE OR REPLACE VIEW \"StreamLab_Output_tmo\".\"pipeline_1_step_5\" AS\n    SELECT STREAM \"deviceId\",\"violationPoint\",trim(leading '[' from \"Longitude\") AS \"Longitude\",\"Latitude\",\"Time\"\n    FROM \"StreamLab_Output_tmo\".\"pipeline_1_step_4\" AS \"input\";\n\n!step=e15255,text=pipeline_1 6: Calculate the expression trim(@) on each of: Longitude,Latitude\n-- Calculate Operation\n\nCREATE OR REPLACE VIEW \"StreamLab_Output_tmo\".\"pipeline_1_step_6\" AS\n    SELECT STREAM \"deviceId\",\"violationPoint\",trim(\"Longitude\") AS \"Longitude\",trim(\"Latitude\") AS \"Latitude\",\"Time\"\n    FROM \"StreamLab_Output_tmo\".\"pipeline_1_step_5\" AS \"input\";\n\n!step=e15784,text=pipeline_1 7: Calculate the expression trim(both '\"' from @) on each of: Longitude,Latitude\n-- Calculate Operation\n\nCREATE OR REPLACE VIEW \"StreamLab_Output_tmo\".\"pipeline_1_step_7\" AS\n    SELECT STREAM \"deviceId\",\"violationPoint\",trim(both '\"' from \"Longitude\") AS \"Longitude\",trim(both '\"' from \"Latitude\") AS \"Latitude\",\"Time\"\n    FROM \"StreamLab_Output_tmo\".\"pipeline_1_step_6\" AS \"input\";\n\n!step=e17331,text=pipeline_1 8: Cast the columns Longitude,Latitude to the types DOUBLE,DOUBLE\n--  Bulk Cast Operation\n\nCREATE OR REPLACE VIEW \"StreamLab_Output_tmo\".\"pipeline_1_step_8\" AS\n    SELECT STREAM \"deviceId\",\"violationPoint\",CAST(\"Longitude\" AS DOUBLE) AS \"Longitude\",CAST(\"Latitude\" AS DOUBLE) AS \"Latitude\",\"Time\"\n    FROM \"StreamLab_Output_tmo\".\"pipeline_1_step_7\" AS \"input\";\n\n!step=e22985,text=pipeline_1 9: Convert Time using the format expression MM/dd/yyyy HH:mm:ss. Promote to ROWTIME: .\n-- Timestamp Operation\n\nCREATE OR REPLACE VIEW \"StreamLab_Output_tmo\".\"pipeline_1_step_9\" AS\n    SELECT STREAM \"deviceId\",\"violationPoint\",\"Longitude\",\"Latitude\",CHAR_TO_TIMESTAMP('MM/dd/yyyy HH:mm:ss', CAST(\"Time\" AS VARCHAR(64))) AS \"Time\"\n    FROM \"StreamLab_Output_tmo\".\"pipeline_1_step_8\" AS \"input\";\n\nCREATE OR REPLACE VIEW \"StreamLab_Output_tmo\".\"pipeline_1_out\" AS SELECT STREAM * FROM \"StreamLab_Output_tmo\".\"pipeline_1_step_9\";\n\n-- StreamApp end\n","dropScript":"DROP SCHEMA \"StreamLab_Output_tmo\" CASCADE;","stopScript":"ALTER PUMP \"StreamLab_Output_tmo\".* STOP;\nALTER STREAM \"StreamLab_Output_tmo\".* RESET;\n","startScript":"ALTER PUMP \"StreamLab_Output_tmo\".* START;\n","mainOwner":"sqlstream","mainPkg":"StreamLab_App_2_0_0","mainPath":"/sql-templates/catalog.sql","runWhenOpened":true,"projectDropMode":"owned","blockingQueriesMode":"terminate","strictTemplates":true,"projectThrottleRate":1,"disableAllThrottlers":false,"projectSchema":"StreamLab_Output_tmo","webaMax":100,"pkMax":32,"pkLen":64,"primary":true,"looseEndsMode":"renderSQL","galleryDescription":null,"galleryImage":null,"streamAppName":null,"tutorialUrl":null,"keywords":null,"currentNode":"e0","nodes":{"n":27389,"e0":{"id":"e0","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"include","panelType":"include","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/catalog.sql","parent":null,"subs":["e1","e57","e76","e83","e89","e94"],"chosen":["e76","e83","e89","e94"],"dashFullPath":null,"params":null,"locals":{"dont_render":false,"docsDismissed":true,"subview":"counts","layout":"toplevel"}},"e1":{"id":"e1","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"include","panelType":"include","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/private.sql","parent":"e0","subs":["e2","e3","e4","e5","e6","e7","e8","e9","e10","e56"],"chosen":["e2","e3","e4","e5","e6","e7","e8","e9","e10","e56"],"dashFullPath":null,"params":null,"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e2":{"id":"e2","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/rename.sql","parent":"e1","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","to":""},"locals":{"dont_render":true,"memberships":"","docsDismissed":true,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_9","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_10","rowtimePromotion":false}},"e3":{"id":"e3","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params_source","panelType":"params_source","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/stream.sql","parent":"e1","subs":[],"chosen":[],"dashFullPath":null,"params":{"endpoint":"","columns":"[]"},"locals":{"dont_render":true,"memberships":"","docsDismissed":true,"dontThrottle":true,"runBtnState":"untried","showAutoFillBtn":true}},"e4":{"id":"e4","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params_source","panelType":"params_source","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/table.sql","parent":"e1","subs":[],"chosen":[],"dashFullPath":null,"params":{"endpoint":"","columns":"[]"},"locals":{"dont_render":true,"memberships":"","docsDismissed":true,"dontThrottle":true,"runBtnState":"untried","showAutoFillBtn":true}},"e5":{"id":"e5","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params_source","panelType":"params_source","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/view.sql","parent":"e1","subs":[],"chosen":[],"dashFullPath":null,"params":{"endpoint":"","type":"View on a stream","columns":"[]"},"locals":{"dont_render":true,"memberships":"","docsDismissed":true,"dontThrottle":true,"runBtnState":"untried","showAutoFillBtn":true}},"e6":{"id":"e6","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/sqlobj.sql","parent":"e1","subs":[],"chosen":[],"dashFullPath":null,"params":{"endpoint":""},"locals":{"dont_render":true,"memberships":"","docsDismissed":true}},"e7":{"id":"e7","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params_destination","panelType":"params_destination","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/sink_stream.sql","parent":"e1","subs":[],"chosen":[],"dashFullPath":null,"params":{"endpoint":"*** Use Project Schema ***::sink_1::stream","columns":"[]","autogen":false},"locals":{"dont_render":true,"memberships":"","docsDismissed":true,"suppressOptimizationIfModified":true,"destination_description":"Route to stream StreamLab_Output_tmo.sink_1"}},"e8":{"id":"e8","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params_destination","panelType":"params_destination","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/sink_new_stream.sql","parent":"e1","subs":[],"chosen":[],"dashFullPath":null,"params":{"endpoint":"*** Use Project Schema ***::sink_1::stream","columns":"[]"},"locals":{"dont_render":true,"memberships":"","docsDismissed":true,"allowAutogenerate":true,"autoSinksMenuDefault":true,"autoSinkRemoveRuntime":true,"autoSinksMenuTitle":"Internal stream","runBtnState":"untried","showRunBtn":true,"outputHasConnector":true,"trackExecution":true,"destination_description":"Route to stream \"StreamLab_Output_tmo\".\"sink_1\""}},"e9":{"id":"e9","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params_destination","panelType":"params_destination","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/route_sink_stream.sql","parent":"e1","subs":[],"chosen":[],"dashFullPath":null,"params":{"endpoint":"*** Use Project Schema ***::sink_1::stream","columns":"[]","sinkId":"","useSinkDesc":false},"locals":{"dont_render":true,"memberships":"","docsDismissed":true,"suppressOptimizationIfModified":true,"suppressOptimizationIfModified_sinkId":true,"trackExecution":true,"destination_description":"Route to stream StreamLab_Output_tmo.sink_1","outputObject":"pipeline_1_step_11","inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_10","outputSchema":"StreamLab_Output_tmo"}},"e10":{"id":"e10","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"guide","panelType":"guide","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/guide.sql","parent":"e1","subs":["e11","e12","e13","e14","e15","e16","e17","e18","e19","e20","e21","e22","e23","e24","e25","e26","e27","e28","e29","e30","e31","e32","e33","e34","e35","e36","e37","e38","e39","e40","e41","e42","e43","e44","e45","e46","e47","e48","e49","e50","e51","e52","e53","e54","e55"],"chosen":[],"dashFullPath":null,"params":null,"locals":{"dont_render":true,"memberships":"","docsDismissed":true}},"e11":{"id":"e11","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/addCount.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"runningCount"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e12":{"id":"e12","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/cast.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"","type":"","size":8,"scale":8,"precision":2},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e13":{"id":"e13","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/castBulk.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"","to":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e14":{"id":"e14","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/drop.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e15":{"id":"e15","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/duplicateColumns.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"suffix":"_new","columns":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e16":{"id":"e16","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/extract.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"resultColumn":"substring","column":"","start":0,"length":1,"ifNotFit":"truncate"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e17":{"id":"e17","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/filter.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"mode":"Accept rows where","$$clause$$":"0","showConj$_$clause$$0":true,"showThen$_$clause$$0":true,"showVal2$_$clause$$0":true,"conj$_$clause$$0":"","col$_$clause$$0":"","op$_$clause$$0":"is equal to","val$_$clause$$0":"0","val2$_$clause$$0":"0","then$_$clause$$0":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e18":{"id":"e18","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/merge.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"resultColumn":"newColumn","column":"","glue":"","column2":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e19":{"id":"e19","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/rename.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","to":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"rowtimePromotion":false}},"e20":{"id":"e20","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/renameBulk.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"","to":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"rowtimePromotion":false}},"e21":{"id":"e21","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/replaceNull.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","nullIndicator":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e22":{"id":"e22","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/split.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","newCols":"1","on":"comma","custom":"","auto":null},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e23":{"id":"e23","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/throttle.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"throttler":"on","rps":"project standard","customRps":"1.0"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e24":{"id":"e24","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseTimestamp.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","conversion":"format expression","format":"yyyy-MM-DD HH:mm:ss","promote":false},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e25":{"id":"e25","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/useNull.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","nullIndicator":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e26":{"id":"e26","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseCDR.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","parser":"SONUS-COMMON","delim":",","escape":"\\","quote":"\""},"locals":{"dont_render":false,"memberships":"Parsers","docsDismissed":true}},"e27":{"id":"e27","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseJSON.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","prefix":"","struct":"object","$$objprops$$":"0","showCol$_$objprops$$0":true,"col$_$objprops$$0":"","type$_$objprops$$0":"VARCHAR","precision$_$objprops$$0":64,"scale$_$objprops$$0":2,"arrlen":1,"showCol$_$arrtype":true,"col$_$arrtype":"","type$_$arrtype":"VARCHAR","precision$_$arrtype":64,"scale$_$arrtype":2},"locals":{"dont_render":false,"memberships":"Parsers","docsDismissed":true}},"e28":{"id":"e28","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/w3c.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","logFormat":"COMMON"},"locals":{"dont_render":false,"memberships":"Parsers","docsDismissed":true}},"e29":{"id":"e29","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/regex.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","parser":"FULL","regex":"(.*)"},"locals":{"dont_render":false,"memberships":"Parsers","docsDismissed":true}},"e30":{"id":"e30","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/split.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","newCols":"1","on":"comma","custom":"","auto":null},"locals":{"dont_render":false,"memberships":"Parsers","docsDismissed":true}},"e31":{"id":"e31","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseTimestamp.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","conversion":"format expression","format":"yyyy-MM-DD HH:mm:ss","promote":false},"locals":{"dont_render":false,"memberships":"Parsers","docsDismissed":true}},"e32":{"id":"e32","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/unfold.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"key":"","showNth$_$operation":false,"nth$_$operation":2,"op$_$operation":"average","val":"","suffix":"_total","$$parts$$":"0","parts$$0":null,"showNth$_$opExtra":false,"nth$_$opExtra":2,"op$_$opExtra":"average","len$_$window":1,"unit$_$window":"minute","mode":"sliding","len$_$refresh":1,"unit$_$refresh":"second","keylist":""},"locals":{"dont_render":false,"memberships":"Pivot","docsDismissed":true}},"e33":{"id":"e33","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/fold.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"keyCol":"key","valCol":"value","srcCols":"","suffix":"_total"},"locals":{"dont_render":false,"memberships":"Pivot","docsDismissed":true}},"e34":{"id":"e34","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/sortColumns.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"sortby":"column name","direction":"forward"},"locals":{"dont_render":false,"memberships":"Pivot","docsDismissed":true}},"e35":{"id":"e35","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/aggregate.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"mode":"sliding","frame":"time","len$_$tumbletime":1,"unit$_$tumbletime":"minute","len$_$timestart":1,"unit$_$timestart":"minute","len$_$timeend":0,"unit$_$timeend":"minute","len$_$hoptime":0,"unit$_$hoptime":"minute","rowstarttype":"N rows preceding","rowstart":1,"rowendtype":"current row","rowend":0,"$$aggs$$":"0","showNth$_$aggs$$0":false,"nth$_$aggs$$0":2,"newcol$_$aggs$$0":"","col$_$aggs$$0":"","op$_$aggs$$0":"average","$$groups$$":"0","groups$$0":null,"$$parts$$":"0","parts$$0":null,"session_on":null,"$$sessionparts$$":null,"session_id_column":null,"session_start_on":null,"$$session_start_clause$$":null,"session_end_on":null,"$$session_end_clause$$":null,"session_timeout_on":null,"len$_$session_timeout":null,"unit$_$session_timeout":null,"remaining":"drop"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e36":{"id":"e36","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/runningAverage.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"mode":"sliding","len$_$window":1,"unit$_$window":"minute","column":"","operation":"AVERAGE","k1":"2.0","k2":"3.0","outputColumn":"avg","remaining":"drop"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e37":{"id":"e37","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/calculate.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"","expr":""},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e38":{"id":"e38","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/categorize.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"","def":"","$$when$$":"0","showConj$_$when$$0":true,"showThen$_$when$$0":true,"showVal2$_$when$$0":true,"conj$_$when$$0":"","col$_$when$$0":"","op$_$when$$0":"is equal to","val$_$when$$0":"0","val2$_$when$$0":"0","then$_$when$$0":""},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e39":{"id":"e39","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/distinct.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"len$_$window":1,"unit$_$window":"millisecond","promote":false,"to":""},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e40":{"id":"e40","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/geoIP.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","prefix":""},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e41":{"id":"e41","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/group_rank.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"outputColumn":"groupRank","$$part$$":"0","part$$0":null,"column":"","operation":"AVG","len$_$window":1,"unit$_$window":"minute","sortOrder":"descending","outputOrder":"ascending","maxIdle":1000,"maxOut":50},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e42":{"id":"e42","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/join.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"leftwindowtype":"none","len$_$lefttimestart":1,"unit$_$lefttimestart":"minute","len$_$lefttimeend":0,"unit$_$lefttimeend":"minute","leftrowstart":1,"leftrowend":0,"joinmode":"stream","jointype":"inner join","rightwindowtype":"none","len$_$righttimestart":1,"unit$_$righttimestart":"minute","len$_$righttimeend":0,"unit$_$righttimeend":"minute","rightrowstart":1,"rightrowend":0,"tableName":null,"$$joins$$":"0","col$_$joins$$0":"","col2$_$joins$$0":"","cache":0,"prefetch":false,"fuzzy":false},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true,"secondarySourceStreamParams":"[\"tableName\"]","streamStreamJoin":true}},"e43":{"id":"e43","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/timesort.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","len$_$window":1,"unit$_$window":"minute"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true,"rowtimePromotion":false}},"e44":{"id":"e44","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/newColumn.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"result","expression":""},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e45":{"id":"e45","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/callUDX.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"func":"","$$args$$":"0","selection$_$args$$0":"⫷input cursor⫸","value$_$args$$0":"","type":"STREAM","rowtime":"CURRENT_ROW_TIMESTAMP"},"locals":{"dont_render":false,"memberships":"Advanced","docsDismissed":true}},"e46":{"id":"e46","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/injectSQLview.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"mode":"","sql":""},"locals":{"dont_render":false,"memberships":"Advanced","docsDismissed":true}},"e47":{"id":"e47","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/injectSQL.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":null,"params":{"sql":""},"locals":{"dont_render":false,"memberships":"Advanced","docsDismissed":true}},"e48":{"id":"e48","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-multipanel.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/panels-multi.json","params":{"$$pcols$$":"0","pcols$$0":""},"locals":{"dont_render":false,"memberships":"Dashboards","docsDismissed":true,"suppressOptimizationIfModified":true,"whichDash":1}},"e49":{"id":"e49","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-chartjs-bars.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/chartjs-bars.json","params":{"dataColumns":""},"locals":{"dont_render":false,"memberships":"Dashboards","docsDismissed":true,"suppressOptimizationIfModified":true}},"e50":{"id":"e50","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-bars-over-time.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/chartjs-bars-over-time.json","params":{"dataColumns":""},"locals":{"dont_render":false,"memberships":"Dashboards","docsDismissed":true,"suppressOptimizationIfModified":true}},"e51":{"id":"e51","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-bars-over-key.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/chartjs-bars-over-key.json","params":{"key":"","dataColumns":""},"locals":{"dont_render":false,"memberships":"Dashboards","docsDismissed":true,"suppressOptimizationIfModified":true}},"e52":{"id":"e52","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-bars-and-lines.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/bars_and_lines.json","params":{"barColumns":"","lineColumns":""},"locals":{"dont_render":false,"memberships":"Dashboards","docsDismissed":true,"suppressOptimizationIfModified":true}},"e53":{"id":"e53","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-bollinger.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/bollinger.json","params":{"avg":"","avg_upper":"","avg_lower":"","avg_upper2":"","avg_lower2":""},"locals":{"dont_render":false,"memberships":"Dashboards","docsDismissed":true,"suppressOptimizationIfModified":true}},"e54":{"id":"e54","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-map-and-table.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/map_and_table.json","params":{"maptype":"events","latitude":"","longitude":"","key":"","value":"","event_id":""},"locals":{"dont_render":false,"memberships":"Dashboards","docsDismissed":true,"suppressOptimizationIfModified":true}},"e55":{"id":"e55","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-timeseries.sql","parent":"e10","subs":[],"chosen":[],"dashFullPath":"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/timeseries.json","params":{"dataColumns":""},"locals":{"dont_render":false,"memberships":"Dashboards","docsDismissed":true,"suppressOptimizationIfModified":true}},"e56":{"id":"e56","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/dash_default.json","parent":"e1","subs":[],"chosen":[],"dashFullPath":null,"params":{"test":"test-default"},"locals":{"dont_render":true,"memberships":""}},"e57":{"id":"e57","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"include","panelType":"include","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda.sql","parent":"e0","subs":["e58","e59","e60","e61","e62","e63","e64","e65","e66","e67","e68","e69","e70","e71","e72","e73","e74","e75"],"chosen":["e58","e59","e60","e61","e62","e63","e64","e65","e66","e67","e68","e69","e70","e71","e72","e73","e74","e75"],"dashFullPath":null,"params":null,"locals":{"dont_render":false,"memberships":""}},"e58":{"id":"e58","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_file_reader.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_file_directory":"","addin_ecda_filename_pattern":"","addin_renderMode":"native","addin_ecda_file_renderMode":"Begin from the current file location and tail the file","addin_ecda_file_provenance":"do not include"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e59":{"id":"e59","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_http_reader.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e60":{"id":"e60","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_websocket_reader.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e61":{"id":"e61","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_socket_reader.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e62":{"id":"e62","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_amqp_reader.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e63":{"id":"e63","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_kafka_reader.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_renderMode":"native","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e64":{"id":"e64","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_kinesis_reader.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_provenance":"do not include"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e65":{"id":"e65","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_mqtt_reader.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e66":{"id":"e66","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_listener_reader.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e67":{"id":"e67","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_file_writer.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_file_directory":"","addin_ecda_file_prefix_suffix":"output-|.log","addin_ecda_file_original_filename":"","addin_ecda_file_watermark_column":"","addin_ecda_file_filename_date_format":"yyyy-MM-dd-HH:mm:ss","addin_ecda_file_include_rowtime":true,"addin_ecda_file_respect_rowtime":"always respect ROWTIME","addin_ecda_file_rotation_mode":"limit by time","addin_ecda_file_rotation_time":"1|h","addin_ecda_file_rotation_size":"1|m","addin_ecda_file_postprocess_cmd":"","addin_ecda_file_escape_columns":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e68":{"id":"e68","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_http_writer.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_http_url":"http://","addin_ecda_http_headers":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e69":{"id":"e69","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_mongodb_writer.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_mongodb_writer_host":"localhost","addin_ecda_mongodb_writer_port":"27017","addin_ecda_mongodb_writer_path":"","addin_ecda_mongodb_writer_user":"","addin_ecda_mongodb_writer_password":"","addin_ecda_mongodb_writer_collection":"","addin_ecda_mongodb_writer_transaction_rowtime_limit":1000,"addin_ecda_mongodb_writer_transaction_row_limit":0},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e70":{"id":"e70","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_socket_writer.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_socket_server_hostport":"0.0.0.0|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e71":{"id":"e71","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_amqp_writer.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_amqp_writer_url":"amqp://","addin_ecda_amqp_writer_destination":"","addin_ecda_amqp_writer_protocol":"AMQP 1.0","addin_ecda_amqp_writer_ack_mode":"auto","addin_ecda_amqp_writer_delivery_mode":"non_persistent"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e72":{"id":"e72","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_kafka_writer.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_metadata_broker_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_topic":"","addin_ecda_kafka_client_id":"","addin_ecda_kafka_writer_advanced":"Hide advanced options","addin_ecda_kafka_partitioner_class":"","addin_ecda_kafka_serializer_class":"","addin_ecda_kafka_key_serializer_class":"","addin_ecda_kafka_headers_columns":"","addin_ecda_kafka_producer_type":"async","addin_ecda_kafka_compression_codec":"none","addin_ecda_kafka_compression_type":"none","addin_ecda_kafka_compressed_topics":"","addin_ecda_kafka_message_send_max_retries":3,"addin_ecda_kafka_message_retry_backoff_ms":100,"addin_ecda_kafka_message_request_required_acks":0,"addin_ecda_kafka_message_request_timeout_ms":10000,"addin_ecda_kafka_topic_metadata_refresh_interval_ms":600000,"addin_ecda_kafka_queue_buffering_max_ms":5000,"addin_ecda_kafka_queue_buffering_max_messages":1000,"addin_ecda_kafka_queue_enqueue_timeout_ms":-1,"addin_ecda_kafka_batch_num_messages":200,"addin_ecda_kafka_batch_size":16384,"addin_ecda_kafka_linger_ms":100,"addin_ecda_kafka_send_buffer_bytes":102400,"addin_ecda_kafka_transaction_rowtime_limit":1000,"addin_ecda_kafka_transaction_id":"","addin_ecda_kafka_ha_rollover_timeout":5000,"addin_ecda_kafka_poll_timeout_ms":100,"addin_ecda_kafka_commit_metadata_column":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e73":{"id":"e73","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_kinesis_writer.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_partition_id":"","addin_ecda_kinesis_buffer_size":4194304,"addin_ecda_kinesis_max_retries":10,"addin_ecda_kinesis_initial_backoff":20,"addin_ecda_kinesis_max_backoff":20480,"addin_ecda_kinesis_max_records_per_request":500,"addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_report_frequency":0},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e74":{"id":"e74","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_mqtt_writer.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_mqtt_writer_url":"tcp://localhost:1883","addin_ecda_mqtt_writer_topic":"","addin_ecda_mqtt_writer_qos":"0 - at most once","addin_ecda_mqtt_writer_clientid":"","addin_ecda_mqtt_writer_username":"","addin_ecda_mqtt_writer_password":"","addin_ecda_mqtt_writer_keepalive":60,"addin_ecda_mqtt_writer_connectiontimeout":30,"addin_ecda_mqtt_writer_max_in_flight":10,"addin_ecda_mqtt_writer_retained":"false"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e75":{"id":"e75","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_snowflake_writer.sql","parent":"e57","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_snowflake_username":"","addin_ecda_snowflake_password":"","addin_ecda_snowflake_account":"","addin_ecda_snowflake_warehouse":"","addin_ecda_snowflake_database":"","addin_ecda_snowflake_schema":"","addin_ecda_snowflake_dtable":"","addin_ecda_snowflake_max_bytes":1073741824,"addin_ecda_snowflake_max_time":0},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e76":{"id":"e76","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"include_multiple","panelType":"include_multiple","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/servers.sql","parent":"e0","subs":["e77","e78","e79","e80","e81","e82"],"chosen":[],"dashFullPath":null,"params":null,"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"subview":"names"}},"e77":{"id":"e77","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/servers/mysql.sql","parent":"e76","subs":[],"chosen":[],"dashFullPath":null,"params":{"name":"MySQL_DB_1","urlSource":"as separate components","host":"localhost","path":"mysql","url":"jdbc:mysql://localhost/mysql?useCursorFetch=true","user":"mysql","password":"","pollingInterval":1000,"txInterval":1000,"xtras":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"showRunBtn":true,"runBtnState":"untried"}},"e78":{"id":"e78","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/servers/oracle.sql","parent":"e76","subs":[],"chosen":[],"dashFullPath":null,"params":{"name":"Oracle_DB_1","urlSource":"as separate components","host":"localhost","port":"1521","conparams":"XE","url":"jdbc:oracle:thin:@localhost:1521:XE","user":"sqlserver","password":"","pollingInterval":1000,"txInterval":1000,"xtras":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"showRunBtn":true,"runBtnState":"untried"}},"e79":{"id":"e79","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/servers/postgres.sql","parent":"e76","subs":[],"chosen":[],"dashFullPath":null,"params":{"name":"PostgreSQL_DB_1","urlSource":"as separate components","host":"localhost","path":"postgres","url":"jdbc:postgresql://localhost/postgres","schema":"public","user":"","password":"","pollingInterval":1000,"txInterval":1000,"xtras":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"showRunBtn":true,"runBtnState":"untried"}},"e80":{"id":"e80","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/servers/sqlserver.sql","parent":"e76","subs":[],"chosen":[],"dashFullPath":null,"params":{"name":"SQLserver_DB_1","urlSource":"as separate components","host":"localhost","database":"test","conparams":"","url":"jdbc:sqlserver://localhost;databaseName=test;","user":"sqlserver","password":"","pollingInterval":1000,"txInterval":1000,"xtras":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"showRunBtn":true,"runBtnState":"untried"}},"e81":{"id":"e81","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/servers/teradata.sql","parent":"e76","subs":[],"chosen":[],"dashFullPath":null,"params":{"name":"Teradata_DB_1","urlSource":"as separate components","host":"localhost","conparams":"","url":"jdbc:teradata://localhost/","user":"sqlstream","password":"","pollingInterval":1000,"txInterval":1000,"qbands":"[]","xtras":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"showRunBtn":true,"runBtnState":"untried"}},"e82":{"id":"e82","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/servers/generic.sql","parent":"e76","subs":[],"chosen":[],"dashFullPath":null,"params":{"name":"Generic_DB_1","driver":"com.generic.jdbc.Driver","dialect":"PostgreSQL","urlSource":"as separate components","prefix":"jdbc:generic:","host":"localhost","path":"","url":"jdbc:generic://localhost/","user":"sqlstream","password":"","xtras":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"showRunBtn":true,"runBtnState":"untried"}},"e83":{"id":"e83","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"include_multiple","panelType":"include_multiple","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/sources.sql","parent":"e0","subs":["e84","e85","e86","e87","e88"],"chosen":["e141"],"dashFullPath":null,"params":null,"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"showThrottles":true,"showTelemetry":true,"deferRender":"looseEndsMode","subview":"endpoints","localMenu":["sources-import-schema","sources-throttle-on","sources-throttle-off"]}},"e84":{"id":"e84","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params_ecda_source","panelType":"params_ecda_source","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/sources/ecda.sql","parent":"e83","subs":[],"chosen":[],"dashFullPath":null,"params":{"ecda_reader_server":"ECDAReaderServer_tmo_1","endpoint":"*** Use Project Schema ***::data_1::stream","format":"Line","columns":"[]","columnsCSV":"[]","line_buf_size":4096,"rowSeparator":"","separator":"","quoteChar":"","encoding":"UTF-8","skip_header":false,"rowpath":"$","parser_xml_row_tags":"/stream/row","parser_xml_use_attributes":false,"formatBin":"AVRO","schemaHeader":true,"schemaAvro":"","jarBin":"","classBin":"","columnsBin":"[]","msglength":false,"msgstream":false,"max_example":"1024","timeout":"3:3:seconds","xtras":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"runBtnState":"untried","showDiscoveryBtn":true,"trackExecution":true,"schema":"StreamLab_Output_tmo","object":"data_1","type":"stream","isStream":true}},"e85":{"id":"e85","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params_source","panelType":"params_source","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/sources/foreignTable.sql","parent":"e83","subs":[],"chosen":[],"dashFullPath":null,"params":{"endpoint":"*** Use Project Schema ***::external_table_1::table","serverName":"*** Please define a connection on the External Connections top-level page ***","fschema":"public","ftable":"","columns":"[]","asStream":false,"queryCol":"*** no columns have been defined yet ***","xtras":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"runBtnState":"untried","showDiscoveryBtn":false,"showAutoFillBtn":true,"forceAutoFillTable":true,"trackExecution":true,"isStream":false,"schema":"StreamLab_Output_tmo","object":"external_table_1","type":"table"}},"e86":{"id":"e86","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params_source","panelType":"params_source","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/sources/stream.sql","parent":"e83","subs":[],"chosen":[],"dashFullPath":null,"params":{"endpoint":"","columns":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"dontThrottle":true,"runBtnState":"untried","showAutoFillBtn":true,"trackExecution":false}},"e87":{"id":"e87","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params_source","panelType":"params_source","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/sources/new_stream.sql","parent":"e83","subs":[],"chosen":[],"dashFullPath":null,"params":{"endpoint":"","columns":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"dontThrottle":true,"runBtnState":"untried","showAutoFillBtn":false,"trackExecution":true}},"e88":{"id":"e88","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params_source","panelType":"params_source","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/sources/publicData.sql","parent":"e83","subs":[],"chosen":[],"dashFullPath":null,"params":{"whichOne":"Meetup RSVPs","endpoint":"*** Use Project Schema ***::public_1::stream"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"runBtnState":"untried","trackExecution":true,"schema":"StreamLab_Output_tmo","object":"public_1","type":"stream","isStream":true}},"e89":{"id":"e89","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"include_multiple","panelType":"include_multiple","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/sinks.sql","parent":"e0","subs":["e90","e91","e92","e93"],"chosen":[],"dashFullPath":null,"params":null,"locals":{"dont_render":false,"memberships":"","showTelemetry":true,"docsDismissed":true,"deferRender":"looseEndsMode","subview":"endpoints"}},"e90":{"id":"e90","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params_ecda_destination","panelType":"params_ecda_destination","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/sinks/ecda.sql","parent":"e89","subs":[],"chosen":[],"dashFullPath":null,"params":{"ecda_writer_server":"ECDAWriterServer_tmo_1","endpoint":"*** Use Project Schema ***::data_out_1::stream","format":"JSON","columns":"[]","columnsXML":"[]","rowSeparator":"000A","separator":",","quoteChar":"","encoding":"UTF-8","write_header":false,"doc_elements":"batch","row_elements":"row","data_elements":"data","data_attributes":"value","orc_block_padding":null,"orc_block_size":null,"orc_direct_encoding_columns":null,"orc_batch_size":null,"orc_version":null,"orc_user_metadata":null,"orc_compress":null,"orc_compress_size":null,"orc_stripe_size":null,"orc_row_index_stride":null,"orc_bloom_filter_columns":null,"orc_bloom_filter_fpp":null,"inGuide":false,"xtras":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"runBtnState":"untried","showRunBtn":true,"allowAutogenerate":true,"autoSinksMenuTitle":"External data stream","outputHasConnector":true,"trackExecution":true,"destination_description":"Route to undefined as JSON"}},"e91":{"id":"e91","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params_destination","panelType":"params_destination","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/sinks/foreignTable.sql","parent":"e89","subs":[],"chosen":[],"dashFullPath":null,"params":{"endpoint":"*** Use Project Schema ***::external_table_out_1::table","serverName":null,"fschema":"public","ftable":"","columns":"[]","transTimeLimit":1000,"transRowLimit":0,"xtras":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"showAutoFillBtn":true,"showRunBtn":true,"runBtnState":"untried","outputHasConnector":true,"trackExecution":true,"destination_description":"Insert to external table public. on null_tmo","generate_sink_first":true}},"e92":{"id":"e92","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params_destination","panelType":"params_destination","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/sinks/stream_existing.sql","parent":"e89","subs":[],"chosen":[],"dashFullPath":null,"params":{"endpoint":null,"columns":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"showAutoFillBtn":true,"showRunBtn":true,"outputHasConnector":true,"trackExecution":true,"destination_description":"Route to existing stream "}},"e93":{"id":"e93","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params_destination","panelType":"params_destination","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/sinks/stream_new.sql","parent":"e89","subs":[],"chosen":[],"dashFullPath":null,"params":{"endpoint":"*** Use Project Schema ***::sink_1::stream","columns":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"allowAutogenerate":true,"autoSinksMenuDefault":true,"autoSinkRemoveRuntime":true,"autoSinksMenuTitle":"Internal stream","runBtnState":"untried","showRunBtn":true,"outputHasConnector":true,"trackExecution":true,"destination_description":"Route to stream \"StreamLab_Output_tmo\".\"sink_1\""}},"e94":{"id":"e94","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"include_multiple","panelType":"include_multiple","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides.sql","parent":"e0","subs":["e95"],"chosen":["e151"],"dashFullPath":null,"params":null,"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"subview":"guides","layout":"guide_tree"}},"e95":{"id":"e95","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"guide","panelType":"guide","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/guide.sql","parent":"e94","subs":["e96","e97","e98","e99","e100","e101","e102","e103","e104","e105","e106","e107","e108","e109","e110","e111","e112","e113","e114","e115","e116","e117","e118","e119","e120","e121","e122","e123","e124","e125","e126","e127","e128","e129","e130","e131","e132","e133","e134","e135","e136","e137","e138","e139","e140"],"chosen":[],"dashFullPath":null,"params":null,"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e96":{"id":"e96","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/addCount.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"runningCount"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e97":{"id":"e97","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/cast.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"Time","type":"","size":8,"scale":8,"precision":2},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e98":{"id":"e98","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/castBulk.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"Longitude,Latitude","to":"DOUBLE,DOUBLE"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e99":{"id":"e99","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/drop.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"Time"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e100":{"id":"e100","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/duplicateColumns.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"suffix":"_new","columns":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e101":{"id":"e101","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/extract.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"resultColumn":"substring","column":"Time","start":"2","length":"","ifNotFit":"truncate"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e102":{"id":"e102","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/filter.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"mode":"Accept rows where","$$clause$$":"0","showConj$_$clause$$0":true,"showThen$_$clause$$0":true,"showVal2$_$clause$$0":true,"conj$_$clause$$0":"","col$_$clause$$0":"","op$_$clause$$0":"is equal to","val$_$clause$$0":"0","val2$_$clause$$0":"0","then$_$clause$$0":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e103":{"id":"e103","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/merge.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"resultColumn":"newColumn","column":"","glue":"","column2":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e104":{"id":"e104","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/rename.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","to":"Latitude"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"rowtimePromotion":false}},"e105":{"id":"e105","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/renameBulk.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"","to":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"rowtimePromotion":false}},"e106":{"id":"e106","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/replaceNull.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","nullIndicator":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e107":{"id":"e107","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/split.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","newCols":2,"on":"auto ->","custom":"","auto":"Columns separated by spaces with \"\" and [] for quoting"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e108":{"id":"e108","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/throttle.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"throttler":"on","rps":"project standard","customRps":"1.0"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e109":{"id":"e109","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseTimestamp.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"deviceId","conversion":"format expression","format":"MM/DD/yyyy HH:mm:ss","promote":false},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e110":{"id":"e110","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/useNull.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","nullIndicator":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e111":{"id":"e111","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseCDR.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","parser":"SONUS-COMMON","delim":",","escape":"\\","quote":"\""},"locals":{"dont_render":false,"memberships":"Parsers","docsDismissed":true}},"e112":{"id":"e112","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseJSON.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","prefix":"","struct":"object","$$objprops$$":"0","showCol$_$objprops$$0":true,"col$_$objprops$$0":"","type$_$objprops$$0":"VARCHAR","precision$_$objprops$$0":64,"scale$_$objprops$$0":2,"arrlen":1,"showCol$_$arrtype":true,"col$_$arrtype":"","type$_$arrtype":"VARCHAR","precision$_$arrtype":64,"scale$_$arrtype":2},"locals":{"dont_render":false,"memberships":"Parsers","docsDismissed":true}},"e113":{"id":"e113","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/w3c.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","logFormat":"COMMON"},"locals":{"dont_render":false,"memberships":"Parsers","docsDismissed":true}},"e114":{"id":"e114","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/regex.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","parser":"FULL","regex":"(.*)"},"locals":{"dont_render":false,"memberships":"Parsers","docsDismissed":true}},"e115":{"id":"e115","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/split.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","newCols":2,"on":"auto ->","custom":"","auto":"Columns separated by spaces with \"\" and [] for quoting"},"locals":{"dont_render":false,"memberships":"Parsers","docsDismissed":true}},"e116":{"id":"e116","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseTimestamp.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","conversion":"format expression","format":"yyyy-MM-DD HH:mm:ss","promote":false},"locals":{"dont_render":false,"memberships":"Parsers","docsDismissed":true}},"e117":{"id":"e117","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/unfold.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"key":"","showNth$_$operation":false,"nth$_$operation":2,"op$_$operation":"average","val":"","suffix":"_total","$$parts$$":"0","parts$$0":null,"showNth$_$opExtra":false,"nth$_$opExtra":2,"op$_$opExtra":"average","len$_$window":1,"unit$_$window":"minute","mode":"sliding","len$_$refresh":1,"unit$_$refresh":"second","keylist":""},"locals":{"dont_render":false,"memberships":"Pivot","docsDismissed":true}},"e118":{"id":"e118","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/fold.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"keyCol":"key","valCol":"value","srcCols":"","suffix":"_total"},"locals":{"dont_render":false,"memberships":"Pivot","docsDismissed":true}},"e119":{"id":"e119","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/sortColumns.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"sortby":"column name","direction":"forward"},"locals":{"dont_render":false,"memberships":"Pivot","docsDismissed":true}},"e120":{"id":"e120","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/aggregate.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"mode":"sliding","frame":"time","len$_$tumbletime":1,"unit$_$tumbletime":"minute","len$_$timestart":1,"unit$_$timestart":"minute","len$_$timeend":0,"unit$_$timeend":"minute","len$_$hoptime":0,"unit$_$hoptime":"minute","rowstarttype":"N rows preceding","rowstart":1,"rowendtype":"current row","rowend":0,"$$aggs$$":"0","showNth$_$aggs$$0":false,"nth$_$aggs$$0":2,"newcol$_$aggs$$0":"","col$_$aggs$$0":"deviceId","op$_$aggs$$0":"count","$$groups$$":"0","groups$$0":"⫷none⫸","$$parts$$":"0","parts$$0":"⫷none⫸","session_on":null,"$$sessionparts$$":null,"session_id_column":null,"session_start_on":null,"$$session_start_clause$$":null,"session_end_on":null,"$$session_end_clause$$":null,"session_timeout_on":null,"len$_$session_timeout":null,"unit$_$session_timeout":null,"remaining":"drop"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e121":{"id":"e121","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/runningAverage.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"mode":"sliding","len$_$window":1,"unit$_$window":"minute","column":"","operation":"AVERAGE","k1":"2.0","k2":"3.0","outputColumn":"avg","remaining":"drop"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e122":{"id":"e122","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/calculate.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"ltime","expr":"char_length(@)"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e123":{"id":"e123","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/categorize.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"Time","def":"","$$when$$":"0","showConj$_$when$$0":true,"showThen$_$when$$0":true,"showVal2$_$when$$0":true,"conj$_$when$$0":"","col$_$when$$0":"","op$_$when$$0":"is equal to","val$_$when$$0":"0","val2$_$when$$0":"0","then$_$when$$0":""},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e124":{"id":"e124","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/distinct.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"len$_$window":1,"unit$_$window":"millisecond","promote":false,"to":""},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e125":{"id":"e125","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/geoIP.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","prefix":""},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e126":{"id":"e126","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/group_rank.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"outputColumn":"groupRank","$$part$$":"0","part$$0":null,"column":"","operation":"AVG","len$_$window":1,"unit$_$window":"minute","sortOrder":"descending","outputOrder":"ascending","maxIdle":1000,"maxOut":50},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e127":{"id":"e127","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/join.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"leftwindowtype":"none","len$_$lefttimestart":1,"unit$_$lefttimestart":"minute","len$_$lefttimeend":0,"unit$_$lefttimeend":"minute","leftrowstart":1,"leftrowend":0,"joinmode":"stream","jointype":"inner join","rightwindowtype":"none","len$_$righttimestart":1,"unit$_$righttimestart":"minute","len$_$righttimeend":0,"unit$_$righttimeend":"minute","rightrowstart":1,"rightrowend":0,"tableName":null,"$$joins$$":"0","col$_$joins$$0":"","col2$_$joins$$0":"","cache":0,"prefetch":false,"fuzzy":false},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true,"secondarySourceStreamParams":"[\"tableName\"]","streamStreamJoin":true}},"e128":{"id":"e128","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/timesort.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","len$_$window":1,"unit$_$window":"minute"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true,"rowtimePromotion":false}},"e129":{"id":"e129","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/newColumn.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"ltime","expression":"char_length(\"Time\")"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e130":{"id":"e130","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/callUDX.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"func":"","$$args$$":"0","selection$_$args$$0":"⫷input cursor⫸","value$_$args$$0":"","type":"STREAM","rowtime":"CURRENT_ROW_TIMESTAMP"},"locals":{"dont_render":false,"memberships":"Advanced","docsDismissed":true}},"e131":{"id":"e131","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/injectSQLview.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"mode":"","sql":""},"locals":{"dont_render":false,"memberships":"Advanced","docsDismissed":true}},"e132":{"id":"e132","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/injectSQL.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":null,"params":{"sql":""},"locals":{"dont_render":false,"memberships":"Advanced","docsDismissed":true}},"e133":{"id":"e133","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-multipanel.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/panels-multi.json","params":{"$$pcols$$":"0","pcols$$0":""},"locals":{"dont_render":false,"memberships":"Dashboards","docsDismissed":true,"suppressOptimizationIfModified":true,"whichDash":1}},"e134":{"id":"e134","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-chartjs-bars.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/chartjs-bars.json","params":{"dataColumns":""},"locals":{"dont_render":false,"memberships":"Dashboards","docsDismissed":true,"suppressOptimizationIfModified":true}},"e135":{"id":"e135","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-bars-over-time.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/chartjs-bars-over-time.json","params":{"dataColumns":""},"locals":{"dont_render":false,"memberships":"Dashboards","docsDismissed":true,"suppressOptimizationIfModified":true}},"e136":{"id":"e136","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-bars-over-key.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/chartjs-bars-over-key.json","params":{"key":"","dataColumns":""},"locals":{"dont_render":false,"memberships":"Dashboards","docsDismissed":true,"suppressOptimizationIfModified":true}},"e137":{"id":"e137","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-bars-and-lines.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/bars_and_lines.json","params":{"barColumns":"","lineColumns":""},"locals":{"dont_render":false,"memberships":"Dashboards","docsDismissed":true,"suppressOptimizationIfModified":true}},"e138":{"id":"e138","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-bollinger.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/bollinger.json","params":{"avg":"","avg_upper":"","avg_lower":"","avg_upper2":"","avg_lower2":""},"locals":{"dont_render":false,"memberships":"Dashboards","docsDismissed":true,"suppressOptimizationIfModified":true}},"e139":{"id":"e139","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-map-and-table.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/map_and_table.json","params":{"maptype":"events","latitude":"","longitude":"","key":"","value":"","event_id":""},"locals":{"dont_render":false,"memberships":"Dashboards","docsDismissed":true,"suppressOptimizationIfModified":true}},"e140":{"id":"e140","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-timeseries.sql","parent":"e95","subs":[],"chosen":[],"dashFullPath":"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/timeseries.json","params":{"dataColumns":""},"locals":{"dont_render":false,"memberships":"Dashboards","docsDismissed":true,"suppressOptimizationIfModified":true}},"e141":{"id":"e141","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params_ecda_source","panelType":"params_ecda_source","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/sources/ecda.sql","parent":"e83","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":"","ecda_reader_server":"ECDAReaderServer_tmo_1","endpoint":"*** Use Project Schema ***::tmoassets::stream","format":"JSON","columns":"[[\"deviceId\",\"$.deviceId\",\"VARCHAR(16)\"],[\"violationPoint\",\"$.violationPoint\",\"VARCHAR(32)\"],[\"Location\",\"$.Location[0:]\",\"VARCHAR(32)\"],[\"Time\",\"$.Time\",\"VARCHAR(32)\"]]","columnsCSV":"[[\"deviceId\",\"VARCHAR(16)\"],[\"violationPoint\",\"VARCHAR(32)\"],[\"Location\",\"VARCHAR(32)\"],[\"Time\",\"VARCHAR(32)\"]]","line_buf_size":4096,"rowSeparator":"","separator":"","quoteChar":"","encoding":"UTF-8","skip_header":false,"rowpath":"$","parser_xml_row_tags":"/stream/row","parser_xml_use_attributes":false,"formatBin":"AVRO","schemaHeader":true,"schemaAvro":"","jarBin":"","classBin":"","columnsBin":"[[\"deviceId\",\"$.deviceId\",\"VARCHAR(16)\"],[\"violationPoint\",\"$.violationPoint\",\"VARCHAR(32)\"],[\"Location\",\"$.Location[0:]\",\"VARCHAR(32)\"],[\"Time\",\"$.Time\",\"VARCHAR(32)\"]]","msglength":false,"msgstream":false,"max_example":1024,"timeout":"10:10:seconds","xtras":"[]"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"runBtnState":"success","showDiscoveryBtn":true,"trackExecution":true,"schema":"StreamLab_Output_tmo","object":"tmoassets","type":"stream","isStream":true,"format_suggestion":"Line","columns":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Location","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}]}},"e142":{"id":"e142","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_file_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e143":{"id":"e143","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_http_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e144":{"id":"e144","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_websocket_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e145":{"id":"e145","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_socket_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e146":{"id":"e146","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_amqp_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e147":{"id":"e147","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_kafka_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e148":{"id":"e148","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_kinesis_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e149":{"id":"e149","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_mqtt_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e150":{"id":"e150","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_listener_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e151":{"id":"e151","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"guide","panelType":"guide","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/guide.sql","parent":"e94","subs":["e96","e97","e98","e99","e100","e101","e102","e103","e104","e105","e106","e107","e108","e109","e110","e111","e112","e113","e114","e115","e116","e117","e118","e119","e120","e121","e122","e123","e124","e125","e126","e127","e128","e129","e130","e131","e132","e133","e134","e135","e136","e137","e138","e139","e140"],"chosen":["e3563","e4773","e10806","e11820","e12745","e15255","e15784","e17331","e22985"],"dashFullPath":null,"params":null,"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"auto_name":"pipeline_1","inputSource":"e141","guideName":"pipeline_1","opsSet":"Basic","nDuplicates":1,"maxDuplicates":1,"needsReflow":false,"outputEndpoint":"e188","duplicateGuide":false,"outputSchema":"*** Use Project Schema ***"}},"e188":{"id":"e188","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/sqlobj.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"endpoint":"*** Use Project Schema ***::pipeline_1_out::view"},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"deferRender":false,"schema":"StreamLab_Output_tmo","object":"pipeline_1_out","type":"view","isStream":true,"columns":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":true,"unique":[],"min":null,"max":null,"partitionKeyCandidate":false,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false],"skew":0.02631578947368421,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["AssetTracker"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["217 192nd Street Southwest, Both","Lynnwood, WA 98036","None"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":[-122.302032,-122.30169,-122.295467,-122.290208,-122.23696,-122.164912],"min":-122.302032,"max":-122.164912,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,true,false,true,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false,true,false,false,false,false],"skew":0,"lastTimestamp":null},{"name":"Latitude","index":5,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":[47.577675,47.809007,47.80919,47.812512,47.815348,47.824587],"min":47.577675,"max":47.824587,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,true,true,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,true,false,false,false,false],"skew":0,"lastTimestamp":null},{"name":"Time","index":6,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["2020-01-07T00:30:46.000","2020-01-07T00:31:46.000","2020-01-07T00:32:46.000","2020-01-07T00:33:46.000","2020-01-07T00:34:46.000","2020-01-07T00:35:46.000","2020-01-07T00:36:46.000","2020-01-07T00:37:46.000","2020-01-07T00:38:46.000","2020-01-07T00:39:46.000","2020-01-07T00:43:35.000","2020-01-07T00:44:35.000","2020-01-07T00:45:35.000","2020-01-07T00:46:35.000","2020-01-07T00:47:35.000","2020-01-07T00:48:35.000","2020-01-07T00:49:35.000","2020-01-07T00:50:35.000","2020-01-07T00:51:35.000","2020-01-07T00:52:35.000","2020-01-07T00:53:35.000"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false],"skew":1.5789473684210527,"lastTimestamp":null}]}},"e261":{"id":"e261","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_file_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e262":{"id":"e262","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_http_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e263":{"id":"e263","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_websocket_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e264":{"id":"e264","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_socket_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e265":{"id":"e265","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_amqp_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e266":{"id":"e266","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_kafka_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e267":{"id":"e267","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_kinesis_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e268":{"id":"e268","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_mqtt_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e269":{"id":"e269","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_listener_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true}},"e1530":{"id":"e1530","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/split.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Location","newCols":"2","on":"auto ->","custom":"","auto":"Comma-Separated Values (CSV)"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":true,"unique":[],"min":null,"max":null,"partitionKeyCandidate":false,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false],"skew":0.02564102564102564,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["AssetTracker"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["Bellevue, WA 98006","None"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Location","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["[\"-122.163548\",\"47.579219\" ]","[\"-122.164642\",\"47.577634\" ]","[\"-122.167615\",\"47.576397\" ]","[\"-122.171253\",\"47.573705\" ]"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":"2","autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Time","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["11/22/2019 20:25:48","11/22/2019 20:25:50","11/22/2019 20:25:51","11/22/2019 20:25:52","11/22/2019 20:28:55","11/22/2019 20:28:56","11/22/2019 20:28:57","11/22/2019 20:28:58","12/10/2019 00:18:26","12/10/2019 00:18:27","12/10/2019 00:18:28","12/10/2019 00:18:29","12/10/2019 17:45:32","12/10/2019 17:45:33","12/10/2019 17:45:34","12/10/2019 17:45:35","12/10/2019 19:04:56","12/10/2019 19:04:57","12/10/2019 19:04:58","12/10/2019 19:04:59"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":"yyyy/MM/dd","jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,2],"latch":[false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_1","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"tmoassets","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_1","sqlErrorMsg":"DDL validation error near line 1, column 37: Reference to unknown stream \"tmoassets\"","sqlLogIndex":6}},"e2464":{"id":"e2464","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/split.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"deviceId","newCols":"2","on":"comma","custom":"","auto":"Comma-Separated Values (CSV)"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":true,"unique":["2019-12-16T12:34:32.717","2019-12-16T12:34:33.717","2019-12-16T12:34:34.717","2019-12-16T12:34:35.718","2019-12-16T12:34:36.719"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false],"skew":0.25,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["AssetTracker"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["Bellevue, WA 98006","None"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Location","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["[\"-122.163548\",\"47.579219\" ]","[\"-122.164642\",\"47.577634\" ]","[\"-122.171253\",\"47.573705\" ]"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":"2","autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Time","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["12/10/2019 00:18:26","12/10/2019 00:18:27","12/10/2019 19:04:57","12/10/2019 19:04:58"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":"yyyy/MM/dd","jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,2],"latch":[false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_1","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"tmoassets","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_1","sqlErrorMsg":"DDL validation error near line 1, column 37: Reference to unknown stream \"tmoassets\"","sqlLogIndex":6}},"e2931":{"id":"e2931","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/split.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"deviceId","newCols":"2","on":"comma","custom":"","auto":"Comma-Separated Values (CSV)"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":true,"unique":["2019-12-16T12:35:05.476","2019-12-16T12:35:06.478"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false],"skew":1,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["AssetTracker"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["Bellevue, WA 98006"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,3],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Location","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["[\"-122.163548\",\"47.579219\" ]","[\"-122.171253\",\"47.573705\" ]"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":"2","autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Time","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["12/10/2019 19:04:57","12/10/2019 19:04:58"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":"yyyy/MM/dd","jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,2],"latch":[false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_1","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"tmoassets","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_1"}},"e3202":{"id":"e3202","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/split.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"deviceId","newCols":"2","on":"comma","custom":"","auto":"Comma-Separated Values (CSV)"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":true,"unique":["2019-12-16T12:35:25.767","2019-12-16T12:35:26.769","2019-12-16T12:35:27.769"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false],"skew":0.5,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["AssetTracker"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["Bellevue, WA 98006"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,3],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Location","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["[\"-122.163548\",\"47.579219\" ]","[\"-122.171253\",\"47.573705\" ]"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":"2","autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Time","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["12/10/2019 00:18:27","12/10/2019 19:04:57","12/10/2019 19:04:58"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":"yyyy/MM/dd","jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,2],"latch":[false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_1","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"tmoassets","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_1"}},"e3563":{"id":"e3563","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/split.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Location","newCols":"2","on":"comma","custom":"","auto":"Comma-Separated Values (CSV)"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Location","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_1","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"tmoassets","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_1","sqlErrorMsg":"0 rows affected","sqlLogIndex":12}},"e4773":{"id":"e4773","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/rename.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Location_1","to":"Longitude"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"rowtimePromotion":false,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Location_1","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Location_2","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_2","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_1","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_2","sqlErrorMsg":"0 rows affected","sqlLogIndex":15}},"e6272":{"id":"e6272","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/extract.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"resultColumn":"substring","column":"Longitude","start":"2","length":"","ifNotFit":"truncate"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":true,"unique":[],"min":null,"max":null,"partitionKeyCandidate":false,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false],"skew":0,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["AssetTracker"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["Bellevue, WA 98006","None"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["[\"-122.163548\"","[\"-122.164642\"","[\"-122.167615\"","[\"-122.171253\""],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Location_2","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["\"47.573705\" ]","\"47.576397\" ]","\"47.577634\" ]","\"47.579219\" ]"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,2],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["11/22/2019 20:25:48","11/22/2019 20:25:50","11/22/2019 20:25:51","11/22/2019 20:25:52","11/22/2019 20:28:55","11/22/2019 20:28:56","11/22/2019 20:28:57","11/22/2019 20:28:58","12/10/2019 00:18:26","12/10/2019 00:18:27","12/10/2019 00:18:28","12/10/2019 00:18:29","12/10/2019 17:45:32","12/10/2019 17:45:33","12/10/2019 17:45:34","12/10/2019 17:45:35","12/10/2019 19:04:56","12/10/2019 19:04:57","12/10/2019 19:04:58","12/10/2019 19:04:59"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":"yyyy/MM/dd","jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,2],"latch":[false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"resultColumn\",\"column\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_3","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_2","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_3","sqlErrorMsg":"From line 1, column 88 to line 1, column 129: Table 'StreamLab_Output_tmo.pipeline_1_step_3' not found","sqlLogIndex":9}},"e8165":{"id":"e8165","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/calculate.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"Longitude","expr":"substring(\"Longitude\" from 3)"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":true,"unique":[],"min":null,"max":null,"partitionKeyCandidate":false,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false],"skew":0,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["AssetTracker"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["Bellevue, WA 98006","None"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["[\"-122.163548\"","[\"-122.164642\"","[\"-122.167615\"","[\"-122.171253\""],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Location_2","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["\"47.573705\" ]","\"47.576397\" ]","\"47.577634\" ]","\"47.579219\" ]"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,2],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["11/22/2019 20:25:48","11/22/2019 20:25:50","11/22/2019 20:25:51","11/22/2019 20:25:52","11/22/2019 20:28:55","11/22/2019 20:28:56","11/22/2019 20:28:57","11/22/2019 20:28:58","12/10/2019 00:18:26","12/10/2019 00:18:27","12/10/2019 00:18:28","12/10/2019 00:18:29","12/10/2019 17:45:32","12/10/2019 17:45:33","12/10/2019 17:45:34","12/10/2019 17:45:35","12/10/2019 19:04:56","12/10/2019 19:04:57","12/10/2019 19:04:58","12/10/2019 19:04:59"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":"yyyy/MM/dd","jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,2],"latch":[false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null}],"frozen_params":"[]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_3","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_2","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_3","sqlErrorMsg":"DDL validation error near line 1, column 37: Reference to unknown stream \"tmoassets\"","sqlLogIndex":10}},"e10806":{"id":"e10806","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/rename.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Location_2","to":"Latitude"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"rowtimePromotion":false,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Location_2","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_3","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_2","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_3","sqlErrorMsg":"0 rows affected","sqlLogIndex":18}},"e11467":{"id":"e11467","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/calculate.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"Latitude","expr":"trim(\"Latitude\", ']')"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":true,"unique":["2019-12-16T12:41:50.432","2019-12-16T12:41:51.433","2019-12-16T12:41:52.433","2019-12-16T12:41:53.434","2019-12-16T12:41:54.435","2019-12-16T12:41:55.435","2019-12-16T12:41:56.436","2019-12-16T12:41:57.436","2019-12-16T12:41:58.437","2019-12-16T12:41:59.437","2019-12-16T12:42:00.437","2019-12-16T12:42:01.438","2019-12-16T12:42:02.440","2019-12-16T12:42:03.441","2019-12-16T12:42:04.442","2019-12-16T12:42:05.442","2019-12-16T12:42:06.443","2019-12-16T12:42:07.422","2019-12-16T12:42:08.422","2019-12-16T12:42:09.423","2019-12-16T12:42:10.423"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false],"skew":0.05,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["AssetTracker"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["Bellevue, WA 98006","None"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["[\"-122.163548\"","[\"-122.164642\"","[\"-122.167615\"","[\"-122.171253\""],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["\"47.573705\" ]","\"47.576397\" ]","\"47.577634\" ]","\"47.579219\" ]"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,2],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["11/22/2019 20:25:50","11/22/2019 20:25:51","11/22/2019 20:28:56","11/22/2019 20:28:57","12/10/2019 00:18:26","12/10/2019 00:18:27","12/10/2019 00:18:28","12/10/2019 00:18:29","12/10/2019 17:45:32","12/10/2019 17:45:33","12/10/2019 17:45:34","12/10/2019 17:45:35","12/10/2019 19:04:57","12/10/2019 19:04:58","12/10/2019 19:04:59"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":"yyyy/MM/dd","jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,2],"latch":[false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null}],"frozen_params":"[]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_4","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_3","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_4","sqlErrorMsg":"From line 1, column 88 to line 1, column 129: Table 'StreamLab_Output_tmo.pipeline_1_step_4' not found","sqlLogIndex":11}},"e11820":{"id":"e11820","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/calculate.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"Latitude","expr":"trim(trailing ']' from \"Latitude\")"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}],"frozen_params":"[]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_4","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_3","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_4","sqlErrorMsg":"0 rows affected","sqlLogIndex":21}},"e12745":{"id":"e12745","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/calculate.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"Longitude","expr":"trim(leading '[' from \"Longitude\")"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}],"frozen_params":"[]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_5","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_4","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_5","sqlErrorMsg":"0 rows affected","sqlLogIndex":24}},"e13890":{"id":"e13890","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/calculate.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"Longitude,Latitude","expr":"trim(both '\"' from @)"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}],"frozen_params":"[]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_6","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_5","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_6","sqlErrorMsg":"0 rows affected","sqlLogIndex":2}},"e15255":{"id":"e15255","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/calculate.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"Longitude,Latitude","expr":"trim(@)"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}],"frozen_params":"[]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_6","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_5","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_6","sqlErrorMsg":"0 rows affected","sqlLogIndex":27}},"e15784":{"id":"e15784","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/calculate.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"Longitude,Latitude","expr":"trim(both '\"' from @)"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}],"frozen_params":"[]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_7","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_6","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_7","sqlErrorMsg":"0 rows affected","sqlLogIndex":30}},"e17331":{"id":"e17331","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/castBulk.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"Longitude,Latitude","to":"DOUBLE,DOUBLE"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":5,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"columns\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_8","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_7","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_8","sqlErrorMsg":"0 rows affected","sqlLogIndex":33}},"e19034":{"id":"e19034","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseTimestamp.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","conversion":"format expression","format":"yyyy/MM/dd","promote":false},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":true,"unique":[],"min":null,"max":null,"partitionKeyCandidate":false,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false],"skew":0.02564102564102564,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["AssetTracker"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["Bellevue, WA 98006","None"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":[47.573705,47.576397,47.577634,47.579219],"min":47.573705,"max":47.579219,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,true,true,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":5,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":[47.573705,47.576397,47.577634,47.579219],"min":47.573705,"max":47.579219,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,true,true,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["11/22/2019 20:25:48","11/22/2019 20:25:50","11/22/2019 20:25:51","11/22/2019 20:25:52","11/22/2019 20:28:55","11/22/2019 20:28:56","11/22/2019 20:28:57","11/22/2019 20:28:58","12/10/2019 00:18:26","12/10/2019 00:18:27","12/10/2019 00:18:28","12/10/2019 00:18:29","12/10/2019 17:45:32","12/10/2019 17:45:33","12/10/2019 17:45:34","12/10/2019 17:45:35","12/10/2019 19:04:56","12/10/2019 19:04:57","12/10/2019 19:04:58","12/10/2019 19:04:59"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":"yyyy/MM/dd","jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,2],"latch":[false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\",\"promote\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_9","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_8","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_9","sqlErrorMsg":"DDL validation error near line 1, column 37: Reference to unknown stream \"tmoassets\"","sqlLogIndex":22}},"e19808":{"id":"e19808","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseTimestamp.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","conversion":"format expression","format":"MM/DD/yyyy' 'HH:mm:ss","promote":false},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":5,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\",\"promote\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_9","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_8","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_9","sqlErrorMsg":"DDL validation error near line 1, column 37: Reference to unknown stream \"tmoassets\"","sqlLogIndex":21}},"e19850":{"id":"e19850","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/rename.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Longitude","to":"Latitude"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"rowtimePromotion":false,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":5,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_10","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_9","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_10","sqlErrorMsg":"DDL validation error near line 1, column 37: Reference to unknown stream \"tmoassets\"","sqlLogIndex":24}},"e19851":{"id":"e19851","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/rename.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Longitude","to":"Latitude"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"rowtimePromotion":false,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":5,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_11","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_10","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_11","sqlErrorMsg":"Cannot replace view \"pipeline_1_out\" because it is currently in use by a statement","sqlLogIndex":25}},"e19888":{"id":"e19888","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/useNull.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Longitude","nullIndicator":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":4,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":5,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_12","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_11","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_12","sqlErrorMsg":"From line 3, column 10 to line 3, column 52: Table 'StreamLab_Output_tmo.pipeline_1_step_11' not found","sqlLogIndex":27}},"e19889":{"id":"e19889","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/useNull.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Longitude","nullIndicator":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":4,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":5,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_13","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_12","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_13","sqlErrorMsg":"From line 3, column 10 to line 3, column 52: Table 'StreamLab_Output_tmo.pipeline_1_step_12' not found","sqlLogIndex":30}},"e19890":{"id":"e19890","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/useNull.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Longitude","nullIndicator":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":4,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":5,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_14","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_13","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_14","sqlErrorMsg":"From line 1, column 88 to line 1, column 130: Table 'StreamLab_Output_tmo.pipeline_1_step_14' not found","sqlLogIndex":30}},"e19891":{"id":"e19891","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/useNull.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Longitude","nullIndicator":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":4,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null},{"name":"Time","index":5,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":true,"hasNulls":false,"hasData":false,"unique":[],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_15","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_14","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_15","sqlErrorMsg":"From line 1, column 88 to line 1, column 130: Table 'StreamLab_Output_tmo.pipeline_1_step_15' not found","sqlLogIndex":34}},"e21863":{"id":"e21863","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/newColumn.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"ltime","expression":"char_length(\"Time\")"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":true,"unique":[],"min":null,"max":null,"partitionKeyCandidate":false,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false],"skew":0.02564102564102564,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["AssetTracker"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["Bellevue, WA 98006","None"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":[47.573705,47.576397,47.577634,47.579219],"min":47.573705,"max":47.579219,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,true,true,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":5,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":[47.573705,47.576397,47.577634,47.579219],"min":47.573705,"max":47.579219,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,true,true,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["11/22/2019 20:25:48","11/22/2019 20:25:50","11/22/2019 20:25:51","11/22/2019 20:25:52","11/22/2019 20:28:55","11/22/2019 20:28:56","11/22/2019 20:28:57","11/22/2019 20:28:58","12/10/2019 00:18:26","12/10/2019 00:18:27","12/10/2019 00:18:28","12/10/2019 00:18:29","12/10/2019 17:45:32","12/10/2019 17:45:33","12/10/2019 17:45:34","12/10/2019 17:45:35","12/10/2019 19:04:56","12/10/2019 19:04:57","12/10/2019 19:04:58","12/10/2019 19:04:59"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":"yyyy/MM/dd","jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,2],"latch":[false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_9","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_8","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_9","sqlErrorMsg":"DDL validation error near line 1, column 37: Reference to unknown stream \"tmoassets\"","sqlLogIndex":22}},"e22985":{"id":"e22985","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseTimestamp.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","conversion":"format expression","format":"MM/dd/yyyy HH:mm:ss","promote":false},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"frozen_state":true,"frozen_store_state":[{"name":"ROWTIME","index":1,"type":"TIMESTAMP","precision":0,"scale":0,"nullable":false,"hasNulls":false,"hasData":true,"unique":["2019-12-16T13:02:49.225"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,0],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false],"skew":null,"lastTimestamp":null},{"name":"deviceId","index":2,"type":"VARCHAR","precision":16,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["AssetTracker"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"violationPoint","index":3,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["Bellevue, WA 98006"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,3],"latch":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Longitude","index":4,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":[47.579219],"min":47.579219,"max":47.579219,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,true,true,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,true,true,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Latitude","index":5,"type":"DOUBLE","precision":15,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":[47.579219],"min":47.579219,"max":47.579219,"partitionKeyCandidate":true,"timestampFormat":null,"jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,-1],"latch":[false,true,true,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,true,true,false,false,false],"skew":null,"lastTimestamp":null},{"name":"Time","index":6,"type":"VARCHAR","precision":32,"scale":0,"nullable":true,"hasNulls":false,"hasData":true,"unique":["12/10/2019 19:04:57"],"min":null,"max":null,"partitionKeyCandidate":true,"timestampFormat":"yyyy/MM/dd","jsonParse":null,"jsonTypes":null,"autoSplitColumns":[0,0,0,0,0,0,0,0,2],"latch":[false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false],"skew":null,"lastTimestamp":null}],"frozen_params":"[\"column\",\"promote\"]","stream":"STREAM","dashSchema":"StreamLab_Output_tmo","dashObject":"dashboard_pipeline_1_step_9","sqlError":false,"inputSchema":"StreamLab_Output_tmo","inputObject":"pipeline_1_step_8","outputSchema":"StreamLab_Output_tmo","outputObject":"pipeline_1_step_9","sqlErrorMsg":"0 rows affected","sqlLogIndex":21}},"e25607":{"id":"e25607","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/addCount.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"runningCount"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e25608":{"id":"e25608","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/castBulk.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"Longitude,Latitude","to":"DOUBLE,DOUBLE"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e25609":{"id":"e25609","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/drop.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"Time"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e25610":{"id":"e25610","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/drop.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"columns":"deviceId"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e25613":{"id":"e25613","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/filter.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"mode":"Accept rows where","$$clause$$":"0","showConj$_$clause$$0":true,"showThen$_$clause$$0":true,"showVal2$_$clause$$0":true,"conj$_$clause$$0":"","col$_$clause$$0":"","op$_$clause$$0":"is equal to","val$_$clause$$0":"0","val2$_$clause$$0":"0","then$_$clause$$0":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e25615":{"id":"e25615","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/rename.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","to":"Latitude"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"rowtimePromotion":false}},"e25616":{"id":"e25616","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/rename.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"deviceId","to":"hostname"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"rowtimePromotion":false}},"e25617":{"id":"e25617","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/rename.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Longitude","to":"lon"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"rowtimePromotion":false}},"e25618":{"id":"e25618","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/rename.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Latitude","to":"lat"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"rowtimePromotion":false}},"e25619":{"id":"e25619","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/rename.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Latitude","to":"lon"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true,"rowtimePromotion":false}},"e25620":{"id":"e25620","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/throttle.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"throttler":"on","rps":"project standard","customRps":"1.0"},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e25621":{"id":"e25621","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseTimestamp.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"deviceId","conversion":"format expression","format":"MM/DD/yyyy HH:mm:ss","promote":false},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e25622":{"id":"e25622","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/useNull.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","nullIndicator":""},"locals":{"dont_render":false,"memberships":"Basic","docsDismissed":true}},"e25623":{"id":"e25623","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseCDR.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","parser":"SONUS-COMMON","delim":",","escape":"\\","quote":"\""},"locals":{"dont_render":false,"memberships":"Parsers","docsDismissed":true}},"e25625":{"id":"e25625","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/w3c.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","logFormat":"COMMON"},"locals":{"dont_render":false,"memberships":"Parsers","docsDismissed":true}},"e25626":{"id":"e25626","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/regex.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","parser":"FULL","regex":"(.*)"},"locals":{"dont_render":false,"memberships":"Parsers","docsDismissed":true}},"e25627":{"id":"e25627","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseTimestamp.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"Time","conversion":"format expression","format":"yyyy-MM-DD HH:mm:ss","promote":false},"locals":{"dont_render":false,"memberships":"Parsers","docsDismissed":true}},"e25630":{"id":"e25630","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/sortColumns.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"sortby":"column name","direction":"forward"},"locals":{"dont_render":false,"memberships":"Pivot","docsDismissed":true}},"e25632":{"id":"e25632","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/runningAverage.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"mode":"sliding","len$_$window":1,"unit$_$window":"minute","column":"","operation":"AVERAGE","k1":"2.0","k2":"3.0","outputColumn":"avg","remaining":"drop"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e25638":{"id":"e25638","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/join.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"leftwindowtype":"none","len$_$lefttimestart":1,"unit$_$lefttimestart":"minute","len$_$lefttimeend":0,"unit$_$lefttimeend":"minute","leftrowstart":1,"leftrowend":0,"joinmode":"stream","jointype":"inner join","rightwindowtype":"none","len$_$righttimestart":1,"unit$_$righttimestart":"minute","len$_$righttimeend":0,"unit$_$righttimeend":"minute","rightrowstart":1,"rightrowend":0,"tableName":null,"$$joins$$":"0","col$_$joins$$0":"","col2$_$joins$$0":"","cache":0,"prefetch":false,"fuzzy":false},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true,"secondarySourceStreamParams":"[\"tableName\"]","streamStreamJoin":true}},"e25639":{"id":"e25639","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/timesort.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"","len$_$window":1,"unit$_$window":"minute"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true,"rowtimePromotion":false}},"e25640":{"id":"e25640","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/newColumn.sql","parent":"e151","subs":[],"chosen":[],"dashFullPath":null,"params":{"column":"ltime","expression":"char_length(\"Time\")"},"locals":{"dont_render":false,"memberships":"Analytics","docsDismissed":true}},"e25693":{"id":"e25693","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_file_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25694":{"id":"e25694","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_http_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25695":{"id":"e25695","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_websocket_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25696":{"id":"e25696","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_socket_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25697":{"id":"e25697","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_amqp_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25698":{"id":"e25698","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_kafka_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25699":{"id":"e25699","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_kinesis_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25700":{"id":"e25700","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_mqtt_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25701":{"id":"e25701","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_listener_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25702":{"id":"e25702","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_file_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25703":{"id":"e25703","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_http_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25704":{"id":"e25704","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_websocket_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25705":{"id":"e25705","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_socket_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25706":{"id":"e25706","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_amqp_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25707":{"id":"e25707","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_kafka_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25708":{"id":"e25708","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_kinesis_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25709":{"id":"e25709","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_mqtt_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}},"e25710":{"id":"e25710","toptable":"closed","bottomtable":"closed","editpage":"panel","editPanelPage":"params","panelType":"params","whenCloned":null,"entityFullPath":"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_listener_reader.sql","parent":"e141","subs":[],"chosen":[],"dashFullPath":null,"params":{"addin_ecda_kinesis_name":"kinesis_1","addin_ecda_kinesis_app_name":"sqlstream_1","addin_ecda_selector":"file","addin_ecda_remote":false,"addin_throttle_enabled":true,"addin_ecda_file_directory":"/home/sqlstream/tmoproc/data","addin_ecda_filename_pattern":".*.json","addin_renderMode":"directStream","addin_ecda_file_renderMode":"Start from the beginning of the file and tail it","addin_ecda_file_provenance":"do not include","addin_ecda_http_url":"http://","addin_ecda_http_poll":1000,"addin_ecda_http_headers":"[]","addin_ecda_websocket_url":"ws://","addin_ecda_websocket_headers":"[]","addin_ecda_socket_remote_hostport":"|","addin_ecda_socket_is_ipv6":false,"addin_ecda_socket_is_tcp":false,"addin_ecda_amqp_reader_url":"amqp://","addin_ecda_amqp_reader_destination":"","addin_ecda_amqp_reader_partition_expression":"","addin_ecda_amqp_reader_protocol":"AMQP 1.0","addin_ecda_amqp_reader_ack_mode":"auto","addin_ecda_amqp_reader_queue_size":2,"addin_ecda_amqp_provenance":"do not include","addin_ecda_kafka_api":"KafkaConsumer API (>= v0.10.2)","addin_ecda_kafka_topic":"","addin_ecda_kafka_hostport_list":"[[\"localhost\",\"9092\"]]","addin_ecda_kafka_duplication_mode":"Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream","addin_ecda_kafka_max_duplicates":2,"addin_ecda_kafka_KC_starting_time":"EARLIEST","addin_ecda_kafka_KC_specific_time":"","addin_ecda_kafka_SC_starting_time":"EARLIEST","addin_ecda_kafka_reader_advanced":"Hide advanced options","addin_ecda_kafka_starting_offset":"-1","addin_ecda_kafka_partition":"","addin_ecda_kafka_buffer_size":1048576,"addin_ecda_kafka_fetch_size":1000000,"addin_ecda_kafka_max_poll":100,"addin_ecda_kafka_index_topic_name":"","addin_ecda_kafka_client_id_reader":"","addin_ecda_kafka_metrics_per_partition":false,"addin_ecda_kafka_partition_offset_query":"","addin_ecda_kafka_options_query":"","addin_ecda_kafka_isolation_level":false,"addin_ecda_kafka_provenance":"do not include","addin_ecda_kafka_provcols_newapi":"[[\"KAFKA_TOPIC\",\"VARCHAR\",256],[\"KAFKA_PARTITION\",\"INTEGER\",null],[\"KAFKA_OFFSET\",\"BIGINT\",null],[\"KAFKA_TIMESTAMP\",\"TIMESTAMP\",null],[\"KAFKA_KEY\",\"VARBINARY\",256],[\"KAFKA_HEADERS\",\"VARCHAR\",512]]","addin_ecda_kafka_provcols_oldapi":"[[\"OFFSET\",\"BIGINT\",null],[\"PARTITION\",\"INTEGER\",null]]","addin_ecda_kinesis_stream_name":"","addin_ecda_kinesis_region":"us-west-1","addin_ecda_kinesis_profile_path":"","addin_ecda_kinesis_profile_name":"default","addin_ecda_kinesis_fanout":1,"addin_ecda_initial_position":"earliest","addin_ecda_kinesis_max_records":-1,"addin_ecda_kinesis_socket_timeout":-1,"addin_ecda_kinesis_idle_time":-1,"addin_ecda_kinesis_provenance":"do not include","addin_ecda_mqtt_reader_url":"tcp://localhost:1883","addin_ecda_mqtt_reader_topic":"","addin_ecda_mqtt_reader_qos":"0 - at most once","addin_ecda_mqtt_reader_clientid":"","addin_ecda_mqtt_reader_username":"","addin_ecda_mqtt_reader_password":"","addin_ecda_mqtt_reader_keepalive":60,"addin_ecda_mqtt_reader_connectiontimeout":30,"addin_ecda_mqtt_provenance":"do not include","addin_ecda_listener_url":"ws://","addin_ecda_listener_auth":""},"locals":{"dont_render":false,"memberships":"","docsDismissed":true,"cloned":true}}},"entities":{"/sqlstream/StreamLab_App_2_0_0/sql-templates/catalog.sql":{"value":"-- StreamApp start\n\n<%= rose.panel('include') %>\n<%\n    rose.localSet('docsDismissed', false)\n    rose.local('subview', 'counts')\n    rose.local('layout', 'toplevel')\n\n    rose.include('private.sql')\n    rose.include('ecda.sql')\n\n    rose.include('servers.sql')\n    rose.include('sources.sql')\n    rose.include('sinks.sql')\n    rose.include('guides.sql')\n%>\n\n-- StreamApp end\n","external":true,"binary":false,"title":"StreamLab","public":true,"doc":"##Welcome to StreamLab\nStreamLab is a tool to help you generate streaming SQL and run it in s-Server.  \n\n\n###Using the StreamLab Menu\n\nThe left side of the the menu lets you create and open projects and dashboards, and manage your account and project options:\n\n![](/images/doc/left-menu.png)\n\nThe right side of the menu is enabled once you've opened a project.\n\n![](/images/doc/right-menu.png)\n\nThe Goals button takes you to a dialog where you can view the goals for the current page, or the whole project.\nGoals point out pages in the project that need to be filled in, and the arrows shown in the goals dialog take you\ndirectly to the relevant page. If all of the goals for the project have been satisified, you'll see this goals icon ![](/images/doc/goals-good.png).\nIf there are unmet goals you'll see this icon: ![](/images/doc/goals-bad.png).\n\nThe Script button opens a dialog you can use to view, execute, and export your project's SQL script. If the\nlast execution succeeded the icon will look like this: ![](/images/doc/script-runnable.png), if it failed you'll\nsee this: ![](/images/doc/script-failed.png). If there are warnings or cautions (potentially serious warnings) \nin the script you'll see this icon in yellow or orange (respectively). When the SQL script is being executed in s-Server this icon will\nanimate, you can still view the scripts dialog and watch as the responses come in from each SQL statement.\n\nThe Runtime button opens a dialog you can use to view s-Server's runtime errors. Your SQL script may execute\nwith no errors but may encounter runtime errors as data is streaming through it, these will appear on the runtime\nlog and the icon will switch to ![](/images/doc/runtime-bad.png). Each time you change your project and execute\nthe SQL script the runtime log is cleared and the icon reverts to ![](/images/doc/runtime-good.png).\n\nWhen you make a change on a page the SQL corresponding to that page will be re-submitted to your s-Server.\nYou can use the Scripts dialog to re-execute the entire project's SQL at any time. The SQL will be submitted\neach time you open the project, you can disable this from the project settings dialog (you might want to\ndisable this if you're working on a large project and you know it's already running in s-Server).\n\nThe Documentation button brings up the documentation for the page you're viewing (like this page).\n\nThe Navigate Up button takes you up a level in the project. You are currently at the top level. If you see a left arrow at the far right ![](/images/doc/right-menu-jump.png)\nyou've been jumped to another part or the project that needs to be filled in. Use the left arrow to return to where you were. If the Jump Back arrow is yellow, there's an\nerror on the current page that should be fixed before you jump back. If it's green, the current page is OK and you're ready to return to where you left off.\n\n###StreamLab StreamApps\n\nBegin by copying the StreamLab StreamApp project from the Projects manager, then open your project with the ![](/images/doc/open-btn.png) \nbutton. The current project is saved in the URL, so you can bookmark it to return to your project later. \n\nThe title of the project is shown in the middle of the toolbar. This is also a link you can use to save the project. \nIf the link is blue, the project has been modified. If StreamLab gets stuck, often this link will still work, and\nyou can save your project and refresh the browser to get going again.\n\nIf you want a quick demo, you can start with the StreamLab Bus Demo StreamApp. This app reads data on\nbus positions in the Sydney metropolitan area that's played back by the scripts in s-Server/demo/data/buses\nunder your s-Server installation (the s-Server installer should also have installed a desktop icon that starts the bus data flowing).\n\n###Basic Usage\n![](/images/doc/bento-box.png)\n\nYou'll normally start by creating a *Source*, then creating a *Guide* using that source as the input. If you're\ngoing to output data to a file, message bus, or table, define your destinations in the *Sink* section. If any\nof your sources or sinks is a table in an external database, start by defining and testing the connection in\nthe *External Connections* section.\n\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"streamlab","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/private.sql":{"value":"<%= rose.panel('include') %>\n<%\n    rose.localSet('docsDismissed', true)\n\n    rose.include('prototypes/rename.sql')\n    rose.include('prototypes/stream.sql')\n    rose.include('prototypes/table.sql')\n    rose.include('prototypes/view.sql')\n    rose.include('prototypes/sqlobj.sql')\n\n    rose.include('prototypes/sink_stream.sql')\n    rose.include('prototypes/sink_new_stream.sql')\n    rose.include('prototypes/route_sink_stream.sql')\n    rose.include('prototypes/guide.sql')\n\n    rose.include('prototypes/dash_default.json')\n%>\n","external":true,"binary":false,"title":"_Prototypes","public":false,"doc":"","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/rename.sql":{"value":"<%= rose.panel('params') %>\n<%\n    //--  Rename Prototype, essentially the same as the rename guide operation with the suggestion code removed\n\n    rose.localSet('docsDismissed', true);\n\n\n    rose.makeKnownAs('step_rename');   //-- Make this node well-known so the table header editing code can use it\n\n    rose.param({id: 'column', order: 1, title: \"column\", defval:\"\", type: \"choice\",\n        valuesFunc: function() { return rose.columnList()},\n        values: [\"table not available\"]  });\n\n    rose.param({id: 'to', order: 2, title: \"to\", type: \"string\", defval: \"\"});\n\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Rename column {{column}} to {{to}}\");\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.renameColumns([{col:rose.param('column').trim(), to:rose.param('to').trim()}]) %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Rename","public":true,"doc":"Change a column's name","destination":"sqlstream","external_doc":false,"dont_render":true,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/stream.sql":{"value":"-- SQLstream stream\n<%= rose.panel('params_source') %>\n\n<% \n    rose.localSet('docsDismissed', true)\n    rose.localSet('dontThrottle', true)\n    rose.localSet('runBtnState', 'untried')\n    rose.localSet('showAutoFillBtn', true)\n    rose.makeKnownAs('proto_stream')\n\n    rose.param({id: \"endpoint\", title: \"Schema.Stream\", type: \"stream\", defval: ''})\n\n    rose.param({\n        id: 'columns',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"List of columns in stream\",\n        readOnly: true,\n        columns: ['column', 'type'],\n        columnTypes: [null, '=sqltype='],\n        columnDefs: ['', 'VARCHAR(1024)'],\n        tableHeight: 400,\n        valueIsRequired: true\n    })\n\n    rose.whenExited(function(e) { rose.sourceExit(e) })\n\n    rose.goal(function(e) {\n        var rbs = rose.local('runBtnState')\n        return rbs === 'success'\n    }, \"Sample rows from this source and get a successful result\")\n%>\n","external":true,"binary":false,"title":"Stream","public":true,"doc":"# Stream\n\nUse this source to access an existing s-Server stream. You also have the option of creating a new stream, it will be created with one VARCHAR(4096) column named **line** (along with a ROWTIME column).","destination":"sqlstream","external_doc":false,"dont_render":true,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/table.sql":{"value":"<%= rose.panel('params_source') %>\n<%\n    //-- Table endpoint prototype\n    rose.localSet('docsDismissed', true)\n    rose.localSet('dontThrottle', true)\n    rose.localSet('runBtnState', 'untried')\n    rose.localSet('showAutoFillBtn', true)\n    rose.makeKnownAs('proto_table')\n\n    rose.param({id: \"endpoint\", title: \"Schema.Table\", type: \"table\", defval: ''})\n\n    rose.param({\n        id: 'columns',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"List of columns in table\",\n        readOnly: true,\n        columns: ['column', 'type'],\n        columnTypes: [null, '=sqltype='],\n        columnDefs: ['', 'VARCHAR(1024)'],\n        tableHeight: 400,\n        valueIsRequired: true\n    })\n\n    rose.whenExited(function(e) { rose.sourceExit(e) })\n\n    rose.goal(function(e) {\n        var rbs = rose.local('runBtnState')\n        return rbs === 'success'\n    }, \"Sample rows from this source and get a successful result\")\n%>\n","external":true,"binary":false,"title":"Table","public":true,"doc":"Table prototype","destination":"sqlstream","external_doc":false,"dont_render":true,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/view.sql":{"value":"<%= rose.panel('params_source') %>\n<%\n    //-- View endpoint prototype\n    rose.localSet('docsDismissed', true)\n    rose.localSet('dontThrottle', true)\n    rose.localSet('runBtnState', 'untried')\n    rose.localSet('showAutoFillBtn', true)\n    rose.makeKnownAs('proto_view')\n\n    rose.param({id: \"endpoint\", title: \"Schema.Object\", type: \"view\", defval: ''})\n\n    rose.param({\n        id: \"type\",\n        title: \"Type\",\n        tooltip: \"Choice whether this is a view on a stream or a table. If you don't know, guess, and use the Sample button below to test.\",\n        type: \"choice\",\n        values: ['View on a stream', 'View on a table'],\n        defval: 'View on a stream'\n    })\n\n    rose.param({\n        id: 'columns',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"List of columns in view\",\n        readOnly: true,\n        columns: ['column', 'type'],\n        columnTypes: [null, '=sqltype='],\n        columnDefs: ['', 'VARCHAR(1024)'],\n        tableHeight: 400,\n        valueIsRequired: true\n    })\n\n\n    var ep = rose.param('endpoint').split('::')\n    if(ep.length === 3) {\n        if(/stream$/.test(rose.param('type')))\n            rose.paramSet('endpoint', ep[0] + '::' + ep[1] + '::stream')\n        else\n            rose.paramSet('endpoint', ep[0] + '::' + ep[1] + '::table')\n    }\n    \n    rose.whenExited(function(e) { rose.sourceExit(e) })\n\n    rose.goal(function(e) {\n        var rbs = rose.local('runBtnState')\n        return rbs === 'success'\n    }, \"Sample rows from this source and get a successful result\")\n%>\n","external":true,"binary":false,"title":"View","public":true,"doc":"View prototype","destination":"sqlstream","external_doc":false,"dont_render":true,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/sqlobj.sql":{"value":"<%= rose.panel('params') %>\n<%\n    //-- View endpoint prototype\n    rose.localSet('docsDismissed', true);\n\n    rose.makeKnownAs('proto_sqlobj');   \n    rose.param({id: \"endpoint\", title: \"Schema.Object\", type: \"sqlobject\", defval: ''});\n%>\n","external":true,"binary":false,"title":"SQL Object","public":true,"doc":"SQL Object prototype","destination":"sqlstream","external_doc":false,"dont_render":true,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/sink_stream.sql":{"value":"<%= rose.panel('params_destination') %>\n<%\n    //-- DEPRECATED  no longer in use\n    //--  Stream sink Prototype, essentially the same as sinks/stream.sql but we don't get the column\n    //--  list for the guide output dialog, we use the current guide result stream.\n    rose.localSet('docsDismissed', true);\n    rose.localSet('suppressOptimizationIfModified', true);\n    rose.makeKnownAs('sink_stream');\n\n    rose.param({\n        id: \"endpoint\",\n        title: \"Schema.Stream\",\n        tooltip: \"Stream schema and object name.\",\n        type: \"stream\",\n        defval: rose.autoSchemaMarker()+\"::sink_1::stream\",\n    });\n\n    rose.param({\n        id: 'columns',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"List of columns to output\",\n        columns: ['column', 'type'],\n        columnTypes: [null, '=sqltype='],\n        columnDefs: ['', 'VARCHAR(1024)'],\n    });\n\n    //-- If this is true, we're inserting an autogenerated sink into a\n    //-- guide, need to adjust the endpoint.\n    rose.param({\n        id: 'autogen',\n        title: 'Autogen',\n        type: 'boolean',\n        defval: false\n    });\n\n    var ep;\n\n    if(rose.boolParam('autogen')) {\n        ep = rose.guideOutputAsEndpoint();\n    } else {\n        ep = rose.param('endpoint');\n    }\n\n    rose.local('destination_description',\n        'Route to stream ' + rose.substituteSchemaMarker(rose.endp2schema(ep)) + '.' + rose.endp2sqlobj(ep));\n\n    //-- If we have a mapModel, it overrides the columns list\n    var intoList, fromList;\n    var mm = rose.local('mapModel');\n\n    intoList = rose.sinkMap2intoList(mm, 'columns');\n    fromList = rose.sinkMap2fromList(mm, 'columns');\n%>\n\n<%= rose.createSqlObj('STREAM', rose.endp2fqn(ep)) %> (\n    <%= rose.tableParam('columns',\n        function(t) { return '\"' + t[0] + '\" '  + t[1] },\n        function(t) { return !(/ROWTIME/.test(t[0])) }).join(', ') %>\n);\n\n<% rose.defineConnector(function(rose) { var __p = '';  %>\n-- Define the pump\n<%\n    /* Supports three insModes: merge and insert require a mapModel, all just pumps all columns */\n    var opts = {typeHint:'sink'}\n    // when template is called in a loop, pumps must have unique names\n    var pumpIndex = rose.local('pumpIndex')\n    if (pumpIndex) opts.suffix = pumpIndex\n    var pump = rose.endp2pump(rose.param('endpoint'), opts)\n    var external_table = rose.endp2fqn(rose.param('endpoint'))\n    var insMode = rose.local('insMode')\n\n%>\n<% switch(insMode) { case 'Merge':  %>\n\n<%= rose.createPump(pump, external_table, {merge: true}) %> AS \"sink\"\n    USING (SELECT <%= rose.local('stream') %> <%= rose.sinkMap2fromListWithCasts(rose.local('mapModel')) %> FROM <%= rose.guideInput() %>) AS \"input\"\n    ON <%= rose.sinkMap2onExpr(rose.local('mapModel')) %>\nWHEN MATCHED THEN\n    UPDATE SET <%= rose.sinkMap2update(rose.local('mapModel')) %>\nWHEN NOT MATCHED THEN\n    INSERT <%= rose.sinkMap2intoList(rose.local('mapModel')) %>\n    VALUES (<%= rose.sinkMap2fromList(rose.local('mapModel')) %>);\n\n<% break; case 'Insert': %>\n\n<%= rose.createPump(pump, external_table, {merge: false}) %>\n    <%= rose.sinkMap2intoList(rose.local('mapModel') ,'columns') %>\nSELECT <%= rose.local('stream') %> <%= rose.sinkMap2fromListWithCasts(rose.local('mapModel'), 'columns') %> <% /* if this causes problems, use sinkMap2fromList instead */ %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% break; default: %>\n\n<%= rose.createPump(pump, external_table, {merge: false}) %>\nSELECT <%= rose.local('stream') %> *\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% break; } %>\n\n<%      return __p; }); %>\n","external":true,"binary":false,"title":"Stream","public":true,"doc":"# Stream\n\n\nUse this source to access an existing s-Server stream. You can enter the schema and stream names or get them from s-Server using the ![](/images/doc/sl_catalog_trigger.png) buttons. For more information on getting data into a stream in s-Server, please see the s-Server Enterprise Integration Guide.\n\n![](/images/doc/sl_add_stream_source_sel_schema_zoom20.png)\n\n## Testing the Source\n\n![](/images/doc/sl_sample_btn.png)\n\nPress this button to attempt to read 5 rows from the source you've defined. If you don't get any data, check the *Last Run* button to see if there were any errors reported when the SQL was run. If not, check the schema and stream names to see if you can identify the cause. If you're still stumped as to why data isn't flowing, check the trace log (/var/log/sqlstream/Trace.log.0) on your s-Server host for runtime errors.\n\n\n","destination":"sqlstream","external_doc":false,"dont_render":true,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/sink_new_stream.sql":{"value":"-- create a new stream as a sink\n<%= rose.panel('params_destination') %>\n<%\n    rose.localSet('docsDismissed', true);\n    rose.localSet('allowAutogenerate', true);\n    rose.localSet('autoSinksMenuDefault', true);\n\trose.localSet('autoSinkRemoveRuntime', true);\n\trose.localSet('autoSinksMenuTitle', 'Internal stream');\n    rose.localSet('runBtnState', 'untried');\n    rose.localSet('showRunBtn', true);\n    rose.localSet('outputHasConnector', true);\n    rose.localSet('trackExecution', true);\n    rose.transientSet('trackExecutionStatus', 'none');\n\n    rose.param({\n        id: \"endpoint\",\n        title: \"Schema.Stream\",\n        tooltip: \"Stream schema and object name.\",\n        type: \"stream\",\n        defval: rose.autoSchemaMarker()+\"::sink_1::stream\",\n    });\n\n    rose.param({\n        id: 'columns',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"List of columns to output\",\n        columns: ['column', 'type'],\n        columnTypes: [null, '=sqltype='],\n        columnDefs: ['', 'VARCHAR(1024)'],\n        valueIsRequired: true\n    });\n\n    rose.whenCloned(function(e) { rose.makeEndpointUniqueWithin(e, 'destinations', 'sink') });\n\n    rose.local('destination_description', 'Route to stream ' + rose.endp2nice_fqn(rose.param(\"endpoint\")));\n\n    var ep = rose.param('endpoint');\n%>\n\n<%= rose.createSqlObj('SCHEMA', rose.sqlIdentifier(rose.endp2schema(rose.param(\"endpoint\"))), {wasCoR: true}) %>;\n\n<%= rose.createSqlObj('STREAM', rose.endp2fqn(rose.param(\"endpoint\"))) %>(\n    <%= rose.tableParam('columns', function(t) { return '\"' + t[0] + '\" ' + t[1] }).join(',\\n    ') %>\n);\n\n<% rose.defineConnector(function(rose) { var __p = '';  %>\n-- Define the pump\n<%\n    /* Supports three insModes: merge and insert require a mapModel, all just pumps all columns */\n    var opts = {typeHint:'sink'}\n    // when template is called in a loop, pumps must have unique names\n    var pumpIndex = rose.local('pumpIndex')\n    if (pumpIndex) opts.suffix = pumpIndex\n    var pump = rose.endp2pump(rose.param('endpoint'), opts)\n    var external_table = rose.endp2fqn(rose.param('endpoint'))\n    var insMode = rose.local('insMode')\n\n%>\n<% switch(insMode) { case 'Merge':  %>\n\n<%= rose.createPump(pump, external_table, {merge: true}) %> AS \"sink\"\n    USING (SELECT <%= rose.local('stream') %> <%= rose.sinkMap2fromListWithCasts(rose.local('mapModel')) %> FROM <%= rose.guideInput() %>) AS \"input\"\n    ON <%= rose.sinkMap2onExpr(rose.local('mapModel')) %>\nWHEN MATCHED THEN\n    UPDATE SET <%= rose.sinkMap2update(rose.local('mapModel')) %>\nWHEN NOT MATCHED THEN\n    INSERT <%= rose.sinkMap2intoList(rose.local('mapModel')) %>\n    VALUES (<%= rose.sinkMap2fromList(rose.local('mapModel')) %>);\n\n<% break; case 'Insert': %>\n\n<%= rose.createPump(pump, external_table, {merge: false}) %>\n    <%= rose.sinkMap2intoList(rose.local('mapModel') ,'columns') %>\nSELECT <%= rose.local('stream') %> <%= rose.sinkMap2fromListWithCasts(rose.local('mapModel'), 'columns') %> <% /* if this causes problems, use sinkMap2fromList instead */ %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% break; default: %>\n\n<%= rose.createPump(pump, external_table, {merge: false}) %>\nSELECT <%= rose.local('stream') %> *\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% break; } %>\n\n<%      return __p; }); %>\n\n<% rose.makeKnownAs('sink_new_stream'); %>\n","external":true,"binary":false,"title":"New Stream","public":true,"doc":"# Stream Sink from Pipeline\n\nThis form specifies a new stream internal to s-Server that serves as a sink, \ngenerated as the output of a pipeline. The values in this form should\nprobably not be changed, since these values were automatically generated\nvia the *Route to Sink* operation in a pipeline guide.\n\nYou can test the configuration using the **Execute** button, which issues SQL commands\nto s-Server to create the sink. The **Last run** button shows the log from the last execution.\n\n","destination":"sqlstream","external_doc":false,"dont_render":true,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/route_sink_stream.sql":{"value":"<%= rose.panel('params_destination') %>\n<%\n    //--  Route to Existing Sink Prototype,\n    //--  list for the guide output dialog, we use the current guide result stream.\n    rose.localSet('docsDismissed', true)\n    rose.localSet('suppressOptimizationIfModified', true)\n    rose.localSet('suppressOptimizationIfModified_sinkId', true)\n    rose.localSet('trackExecution', true)\n    rose.transientSet('trackExecutionStatus', 'none')\n    rose.makeKnownAs('route_sink_stream')\n\n    rose.param({\n        id: \"endpoint\",\n        title: \"Schema.Stream\",\n        tooltip: \"Stream schema and object name.\",\n        type: \"stream\",\n        defval: rose.autoSchemaMarker()+\"::sink_1::stream\",\n    })\n\n    rose.param({\n        id: 'columns',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"List of columns to output\",\n        columns: ['column', 'type'],\n        columnTypes: [null, '=sqltype='],\n        columnDefs: ['', 'VARCHAR(1024)'],\n    })\n\n    /* Not visible at all */\n    rose.param({\n        id: 'sinkId',\n        type: 'string',\n        defval: '',\n        visibleWhen: function() { return false }\n    })\n\n    rose.param({\n        id: 'useSinkDesc',\n        type: 'boolean',\n        defval: false,\n        visibleWhen: function() { return false }\n    })\n    \n    var ep = rose.param('endpoint')\n    if(rose.param('useSinkDesc')) {\n        rose.local('destination_description', RoseLib.nodeGet(rose.param('sinkId'), 'locals.destination_description'))\n    } else {\n        var st = (rose.endp2type(ep) === 'TABLE') ? 'table' : 'stream'\n        rose.local('destination_description',\n            'Route to ' + st + ' ' + rose.substituteSchemaMarker(rose.endp2schema(ep)) + '.' + rose.endp2sqlobj(ep))\n    }\n\n    //-- If we have a mapModel, it overrides the columns list\n    var intoList, fromList\n    var mm = rose.local('mapModel')\n\n    intoList = rose.sinkMap2intoList(mm, 'columns')\n    fromList = rose.sinkMap2fromList(mm, 'columns')\n%>\n\n<%= rose.sinkRender(rose.param('sinkId'), rose.guidePumpCount()) %>\n\n<%\n/*\n * Advance, providing the input as the next output because the\n * output of the pump may have a different shape.\n */\nrose.guideAdvance(rose.guideInput(true))\n%>\n","external":true,"binary":false,"title":"Stream","public":true,"doc":"# Stream\n\n\nUse this source to access an existing s-Server stream. You can enter the schema and stream names or get them from s-Server using the ![](/images/doc/sl_catalog_trigger.png) buttons. For more information on getting data into a stream in s-Server, please see the s-Server Enterprise Integration Guide.\n\n![](/images/doc/sl_add_stream_source_sel_schema_zoom20.png)\n\n## Testing the Source\n\n![](/images/doc/sl_sample_btn.png)\n\nPress this button to attempt to read 5 rows from the source you've defined. If you don't get any data, check the *Last Run* button to see if there were any errors reported when the SQL was run. If not, check the schema and stream names to see if you can identify the cause. If you're still stumped as to why data isn't flowing, check the trace log (/var/log/sqlstream/Trace.log.0) on your s-Server host for runtime errors.\n\n\n","destination":"sqlstream","external_doc":false,"dont_render":true,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/guide.sql":{"value":"<%= rose.panel('guide') %>\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    rose.localSet('docsDismissed', true);\n    rose.makeKnownAs('guide');  \n\n    if(false) {      // new tab organization\n    rose.include(['Ingest'],'guides/operations/drop.sql')\n    rose.include(['Ingest'],'guides/operations/filter.sql')\n    rose.include(['Ingest'],'guides/operations/rename.sql')\n    rose.include(['Ingest'],'guides/operations/renameBulk.sql')\n    rose.include(['Ingest'],'guides/operations/sortColumns.sql')\n    rose.include(['Ingest'],'guides/operations/throttle.sql')\n    rose.include(['Ingest'],'guides/operations/parseTimestamp.sql')\n    rose.include(['Ingest'],'guides/operations/timesort.sql')\n\n    rose.include(['Discover'],'guides/operations/parseCDR.sql')\n    rose.include(['Discover'],'guides/operations/parseJSON.sql')\n    //rose.include(['Discover'],'guides/operations/parseXML.sql')\n    rose.include(['Discover'],'guides/operations/w3c.sql')\n    rose.include(['Discover'],'guides/operations/regex.sql')\n    rose.include(['Discover'],'guides/operations/split.sql')\n\n    rose.include(['Wrangle'],'guides/operations/calculate.sql')\n    rose.include(['Wrangle'],'guides/operations/cast.sql')\n    rose.include(['Wrangle'],'guides/operations/castBulk.sql')\n    rose.include(['Wrangle'],'guides/operations/categorize.sql')\n    rose.include(['Wrangle'],'guides/operations/duplicateColumns.sql')\n    rose.include(['Wrangle'],'guides/operations/extract.sql')\n    rose.include(['Wrangle'],'guides/operations/filter.sql')\n    rose.include(['Wrangle'],'guides/operations/merge.sql')\n    rose.include(['Wrangle'],'guides/operations/newColumn.sql')\n    rose.include(['Wrangle'],'guides/operations/useNull.sql')\n\n    rose.include(['Enrich'],'guides/operations/addCount.sql')\n    rose.include(['Enrich'],'guides/operations/callUDX.sql')\n    rose.include(['Enrich'],'guides/operations/distinct.sql')\n    rose.include(['Enrich'],'guides/operations/filter.sql')\n    rose.include(['Enrich'],'guides/operations/geoIP.sql')\n    rose.include(['Enrich'],'guides/operations/group_rank.sql')\n    rose.include(['Enrich'],'guides/operations/join.sql')\n    rose.include(['Enrich'],'guides/operations/replaceNull.sql')\n    rose.include(['Enrich'],'guides/operations/parseTimestamp.sql')\n    rose.include(['Enrich'],'guides/operations/injectSQLview.sql')\n    rose.include(['Enrich'],'guides/operations/injectSQL.sql')\n     \n    rose.include(['Analyze'],'guides/operations/aggregate.sql')\n    rose.include(['Analyze'],'guides/operations/runningAverage.sql')\n    rose.include(['Analyze'],'guides/operations/categorize.sql')\n    rose.include(['Analyze'],'guides/operations/filter.sql')\n    rose.include(['Analyze'],'guides/operations/fold.sql')\n    rose.include(['Analyze'],'guides/operations/timesort.sql')\n    rose.include(['Analyze'],'guides/operations/unfold.sql')\n\n    rose.include(['Visualize'],'guides/operations/dash-multipanel.sql')\n    rose.include(['Visualize'],'guides/operations/dash-chartjs-bars.sql')\n    rose.include(['Visualize'],'guides/operations/dash-bars-over-time.sql')\n    rose.include(['Visualize'],'guides/operations/dash-bars-over-key.sql')\n    rose.include(['Visualize'],'guides/operations/dash-bars-and-lines.sql')\n    rose.include(['Visualize'],'guides/operations/dash-bollinger.sql')\n    rose.include(['Visualize'],'guides/operations/dash-map-and-table.sql')\n    rose.include(['Visualize'],'guides/operations/dash-timeseries.sql')\n} else {        // old tab organization\n    rose.include(['Basic'],'guides/operations/addCount.sql')\n    rose.include(['Basic'],'guides/operations/cast.sql')\n    rose.include(['Basic'],'guides/operations/castBulk.sql')\n    rose.include(['Basic'],'guides/operations/drop.sql')\n    rose.include(['Basic'],'guides/operations/duplicateColumns.sql')\n    rose.include(['Basic'],'guides/operations/extract.sql')\n    rose.include(['Basic'],'guides/operations/filter.sql')\n    rose.include(['Basic'],'guides/operations/merge.sql')\n    rose.include(['Basic'],'guides/operations/rename.sql')\n    rose.include(['Basic'],'guides/operations/renameBulk.sql')\n    rose.include(['Basic'],'guides/operations/replaceNull.sql')\n    rose.include(['Basic'],'guides/operations/split.sql')\n    rose.include(['Basic'],'guides/operations/throttle.sql')\n    rose.include(['Basic'],'guides/operations/parseTimestamp.sql')\n    rose.include(['Basic'],'guides/operations/useNull.sql')\n     \n    //rose.include(['Parsers'],'guides/operations/parseXML.sql')\n    rose.include(['Parsers'],'guides/operations/parseCDR.sql')\n    rose.include(['Parsers'],'guides/operations/parseJSON.sql')\n    rose.include(['Parsers'],'guides/operations/w3c.sql')\n    rose.include(['Parsers'],'guides/operations/regex.sql')\n    rose.include(['Parsers'],'guides/operations/split.sql')\n    rose.include(['Parsers'],'guides/operations/parseTimestamp.sql')\n\n    rose.include(['Pivot'],'guides/operations/unfold.sql')\n    rose.include(['Pivot'],'guides/operations/fold.sql')\n    rose.include(['Pivot'],'guides/operations/sortColumns.sql')\n\n    rose.include(['Analytics'],'guides/operations/aggregate.sql')\n    rose.include(['Analytics'],'guides/operations/runningAverage.sql')\n    rose.include(['Analytics'],'guides/operations/calculate.sql')\n    rose.include(['Analytics'],'guides/operations/categorize.sql')\n    rose.include(['Analytics'],'guides/operations/distinct.sql')\n    rose.include(['Analytics'],'guides/operations/geoIP.sql')\n    rose.include(['Analytics'],'guides/operations/group_rank.sql')\n    rose.include(['Analytics'],'guides/operations/join.sql')\n    rose.include(['Analytics'],'guides/operations/timesort.sql')\n    rose.include(['Analytics'],'guides/operations/newColumn.sql')\n\n    rose.include(['Advanced'],'guides/operations/callUDX.sql')\n    rose.include(['Advanced'],'guides/operations/injectSQLview.sql')\n    rose.include(['Advanced'],'guides/operations/injectSQL.sql')\n\n    rose.include(['Dashboards'],'guides/operations/dash-multipanel.sql')\n    rose.include(['Dashboards'],'guides/operations/dash-chartjs-bars.sql')\n    rose.include(['Dashboards'],'guides/operations/dash-bars-over-time.sql')\n    rose.include(['Dashboards'],'guides/operations/dash-bars-over-key.sql')\n    rose.include(['Dashboards'],'guides/operations/dash-bars-and-lines.sql')\n    rose.include(['Dashboards'],'guides/operations/dash-bollinger.sql')\n    rose.include(['Dashboards'],'guides/operations/dash-map-and-table.sql')\n    rose.include(['Dashboards'],'guides/operations/dash-timeseries.sql')\n}\n\n\n/*\n    rose.include(['Old'],'guides/operations/bucketize.sql')\n    rose.include(['Old'],'guides/operations/old-sliding-window.sql')\n    rose.include(['Old'],'guides/operations/partition_window.sql')\n    rose.include(['Test'],'guides/operations/testFocus1.sql')\n    rose.include(['Test'],'guides/operations/testFocus2.sql')\n    rose.include(['Test'],'guides/operations/testFocus3.sql')\n    rose.include(['Test'],'guides/operations/testFocus.sql')\n*/\n\n%>\n","external":true,"binary":false,"title":"Pipeline Guide","public":true,"doc":"##StreamLab Guide\nThe guide helps you assemble a SQL script, shown in the list in the lower left corner, that transforms your source stream or table.\nEach step in the script has a ![](/images/doc/dash-btn.png) button to open a dashboard to view the stream or table at that point.\n\n###Commands\nCommands are grouped by functionality, and you can switch between command sets by clicking the Commands button at in the top left hand corner of the guide. When you select a command tab, the suggestions using that command are brought to the top of the suggestion list.\nThe topmost suggestion matches the parameters you've edited for the command, and will be shown with a dark border. \nBelow that will be other suggestions using the selected command, based on what StreamLab has observed about the data.\nIf the topmost suggestion doesn't have a dark border, it's because the current parameter settings don't generate a valid transformation.\n\n![](/images/doc/sl_guide_commands_zoom25.png)\n\n###Suggestions\nSuggestions appear in the Suggestions list in the middle left. Suggestions change \ndepending on your data source, the parameters you've set for the command, and your selection in the Output view. \nNote that you can edit the parameters for a suggestion before you add it to the script, by selecting the underlined values.\n\n![](/images/doc/sl_guide_suggestions_zoom25.png)\n\n###Scripts\nAs you add steps to the script, they are implemented in SQL and executed in s-Server, with changes visible in the Output view. \nYou can remove items from the script by clicking the - button. At each step of the script you can view a dashboard\nusing the ![](/images/doc/dash-btn.png) button. For dashboard commands, the button is show in red to indicate that a custom dashboard has been generated.\n\n![](/images/doc/sl_guide_script_zoom25.png)\n\n###Output View\nThe main output view table not only shows your data streaming live, it can also be used to enter parameters for the current command.\nColumns can be selected by clicking on the header cells, shift-click to select a range of columns and control-click to toggle a column. \nYou can select a row by clicking on any cell, and double-click allows you to select text. Note that a streaming view will pause when a row is selected, to clear the selection use the button in the upper left corner of the table.\n\n![](/images/doc/clear-btn.png)\n\nYou can see what StreamLab has learned about your data by hovering the mouse over the header for a column.\n\n\n###Last Run Status\n\nThe Last Run indicator shows the result of the last attempt to run the SQL script in s-Server. Click on it to bring up the log, from there you can inspect any errors and re-run the script. \nIf you're getting errors about views being in use, make sure you don't have any dashboards open in other browser tabs. Then save your project and refresh this page to make sure StreamLab closes all its views.\n\n![](/images/doc/sl_guide_view_log_zoom25.png)\n\n\n\n\n\n\n\n\n\n\n\n\n","destination":"sqlstream","external_doc":false,"dont_render":true,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/addCount.sql":{"value":"-- Add Count Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n\n    rose.param({id: 'column', title: \"new column\", type: \"string\", defval: \"runningCount\", width: 160, freeze: true});\n\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Add column named {{column}} containing a running count\");\n\n\n    rose.subscribe('suggestions', function(context) {\n        rose.suggest(context, 1);     //-- suggest the current settings, but at a low priority\n    });\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %>\n        COUNT(*) OVER (ROWS UNBOUNDED PRECEDING) AS <%= rose.colParam('column') %>,\n        <%= rose.allColumnsBut('ROWTIME') %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance(); %>\n","external":true,"binary":false,"title":"Add Count","public":true,"doc":"## Add Count\nThe Add Count command simply adds a column that updates a numerical count of columns. It updates every time a new row comes in.\n\nFor more information on how COUNT works, <a href=\"https://docs.sqlstream.com/sql-reference-guide/built-in-functions/count/\" target=\"\\_blank\">see the topic COUNT in the s-Server Streaming SQL Reference Guide</a>.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/cast.sql":{"value":"-- Cast Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n\n    rose.param({id: 'columns', title: \"columns\", type: \"string\", defval: \"\", width: 200, freeze: true});\n\n    rose.param({id: 'type', title: \"type\", type: \"choice\", defval: '', width: 120,\n        values: ['BIGINT', 'BINARY', 'BOOLEAN', 'CHAR', 'DATE', 'DECIMAL', 'DOUBLE', 'INTEGER', 'SMALLINT', 'REAL', 'TIME', 'TIMESTAMP', 'TINYINT', 'VARBINARY', 'VARCHAR'] });\n\n    rose.param({id: 'size', title: \"size\", type: \"integer\", defval: 8, width: 120,\n        visibleWhen: function() { return _.contains(['BINARY', 'CHAR', 'VARCHAR', 'VARBINARY'], rose.param('type')) }\n    });\n\n    rose.param({id: 'scale', title: \"scale\", type: \"integer\", defval: 8, width: 120,\n        visibleWhen: function() { return rose.param('type') ===  'DECIMAL' }\n    });\n\n    rose.param({id: 'precision', title: \"precision\", type: \"integer\", defval: 2, width: 120,\n        visibleWhen: function() { return rose.param('type') ===  'DECIMAL' }\n    });\n\n    rose.focusMap({\n        column: [],\n        columnList: ['columns'],\n        row: [],\n        start: [],\n        end: [],\n        text: []\n    });\n\n\n    rose.summary(function(e) {\n        return e.getPath('params.type') === 'DECIMAL';\n    }, \"Cast {{columns}} as {{type}}({{scale}}, {{precision}})\");\n\n    rose.summary(function(e) {\n        return _.contains(['BINARY', 'CHAR', 'VARCHAR', 'VARBINARY'], e.getPath('params.type'));\n    }, \"Cast {{columns}} as {{type}}({{size}})\");\n\n    rose.summary(function(e) {\n        return true\n    }, \"Cast {{columns}} as {{type}}\");\n\n\n    var process = function() {\n        rose.resultSubstitution = {};\n\n        var cols = rose.param('columns');\n        if(cols)\n            _.each(cols.split(','), function(c) {\n                rose.typeStr = 'CAST(' + rose.sqlInColumn(c) + ' AS ' + rose.param('type');\n\n                if(_.contains(['BINARY', 'CHAR', 'VARCHAR', 'VARBINARY'], rose.param('type')))\n                    rose.typeStr += '(' + rose.param('size') + ')';\n\n                if(rose.param('type') === 'DECIMAL')\n                    rose.typeStr += '(' + rose.param('scale') + ', ' + rose.param('precision') + ')';\n\n                rose.typeStr += ')';\n                rose.resultSubstitution[c] = rose.typeStr + ' AS ' + rose.sqlIdentifier(c);\n            });\n    };\n\n\n    rose.subscribe('column', function(e, col, columns) {\n        e.setPath('params.columns', columns.join(','));\n        process();\n    });\n\n\n    //-- We suggest with priorities in the 40s to make casts more prominent than most\n    rose.subscribe('suggestions', function(context) {\n        var columns = rose.param('columns');\n        var type = rose.param('type');\n        if(rose.validColumnList(columns) && type)\n            rose.suggest(context, 45);     //-- suggest the current settings\n\n        //-- Construct a list of all the columns that have integer metadata but are not integer\n        //-- and suggest casting each.\n        var integers = [];\n        _.each(rose.columnList(), function(col) {\n            var t = rose.metadata(col, 'type');\n\n            if(rose.metadata(col, 'hasData') && rose.metadata(col, 'integer') &&\n                !(/INTEGER/i.test(t) || /SMALLINT/i.test(t) || /BIGINT/i.test(t)) )\n                    integers.push(col);\n        });\n\n        if(integers.length)\n            rose.suggest(context, 40, {columns: integers.join(','), type: 'INTEGER'}, true);\n\n        //-- Construct a list of all the columns that have real metadata but are not real\n        //-- and suggest casting each.\n        var reals = [];\n        _.each(rose.columnList(), function(col) {\n            var t = rose.metadata(col, 'type');\n\n            if(rose.metadata(col, 'hasData') && rose.metadata(col, 'real') &&\n                !(/DECIMAL/i.test(t) || /FLOAT/i.test(t) || /DOUBLE/i.test(t)) )\n                    reals.push(col);\n        });\n\n        if(reals.length)\n            rose.suggest(context, 40, {columns: reals.join(','), type: 'DOUBLE'}, true);\n\n        //-- Construct a list of all the columns that have timestamp metadata but are not timestamps\n        //-- and suggest casting each.\n        /* Removed for now, better handled by parseTimestamp.sql.  Might be a good idea to move that\n         * functionality here at some point.\n        var stamps = [];\n        _.each(rose.columnList(), function(col) {\n            if(rose.metadata(col, 'hasData') && rose.metadata(col, 'timestamp') && !/TIMESTAMP/i.test(rose.metadata(col, 'type')))\n                stamps.push(col);\n        });\n\n        if(stamps.length)\n            rose.suggest(context, 40, {columns: stamps.join(','), type: 'TIMESTAMP'}, true);\n        */\n    });\n\n\n    process();\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(rose.resultSubstitution) %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Cast","public":true,"doc":"## Cast\n\nCAST lets you convert one data type into another. To do so, enter the name of (or select) one or more columns. Then select a new data type for the column(s) and add size or precision/scale specifications.\n\n- *Precision* specifies the maximum number of decimal digits that can be stored in the column, both to the right and to the left of the decimal point. You can specify precision ranging from 1 digit to 18 digits or use the default precision of 18 digits.\n- *Scale* specifies the maximum number of digits that can be stored to the right of the decimal point. Scale must be less than or equal to the precision. You can specify a scale ranging from 0 digits to 18 digits, or use the default scale of 0 digits.\n\nFor more information on CAST, <a href=\"https://docs.sqlstream.com/sql-reference-guide/built-in-functions/cast/\" target=\"\\_blank\">see the topic CAST in the s-Server Streaming SQL Reference Guide</a>.\n\n### Valid Conversions\nUsing CAST with source operands of the types listed in the first column below can create cast target types as listed in the second column, without restriction. Other target types are not supported.\n\n<table style=\"border:1px solid black;\">\n<thead>\n<tr>\n<th style=\"border:1px solid black;\">Source Operand Types</th>\n<th style=\"border:1px solid black;\">Target Operand Types</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"border:1px solid black;\">Any numeric type</td>\n<td style=\"border:1px solid black;\">VARCHAR, CHAR, or any numeric type (See Note A.)</td>\n</tr>\n<tr>\n<td style=\"border:1px solid black;\">DATE</td>\n<td style=\"border:1px solid black;\">DATE, VARCHAR, CHAR, TIMESTAMP</td>\n</tr>\n<tr>\n<td style=\"border:1px solid black;\">TIMESTAMP</td>\n<td style=\"border:1px solid black;\">TIME, VARCHAR, CHAR, TIMESTAMP, DATE</td>\n</tr>\n<tr>\n<td style=\"border:1px solid black;\">BOOLEAN</td>\n<td style=\"border:1px solid black;\">VARCHAR, CHAR, BOOLEAN</td>\n</tr>\n</tbody>\n</table>\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/castBulk.sql":{"value":"--  Bulk Cast Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n\n\n    rose.param({id: 'columns', title: \"column list\", type: \"string\", defval: \"\", width: 200, freeze: true});\n    rose.param({id: 'to', title: \"type list\", type: \"string\", defval: \"\", width: 'end'});\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Cast the columns {{columns}} to the types {{to}}\");\n\n    rose.focusMap({\n        column: [],\n        columnList: ['columns'],\n        row: [],\n        start: [],\n        end: [],\n        text: []\n    });\n\n\n    //-- Parse the parameters, returning either an error message or an object with the params,\n    //-- or false to ignore\n    var parseParams = function() {\n        var cols = rose.param('columns');\n        var to = rose.param('to');\n        var colsValid = rose.validColumnList(cols);\n        if(!colsValid && !to) return false;\n\n        if(!colsValid)\n            return \"Select columns to cast or fill in the 'column' list with column names separated by commas.\";\n\n        if(!to)\n            return \"Fill in the type list with the new SQL types, separated by commas.\";\n\n        cols = cols.split(',');\n        to = to.split(',');\n        if(cols.length != to.length) return \"You've selected \" + cols.length + \" columns but there are \"\n            + to.length + \" types in the type list.\";\n\n        return {colsList: cols, toList: to};\n    };\n\n    rose.subscribe('suggestions', function(context) {\n        var p = parseParams();\n        if(!p) return;      //-- ignore no params entered at all\n\n        if(typeof p === 'string')\n            rose.suggest(context, -100, p);     //-- error message\n        else\n            rose.suggest(context, 1);     //-- suggest the current settings\n    });\n\n    var process = function() {\n        rose.resultSubstitution = {};\n\n        var x = parseParams();\n        if(!x || typeof x === 'string') return;\n\n        var n = x.colsList.length;\n\n        for(var i=0; i < n; i++) {\n            var c = x.colsList[i];\n            var t = x.toList[i];\n            if(!c || !t) continue;\n\n            rose.resultSubstitution[c] = 'CAST(' + rose.sqlInColumn(c) + ' AS ' + t +\n                ') AS ' + rose.sqlIdentifier(c);\n        }\n    };\n\n    process();\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(rose.resultSubstitution) %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Cast List","public":true,"doc":"## Cast List\nYou can use CAST LIST to convert multiple columns' data types at once.\n\n### Valid Conversions\nUsing CAST with source operands of the types listed in the first column below can create cast target types as listed in the second column, without restriction. Other target types are not supported.\n\n<table style=\"border:1px solid black;\">\n<thead>\n<tr>\n<th style=\"border:1px solid black;\">Source Operand Types</th>\n<th style=\"border:1px solid black;\">Target Operand Types</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"border:1px solid black;\">Any numeric type</td>\n<td style=\"border:1px solid black;\">VARCHAR, CHAR, or any numeric type (See Note A.)</td>\n</tr>\n<tr>\n<td style=\"border:1px solid black;\">DATE</td>\n<td style=\"border:1px solid black;\">DATE, VARCHAR, CHAR, TIMESTAMP</td>\n</tr>\n<tr>\n<td style=\"border:1px solid black;\">TIMESTAMP</td>\n<td style=\"border:1px solid black;\">TIME, VARCHAR, CHAR, TIMESTAMP, DATE</td>\n</tr>\n<tr>\n<td style=\"border:1px solid black;\">BOOLEAN</td>\n<td style=\"border:1px solid black;\">VARCHAR, CHAR, BOOLEAN</td>\n</tr>\n</tbody>\n</table>\n\nFor more information on CAST, <a href=\"https://docs.sqlstream.com/sql-reference-guide/built-in-functions/cast/\" target=\"\\_blank\">see the topic CAST in the s-Server Streaming SQL Reference Guide</a>.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/drop.sql":{"value":"-- Drop Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n\n\n    rose.param({id: 'columns', title: \"columns\", type: \"string\", defval: \"\", width: 'end', freeze: true});\n\n    rose.focusMap({\n        column: [],\n        columnList: ['columns'],\n        row: [],\n        start: [],\n        end: [],\n        text: []\n    });\n\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Drop the columns {{columns}}\");\n\n    var process = function() {\n        rose.resultSubstitution = {};\n\n        var cols = rose.param('columns');\n        if(cols)\n            _.each(cols.split(','), function(c) {\n                rose.resultSubstitution[c] = '';\n            });\n    };\n\n    rose.subscribe('column', function(e, col, columns) {\n        e.setPath('params.columns', columns.join(','));\n        process();\n    });\n\n\n    rose.subscribe('suggestions', function(context) {\n        var cols = rose.param('columns');\n\n        if(rose.validColumnList(cols))\n            rose.suggest(context, 11);     //-- suggest the current settings\n\n        //-- Construct a list of all the columns that have no data and suggest dropping them\n        var duds = [];\n        _.each(rose.columnList(), function(col) {\n            if(!rose.metadata(col, 'hasData'))\n                duds.push(col);\n        });\n\n        if(duds.length)\n            rose.suggest(context, 10, {columns: duds.join(',')}, true);\n\n        var savLen = duds.length;\n\n        //-- Now add in those with only 1 unique value\n        _.each(rose.columnList(), function(col) {\n            if(rose.metadata(col, 'unique').length == 1)\n                duds.push(col);\n        });\n\n        if(duds.length > savLen)\n            rose.suggest(context, 9, {columns: duds.join(',')}, true);\n    });\n\n\n    process();\n%>\n\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(rose.resultSubstitution) %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Drop","public":true,"doc":"## Drop\nThe DROP command deletes a column. To use DROP, enter or select one or more columns.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/duplicateColumns.sql":{"value":"-- Duplicate Columns Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n\n    rose.param({id: 'suffix', title: \"suffix\", type: \"string\", defval: \"_new\", width: 200});\n    rose.param({id: 'columns', title: \"column list\", type: \"string\", defval: \"\", width: 'end', freeze: true});\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Duplicate the columns {{columns}}, adding the suffix {{suffix}} to the new column names\");\n\n    rose.focusMap({\n        column: [],\n        columnList: ['columns'],\n        row: [],\n        start: [],\n        end: [],\n        text: []\n    });\n\n    //-- Parse the parameters, returning either an error message or an object with the params,\n    //-- or false to ignore\n    var parseParams = function() {\n        var cols = rose.param('columns');\n        var suffix = rose.param('suffix');\n        var colsValid = rose.validColumnList(cols);\n        if(!colsValid && !suffix) return false;\n\n        if(!colsValid)\n            return \"Select columns to duplicate or fill in the column list with column names separated by commas.\";\n\n        if(!suffix)\n            return \"Fill in the suffix field, this is the text that will be appended to make the new column names.\";\n\n        cols = cols.split(',');\n        return {colsList: cols, suffix: suffix};\n    };\n\n    rose.subscribe('suggestions', function(context) {\n        var p = parseParams();\n        if(!p) return;      //-- ignore no params entered at all\n\n        if(typeof p === 'string')\n            rose.suggest(context, -100, p);     //-- error message\n        else\n            rose.suggest(context, 1);     //-- suggest the current settings\n    });\n\n    var suffix = rose.param('suffix').trim();\n    var newcols = _.map(rose.param('columns').split(','), function(c) { return rose.sqlInColumn(c) + ' AS ' + rose.sqlIdentifier(c+suffix) }).join(', ');\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= newcols %>, *\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Duplicate","public":true,"doc":"## Duplicate\nYou can duplicate a column and its contents using the Duplicate command. For example, the Buses demonstration app uses the Duplicate command to make a copy of a column with buses' speeds, toward creating a column that categorizes columns by fast, medium, and slow.\n\nTo use the Duplicate command:\n\n1. Select one or more columns in the Output view and click the List of Columns button at the bottom of the Column List field. You can also enter the column names in the Column List field.\n\n2. Enter a suffix for the new column(s), such as \"\\_cat\".\n\n    A Suggestion appears that reads something along the lines of \"Duplicate the column speed, adding the suffix \\_cat to the new column name.\"\n\n3. Click the + icon to add the command to the Guide script.\n\n4. The duplicated column(s) appear(s) in the Output view.\n\n![](/images/doc/sl_duplicate.png)\n\n### Resulting SQL\n\nYou need not view or understand the SQL generated by a command in order to use them. However, some users may find it useful or interesting to view the SQL generated.  \n\nLike other commands, the Duplicate command generates a new view on the pipeline guide's stream:\n\n\n```\nCREATE OR REPLACE VIEW \"StreamLab_Output_Buses\".\"pipeline_1_step_1\" AS\n\nSELECT STREAM \"speed\" AS \"speed_cat\", *\n\nFROM \"StreamLab_Output_Buses\".\"buses\" AS \"input\";\n\nCREATE OR REPLACE VIEW \"StreamLab_Output_Buses\".\"pipeline_1_out\" AS SELECT  STREAM  * FROM \"StreamLab_Output_Buses\".\"pipeline_1_step_1\";\n\nALTER STREAM \"StreamLab_Output_Buses\".\"buses\" RESUME;\n```\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/extract.sql":{"value":"-- Extract Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true)\n\n    rose.param({id: 'resultColumn', title: \"new column\", type: \"string\", defval:\"substring\", width: 160, freeze: true})\n    rose.param({id: 'column', title: \"column\", defval:\"\", type: \"choice\", width: 160, freeze: true,\n        valuesFunc: () => rose.charColumnList(),\n        values: [\"table not available\"]  })\n    rose.param({id: 'start', title: \"start\", type: \"integer\", defval: 1, width: 120})\n    rose.param({id: 'length', title: \"length\", type: \"integer\", defval: 0, from: 1, width: 120})\n    rose.param({id: 'ifNotFit', title: \"when too small\", type: \"choice\", width: 160,\n        values: [\"truncate\", \"use an empty string\", \"use NULL\"], defval:\"truncate\"})\n\n\n\n\n    rose.summary(function(e) {\n        return e.getPath('params.length') != '0'\n    }, \"Extract text from {{column}} into {{resultColumn}}, starting at {{start}} for {{length}} characters. If there aren't enough chars {{ifNotFit}}.\")\n\n    rose.summary(function(e) {\n        return true\n    }, \"Extract text from {{column}} into {{resultColumn}}, starting at {{start}} to the end (length = {{length}}). If there aren't enough chars {{ifNotFit}}.\")\n\n\n    rose.subscribe('column', function(e, col, columns) {\n        var c = columns[0]\n        if(c && _.contains(rose.charColumnList(),c)) e.setPath('params.column', c)\n    })\n\n    rose.subscribe('selection', function(e, row, col, start, end, text) {\n        if(_.isFinite(start) && _.isFinite(end) && end > start) {\n            e.setPath('params.column', col)\n            e.setPath('params.start', start)\n            e.setPath('params.length', end-start)\n        }\n    })\n\n\n    rose.subscribe('suggestions', function(context) {\n        //-- If there are no char columns, complain\n        const cols = rose.columnList(false, 'char')\n        if(cols.length == 0)\n            return rose.suggest(context, -10, \"'Extract' works only on text data, and there are no text columns. Try using 'Cast' to convert a column to a character type.\")\n\n        //-- We must have a column, otherwise we're not going to suggest anything\n        const col = rose.param('column')\n        if(!col) return\n\n        //-- It must be a string (note: this shouldn't happen any more, menu now limited to char columns)\n        const colType = rose.metadata(col, 'type')\n        if(!/char/i.test(colType))\n            return rose.suggest(context, -10, \"Choose a column that contains character data.\")\n\n        //-- start + length - 1 may not exceed size of strings in column\n        const s = parseInt(rose.param('start')) \n        const len = parseInt(rose.param('length'))\n        const extent = s + len - 1\n        const size = rose.metadata(col, 'precision')\n        if(extent > size)\n            return rose.suggest(context, -10, \n                `The start and length values you've entered exceed the size of the text in the ${col} column (${size} characters).`)\n\n        rose.suggest(context, 1)     //-- suggest the current settings at a low priority\n    })\n\n    var s = parseInt(rose.param('start')) \n    var len = parseInt(rose.param('length'))\n\n    rose.substringExpression = 'SUBSTRING(\"' + rose.param('column') + '\",' + s\n    if (rose.param('length') != '0') {\n        rose.substringExpression += ',' + rose.param('length')\n    }\n    rose.substringExpression += ')'\n    if (rose.param('ifNotFit') != 'truncate') {\n        rose.substringExpression = 'CASE WHEN CHAR_LENGTH(\"' + rose.param('column') + '\")>=' +\n            (s + len - 1) + ' THEN ' +\n            rose.substringExpression + ' ELSE ' + (rose.param('ifNotFit') === 'use NULL' ? 'NULL' : \"''\") + ' END'\n    }\n\n    rose.resultSubstitution = {}\n    rose.resultSubstitution[rose.param('column')] = '\"' + rose.param('column') + '\",' + rose.substringExpression + ' AS \"' + rose.param('resultColumn') + '\"'\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(rose.resultSubstitution) %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Extract","public":true,"doc":"## Extract\nThe Extract command lets you pull content from a column, such as the first four characters, to create a new column. As new data streams in, this new column will be updated. (Data from the first column is not deleted.)\n\nNote that the first character has the index 1 (not 0, as it does in C-based programming languages).\n\nFor more information on extract, see <a href = \"https://docs.sqlstream.com/sql-reference-guide/built-in-functions/extract/\" target=\"_blank\">Extract in the s-Server Streaming SQL Reference Guide</a>.\n\nTo do so:\n\n1. Enter a name for the new column.\n2. Select a column from the drop-down menu.\n3. Either\n    - Select the part of the cell's string that you'd like to extract.\n    - Enter a starting point in the Start field and a string length in the Length field.\n4. From the drop-down menu, select an option for handling strings that are too small. You can choose to truncate, use an empty string, or use NULL.\n5. Click the + icon to add the command to the Guide script.\n6. The results of the script appear in the Output View window.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/filter.sql":{"value":"-- Filter Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true)\n\n    //-- Parameters\n\n    var modes = ['Accept rows where', 'Reject rows where']\n\n    rose.param({id: 'mode', title: \"filter\", type: 'choice', defval: modes[0], values: modes, width: 160})\n    rose.param({id: 'clause', title: 'condition', repeats: true, type: 'clause',\n        hasConj: true, hasColumn: true, hasThen: false, insertComma: false,\n        defval: \"\", columnsFunc: () => rose.columnList(), width: 466})\n\n    // -- Summaries\n\n    rose.summary(e => true, \"{{mode}} {{clause}}\")\n\n\n    rose.subscribe('suggestions', function(context) {\n        var errs = rose.checkClauses('clause')\n\n        if(errs)\n            rose.suggest(context, -100, \"Check conditions: \" + errs)\n        else\n            rose.suggest(context, 1)     //-- suggest the current settings\n    })\n\n    //-- Construct the where clause\n\n    var rejecting = /Reject/.test(rose.param('mode'))\n    var wc = []\n    if(rejecting) wc.push('NOT (')\n\n    rose.repeatParam('clause', function(p, index) {\n        var clause = rose.compoundParam(p)\n        if(index > 0) {\n            wc.push(' ')\n            wc.push(clause.conj.toUpperCase())\n            wc.push(' ')\n        }\n\n        wc.push(rose.sqlInColumn(clause.col))\n        wc.push(' ')\n        var op = rose.clauseOp(clause.op)\n        wc.push(op)\n        wc.push(' ')\n\n        switch(op) {\n            case 'BETWEEN':\n                wc.push(rose.literal(clause.val))\n                wc.push(' AND ')\n                wc.push(rose.literal(clause.val2))\n                break\n\n            case 'IN':  //-- expecting a comma-separated list\n            case 'NOT IN':\n                var sp = _.map(clause.val.split(/\\s*,\\s*/), function(x) { return rose.literal(x) })\n                wc.push('(' + sp.join(', ') + ')')\n                break\n\n            case 'IS NULL':\n            case 'IS NOT NULL':\n            case 'IS TRUE':\n            case 'IS FALSE':\n                break\n\n            default:\n                wc.push(rose.literal(clause.val))\n                break\n        }\n    })\n\n    if(rejecting) wc.push(')')\n\n    rose.whereClause = wc.join('')\n%>\n\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> *\n    FROM <%= rose.guideInput() %> AS \"input\"\n    WHERE <%= rose.whereClause %>;\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Filter","public":true,"doc":"## Filter\nFilter the rows in the stream by column values. For the 'like' operators, the value should be a SQL pattern, using _ to match a single character and % to match multiple characters. For the 'in' operators, the value should be a comma-separated list.\n\nFilter lets you filter stream rows by column values using a number of conditions. You can accept or reject rows.\n\n![](/images/doc/sl_filter.png)\n\n| Condition | Value |\n| --- | --- |\n| is equal to | Numeric value |\n| is greater than | Numeric value |\n| is less than or equal to | Numeric value |\n| is like | SQL pattern, using _ to match a single character and % to match multiple characters |\n| is in | Comma separated list |\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/merge.sql":{"value":"-- Merge Columns Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true)\n\n    rose.param({id: 'resultColumn', title: \"new column\", type: \"string\", defval: \"newColumn\", width: 160, freeze: true})\n\n    rose.param({id: 'column', title: \"first column\", defval:\"\", type: \"choice\", width: 160, freeze: true,\n        valuesFunc: () => rose.charColumnList(),\n        values: [\"table not available\"]  })\n\n    rose.param({id: 'glue', title: \"glue\", type: \"string\", defval: '', width: 120})\n\n    rose.param({id: 'column2', title: \"second column\", defval:\"\", type: \"choice\", width: 160, freeze: true,\n        valuesFunc: () => rose.charColumnList(),\n        values: [\"table not available\"]  })\n\n\n\n    rose.summary(e => e.getPath('params.glue') && e.getPath('params.glue').length > 0\n        , \"Create column {{resultColumn}} by merging {{column}} with {{column2}} using glue {{glue}}\")\n\n    rose.summary(e => true\n        , \"Create column {{resultColumn}} by merging {{column}} with {{column2}} (glue is {{glue}})\")\n\n\n    rose.subscribe('suggestions', function(context) {\n        //-- If there are no char columns, complain\n        var cols = rose.columnList(false, 'char')\n        var allCols = rose.columnList()\n        var errs = []\n\n        if (cols.length == 0)\n            errs.push(\"'Merge' works only on text data, and there are no text columns. Try using 'Cast' to convert a column to a character type.\")\n        else {\n            var col = rose.param('column')\n            var col2 = rose.param('column2')\n\n            if(!col)\n                errs.push(\"first column is not a valid column name.\")\n\n            if(!col2)\n                errs.push(\"second column is not a valid column name.\")\n        }\n        \n        var newColumnName = rose.param('resultColumn').trim()\n\n        if(!newColumnName)\n            errs.push(\"Enter a result column name.\");\n        else {\n            if (allCols.contains(newColumnName))\n                errs.push(\"'\"+newColumnName+\"' is already in use as a column name. Give a different name for the new column.\")\n        }\n\n\n        if (errs.length === 0)\n            rose.suggest(context, 1)\n        else\n            rose.suggest(context,  -100, errs.join(' '))\n    })\n\n\n    var glueExpr =  \"\"\n    if (rose.param('glue') && rose.param('glue').length > 0)\n        glueExpr = \"|| \" + rose.sqlLiteral(rose.param('glue'))\n%>\n\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.sqlInColumn(rose.param('column')) %> <%= glueExpr %> || <%= rose.sqlInColumn(rose.param('column2')) %> AS <%= rose.sqlIdentifier(rose.param('resultColumn').trim()) %>, *\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Merge Columns","public":true,"doc":"## Merge Columns\nYou can also merge two columns together. When you do so, you can connect them with a character. For example, you might merge columns with city and state into a city state pair.\n\n![](/images/doc/sl_commands_merge.png)\n\nFor more information on Merge, see <a href=\"https://docs.sqlstream.com/sql-reference-guide/merge-statement/\" target=\"\\_blank\">Merge in the s-Server Streaming SQL Reference Guide</a>.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/rename.sql":{"value":"--  Rename Operation\n<%= rose.panel('params') %>\n<%\n    //-- Note that a stripped-down copy of this must be in the _prototypes\n    //-- folder in order for renaming to be available everywhere.\n\n    rose.localSet('docsDismissed', true);\n\n\n    rose.param({id: 'column', title: \"column\", defval:\"\", type: \"choice\", width: 120, freeze: true,\n        valuesFunc: function() { return rose.columnList()},\n        values: [\"table not available\"]  });\n\n    rose.param({id: 'to', title: \"to\", type: \"string\", defval: \"\", width: 200});\n\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Rename column {{column}} to {{to}}\");\n\n\n    rose.subscribe('column', function(e, col, columns) {\n        var c = columns[0];\n        if(c) e.setPath('params.column', c);\n    });\n\n\n    rose.subscribe('suggestions', function(context) {\n        var col = rose.param('column');\n        var to = rose.param('to');\n        if(col && to)\n            rose.suggest(context, 22);     //-- suggest the current settings\n\n        //-- Construct a list of all the columns that have some recognizable stuff\n        //-- and suggest renaming each, unless there's already a column by that name.\n        //--\n        var columns = rose.columnList();\n        var suggest = function(c, latch, columnName) {\n            if(!rose.metadata(c, 'hasData')) return;\n            if(!rose.metadata(c, latch)) return;\n            if(_.contains(columns, columnName)) return;\n\n            rose.suggest(context, 20 + (c == col ? 1 : 0),   //-- bump up priority if selected column\n                {column: c, to: columnName},\n                true\n            );\n        };\n\n        _.each(columns, function(col) {\n            suggest(col, 'bearing', 'bearing');\n            suggest(col, 'countryCode', 'country');\n            suggest(col, 'email', 'email');\n            suggest(col, 'hostname', 'hostname');\n            suggest(col, 'ip', 'ip');\n            suggest(col, 'latitude', 'lat');\n            suggest(col, 'longitude', 'lon');\n            suggest(col, 'phone', 'phone');\n            suggest(col, 'stateCode', 'state');\n            suggest(col, 'url', 'url');\n            suggest(col, 'zipCode', 'zipcode');\n        });\n    });\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.renameColumns([{col:rose.param('column').trim(), to:rose.param('to').trim()}]) %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Rename","public":true,"doc":"## Rename\nThe Basic:Rename command lets you rename a column. To do so, select a column from the Column popup menu and enter the column's new name in the To field:\n\n![](/images/doc/sl_rename_col.png)\n\nOnce you do so, a suggestion appears in the Suggestion list. Click the + button to add the suggestion to the Script list.\n\nThe renamed columns appears in the Output view:\n\n![](/images/doc/sl_renamed_column.png)\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/renameBulk.sql":{"value":"--  Bulk Rename Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n\n\n    rose.param({id: 'columns', title: \"column list\", type: \"string\", defval: \"\", width: 200, freeze: true});\n    rose.param({id: 'to', title: \"to list\", type: \"string\", defval: \"\", width: 'end'});\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Rename columns {{columns}} to {{to}}\");\n\n    rose.focusMap({\n        column: [],\n        columnList: ['columns'],\n        row: [],\n        start: [],\n        end: [],\n        text: []\n    });\n\n\n    //-- Parse the parameters, returning either an error message or an object with the params,\n    //-- or false to ignore\n    var parseParams = function() {\n        var cols = rose.param('columns');\n        var to = rose.param('to');\n        var colsValid = rose.validColumnList(cols);\n        if(!colsValid && !to) return false;\n\n        if(!colsValid)\n            return \"Select columns to rename or fill in the 'column' list with column names separated by commas.\";\n\n        if(!to)\n            return \"Fill in the 'to' list with the new column names, separated by commas.\";\n\n        cols = cols.split(',');\n        to = to.split(',');\n        if(cols.length != to.length) return \"You've selected \" + cols.length + \" columns but there are \"\n            + to.length + \" names in the 'to' list.\";\n\n        return {colsList: cols, toList: to};\n    };\n\n    rose.subscribe('suggestions', function(context) {\n        var p = parseParams();\n        if(!p) return;      //-- ignore no params entered at all\n\n        if(typeof p === 'string')\n            rose.suggest(context, -100, p);     //-- error message\n        else\n            rose.suggest(context, 1);     //-- suggest the current settings\n    });\n\n    var process = function() {\n        var x = parseParams();\n        if(!x || typeof x === 'string') return;\n\n        var n = x.colsList.length;\n\n        rose.renameMap = [];\n\n        for(var i=0; i < n; i++)\n            rose.renameMap.push({col: x.colsList[i], to: x.toList[i]});\n    };\n\n\n    process();\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.renameColumns(rose.renameMap) %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Rename List","public":true,"doc":"## Rename List\nThe Rename List command lets you rename a list of columns. To do so, enter the columns' old names in the Column List field and enter new names in the To List field:\n\n![](/images/sl/sl_rename_col_list.png)\n\nOnce you do so, a suggestion appears in the Suggestion list. Click the + button to add the suggestion to the Script list.\nThe renamed columns appear in the Output view:\n\n![](/images/sl/sl_rename_list_results.png)\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/replaceNull.sql":{"value":"-- Replace Null Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n\n\n    rose.param({id: 'column', title: \"column\", defval:\"\", type: \"choice\", width: 120, freeze: true,\n        valuesFunc: function() { return rose.columnList()},\n        values: [\"table not available\"]  });\n\n    rose.param({id: 'nullIndicator', title: \"replacement\",\n        tooltip: rose.expressionTooltip,\n        type: \"string\", defval: '', width: 'end'});\n\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Replace NULLs in {{column}} with {{nullIndicator}}\");\n\n\n    rose.subscribe('column', function(e, col, columns) {\n        var c = columns[0];\n        if(c) e.setPath('params.column', c);\n    });\n\n    //-- Suggesting in the 50s to make null replacing more prominent than casting\n    rose.subscribe('suggestions', function(context) {\n        var col = rose.param('column');\n        var nullSub = rose.param('nullIndicator');\n\n        var type = rose.metadata(col, 'type');\n        if(rose.isSQLNumeric(type) && isNaN(parseFloat(nullSub))) {\n            rose.suggest(context, -100, \"This is a numeric column. Enter a numerical value to use when replacing NULLs.\");\n            rose.suggest(context, 54, {column: col, nullIndicator: '0'}, true);\n            return;\n        }\n\n        //-- If this is the selected op, suggest current settings\n        if(context.selOp === rose.node)\n            rose.suggest(context, 55);\n\n        _.each(rose.columnList(false, 'numeric'), function(c) {\n            if(rose.metadata(c, 'hasNulls'))\n                rose.suggest(context, 51, {column: c, nullIndicator: '0'}, true);\n        });\n\n        _.each(rose.columnList(false, 'char'), function(c) {\n            if(rose.metadata(c, 'hasNulls'))\n                rose.suggest(context, 50, {column: c, nullIndicator: ''}, true);\n        });\n\n    });\n\n\n    var resultSubstitution = {};\n    var c = rose.sqlInColumn(rose.param('column'));\n\n    resultSubstitution[rose.param('column')] = 'COALESCE(' + c + ',' + rose.literal(rose.param('nullIndicator')) + ') AS '\n        + rose.sqlOutColumn(rose.param('column'));\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(resultSubstitution) %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Replace Nulls","public":true,"doc":"## Replace Nulls\nAt times, you may want to replace null values with either a zero or blank, so that analytics work properly. You can do so with the Replace Nulls command.\n\nTo replace nulls, select the column for which you want to replace nulls and enter the new character to substitute for the null value.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/split.sql":{"value":"-- Split Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true)\n\n    rose.onChoices = [\n        {name: \"comma\", text: ','},\n        {name: \"tab\", text: '\\t'},\n        {name: \"space\", text: ' '},\n        {name: \"pipe\", text: '|'},\n        {name: \"period\", text: '.'},\n        {name: \"equal\", text: '='},\n        {name: \"colon\", text: ':'},\n        {name: \"dash\", text: '-'},\n        {name: \"underline\", text: '_'},\n        {name: \"auto ->\", text: null},\n        {name: \"custom ->\", text: null}\n    ]\n\n\n    rose.param({id: 'column', title: \"column\", defval:\"\", type: \"choice\", width: 160, freeze: true,\n        valuesFunc: () => rose.charColumnList(),\n        values: [\"table not available\"]  })\n\n    rose.param({id: 'newCols', title: \"how many new columns?\", type: \"integer\", defval: \"1\", width: 200})\n\n    rose.param({id: 'on', title: \"split on\", type: \"choice\", defval: 'comma', width: 120,\n        values: _.pluck(rose.onChoices,'name')})\n\n    rose.param({id: 'custom', title: \"custom delimiter(s)\", type: \"string\", defval: '', width: 'end',\n        visibleWhen: () => rose.param('on') === 'custom ->'\n    })\n\n    rose.param({id: 'auto', title: \"automatic splitter\", type: \"choice\", width: 400,\n        valuesFunc: () => rose.autosplitList(),\n        visibleWhen: () => rose.param('on') === 'auto ->'\n    })\n\n\n    rose.summary(e => rose.param('on') === 'custom ->'\n        , \"Split column {{column}} on {{on}} {{custom}} creating {{newCols}} columns\")\n\n    rose.summary(e => rose.param('on') === 'auto ->'\n        , \"Split column {{column}} using {{on}} {{auto}} creating {{newCols}} columns\")\n\n    rose.summary(e => true\n        , \"Split column {{column}} on {{on}} creating {{newCols}} columns\")\n\n\n    var process = function() {\n        rose.resultSubstitution = {}\n        rose.resultColumns = (parseInt(rose.param('newCols')) || 0)\n\n        switch(rose.param('on')) {\n            case 'custom ->':\n                rose.resultSubstitution[rose.param('column')] =\n                    _.times(rose.resultColumns, function(n) {\n                        return '\"input\".r.column' + (n+1) + ' AS \"' + rose.param('column') + '_' + (n+1) + '\"'\n                    }).join()\n                rose.onQuoted = rose.sqlLiteral(rose.param('custom'))\n                break\n\n            case 'auto ->':\n                rose.autosplitRegex = null\n                rose.autosplitVCLP = null\n\n                var as = rose.pickAutosplit(rose.param('auto'))\n                switch(as && as.type) {\n                    case 'regex':\n                        rose.autosplitVCLP = null\n\n                        //-- Construct the regex\n                        rose.autosplitRegex =\n                            _.times(rose.resultColumns, i => as.columnRegex + as.glueRegex + '*').join('')\n\n                        //-- Contruct the column substitution list, handling coalescing if necessary\n                        if(as.coalesceFactor > 1) {\n                            rose.resultSubstitution[rose.param('column')] =\n                                _.times(rose.resultColumns, function(n) {\n                                    var x = ['COALESCE(']\n                                    x.push(_.times(as.coalesceFactor, function(m) {\n                                        return '\"input\".r.column' + ((n*as.coalesceFactor)+m+1)\n                                    }).join(','))\n                                    x.push(') AS \"' + rose.param('column') + '_' + (n+1) + '\"')\n\n                                    return x.join('')\n                                }).join()\n                        } else {\n                            rose.resultSubstitution[rose.param('column')] =\n                                _.times(rose.resultColumns, function(n) {\n                                    return '\"input\".r.column' + (n+1) + ' AS \"' + rose.param('column') + '_' + (n+1) + '\"'\n                                }).join()\n                        }\n\n                        break\n\n                    case 'vclp':\n                        rose.autosplitRegex = null\n\n                        //-- Construct the last three args (separator, escape, quote)\n                        rose.autosplitVCLP = as.separatorSQL + ',' + as.escapeSQL + ',' + as.quoteSQL\n\n                        rose.resultSubstitution[rose.param('column')] =\n                            _.times(rose.resultColumns, function(n) {\n                                return '\"input\".r.column' + (n+1) + ' AS \"' + rose.param('column') + '_' + (n+1) + '\"'\n                            }).join()\n\n                        break\n                }\n                break\n\n            default:\n                rose.resultSubstitution[rose.param('column')] =\n                    _.times(rose.resultColumns, function(n) {\n                        return '\"input\".r.column' + (n+1) + ' AS \"' + rose.param('column') + '_' + (n+1) + '\"'\n                    }).join()\n\n                rose.onQuoted = null\n                var found = _.findWhere(rose.onChoices, {name: rose.param('on')})\n                if(found)\n                    rose.onQuoted = rose.sqlLiteral(found.text)\n\n                break\n        }\n    }\n\n    //-- Invoked when the user modifies the column selection\n    rose.subscribe('column', function(e, col, columns) {\n        var c = columns[0]\n        if(!c || !_.contains(rose.charColumnList(),c)) {\n            rose.autosplitRegex = null\n            return\n        }\n\n        e.setPath('params.column', c)\n\n        //-- Look for best autosplit only\n        rose.bestAS = rose.metadata_processAutosplits(c, function(as, count) { })\n\n        if(rose.bestAS) {\n            rose.paramSet('on', 'auto ->')\n            rose.paramSet('auto', rose.bestAS.longName)\n            rose.paramSet('newCols', rose.bestAS.currentCount)\n        }\n\n        process()\n    })\n\n    //-- Invoked when the user selects text\n    rose.subscribe('selection', function(e, row, col, start, end, text) {\n        rose.paramSet('column', col)\n        rose.onQuoted = rose.sqlLiteral(text)\n\n        var item = _.findWhere(rose.onChoices, {text: text})\n\n        if(item) {\n            rose.paramSet('on', item.name)\n            rose.paramSet('custom', '')\n        } else {\n            rose.paramSet('on', 'custom ->')\n            rose.paramSet('custom', text)\n        }\n\n        process()\n    })\n\n    //-- Invoked when StreamLab wants suggestions from this operation\n    rose.subscribe('suggestions', function(context) {\n        //-- If there are no char columns, complain\n        var cols = rose.columnList(false, 'char')\n        if(cols.length == 0)\n            return rose.suggest(context, -10, \"'Split' works only on text data, and there are no text columns. Try using 'Cast' to convert a column to a character type.\")\n\n        //-- We must have a column, otherwise we're not going to suggest anything\n        var col = rose.param('column')\n        if(!rose.validColumnList(col)) return\n\n        //-- Only if this is the selected op\n        if(context.selOp === rose.node)\n            rose.suggest(context, 62)     //-- suggest the current settings\n\n        if(!rose.metadata(col, 'hasData')) return\n\n        var i = 9999\n        rose.metadata_processAutosplits(col, function(as, count) {\n            var priority = 60 + (i/10000) //-- priority order is order in scrutinizer's Autosplits list\n            i--\n\n            rose.suggest(context, priority, {on: 'auto ->', auto: as.longName, newCols: count}, true)\n        })\n    })\n\n\n    process()\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(rose.resultSubstitution) %>\n    FROM (SELECT <%= rose.local('stream') %> *,\n<% if(rose.autosplitRegex) { %>\n        REGEX_LOG_PARSE(\"<%= rose.param('column') %>\",'<%= rose.autosplitRegex %>')\n<% } else if(rose.autosplitVCLP) { %>\n        VARIABLE_COLUMN_LOG_PARSE(\"<%= rose.param('column') %>\",<%= rose.resultColumns %>,<%= rose.autosplitVCLP %>)\n<% } else { %>\n        VARIABLE_COLUMN_LOG_PARSE(\"<%= rose.param('column') %>\",<%= rose.resultColumns %>,<%= rose.onQuoted %>)\n<% } %>\n    AS r FROM <%= rose.guideInput() %>) AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Split","public":true,"doc":"## Split\nThe Split command lets you separate a column into multiple columns, by designating a comma, colon, dash, or other delimiter. A delimiter is simply a character that occurs regularly throughout the column's contents. A common example is Comma Separated Value data, in which commas specify boundaries between character strings.\n\nYou can only use the Split command on columns of type VARCHAR. These columns appear white in the Output view.\n\nTo use the Split command:\n\n1. Select a column from the Column dropdown menu. The only columns available will be those of type VARCHAR.\n2. Enter the number of new columns to be generated.\n3. Select a character (delimiter) from the Split On dropdown menu. Here, you can either:\n\n    - Select from one of the pre-specified delimiters, such as comma, tab, space, pipe, period, or colon.\n    - Select Auto and select a pre-specified automatic splitter, such as Column-Separated Values or Tab-Separated Values.\n    - Select Custom and enter a delimiter of your choosing.\n    \n4. A suggestion appears that reads something like \"Split column X using...\" Click the + icon to add the command to the Guide script.\n5. The results of the script appear in the Output View window.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/throttle.sql":{"value":"-- Throttle Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n\n    rose.param({id: 'throttler', title: \"throttler\", type: \"choice\",\n        values: ['on', 'off'], defval: 'on', width: 110});\n    rose.param({id: 'rps', title: \"rows per second\", type: \"choice\",\n        values: ['project standard', 'custom'], defval: 'project standard', width: 140});\n    rose.param({id: 'customRps', title: \"custom rps\", type: \"real\", defval: \"1.0\", width: 100,\n        visibleWhen: () => rose.param('rps') !== 'project standard'\n    });\n\n\n    rose.summary(e => rose.param('rps') === 'custom'\n        , \"Throttle the stream to the {{rps}} rate {{customRps}} rows per second. This throttler is {{throttler}}.\");\n\n    rose.summary(e => true\n        , \"Throttle the stream to the {{rps}} throttle rate. This throttler is {{throttler}}.\");\n\n\n    rose.subscribe('suggestions', function(context) {\n        rose.suggest(context, 1);     //-- suggest the current settings, but at a low priority\n    });\n\n    var func = rose.guideOutput('throttlefunc');\n\n    var period;\n    if(rose.param('rps') === 'project standard')\n        period = Math.round(1000.0 / parseFloat(rose.projectSetting('projectThrottleRate')));\n    else\n        period = Math.round(1000.0 / parseFloat(rose.param('customRps')));\n\n    var type = rose.local('stream') || 'TABLE';\n%>\n\n<% if(!rose.projectSetting('disableAllThrottlers') && rose.param('throttler') === 'on') { %>\n\n<%= rose.createSqlObj('FUNCTION', func) %>(inputRows CURSOR, throttleScale int)\n    returns TABLE(inputRows.*)\nLANGUAGE JAVA\nPARAMETER STYLE SYSTEM DEFINED JAVA\nNO SQL\nEXTERNAL NAME 'class:com.sqlstream.plugin.timesync.ThrottleStream.throttle';\n\n<% \n    var st = rose.local('stream')\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\nSELECT <%= type %> *\nFROM <%= type %>(<%= func %> (\n      CURSOR(SELECT <%= st %> * FROM <%= rose.guideInput() %> AS \"input\"), <%= period %>));\n\n<% rose.guideAdvance(); %>\n\n<% } else if(rose.projectSetting('disableAllThrottlers')) { %>\n-- Throttling is disabled globally in the project settings\n<% } else { %>\n-- This throttler has been switched off\n<% } %>\n","external":true,"binary":false,"title":"Throttle","public":true,"doc":"## Throttle\nSometimes, you may want to slow a data feed for testing purposes. In these cases, you can throttle your source--slow it to one row per second. The Throttle command throttles the stream to a fixed number of rows per second. \n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseTimestamp.sql":{"value":"-- Timestamp Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true)\n\n\n    rose.param({id: 'column', title: \"column\", defval:\"\", type: \"choice\", width: 160, freeze: true,\n        valuesFunc: () => rose.charOrNumericColumnList(),\n        values: [\"table not available\"]  })\n\n    rose.param({id: 'conversion', title: \"conversion\", type: \"choice\", defval: \"format expression\", width: 160,\n        values: [\"format expression\", \"Unix milliseconds\", \"Unix seconds\"]})\n\n    rose.param({id: 'format', title: \"format\", type: \"string\", defval: 'yyyy-MM-dd HH:mm:ss', width: 200,\n        visibleWhen: () => /^format/.test(rose.param('conversion'))\n    })\n\n    rose.param({id: 'promote', title: \"promote to ROWTIME?\", type: \"boolean\", defval: false, width: 180, freeze: true})\n\n\n    const pro = \" Promote to ROWTIME: {{promote}}.\"\n\n    rose.summary(e => /^unix/i.test(rose.param('conversion')),\n        \"Convert {{column}} as {{conversion}} to a SQL timestamp. \" + pro\n    )\n\n    rose.summary(e => true,\n        \"Convert {{column}} using the {{conversion}} {{format}}.\" + pro\n    )\n\n\n\n    rose.subscribe('column', function(e, col, columns) {\n        var c = columns[0]\n        if(c && _.contains(rose.charOrNumericColumnList(),c)) e.setPath('params.column', c)\n    })\n\n\n    //-- suggestion priorities in the 60's to put this at the top of the list\n    rose.subscribe('suggestions', function(context) {\n        var col = rose.param('column')\n        var fmt = rose.param('format')\n        var suggested = false\n\n        if(rose.validColumnList(col) && fmt) {\n            rose.suggest(context, 60)\n            suggested = true\n        }\n\n        //-- Suggest each of the columns that have timestamp metadata but are not timestamps, and all the unix-timestamps\n        for(const c of rose.columnList()) {\n            if(/TIMESTAMP/i.test(rose.metadata(c, 'type'))) continue //-- already a timestamp\n\n            if(rose.metadata(c, 'hasData') && rose.metadata(c, 'unix-timestamp')) {\n                var p = rose.param('promote')\n                var pri = rose.metadata(c, 'monotonicity') ? 65 : 63\n\n                if(c == col) pri += 1\n\n                rose.suggest(context, pri+1, {column: c, conversion: 'Unix milliseconds', promote: p}, true)\n                rose.suggest(context, pri, {column: c, conversion: 'Unix milliseconds', promote: !p}, true)\n                suggested = true\n            }\n\n            if(rose.metadata(c, 'hasData') && rose.metadata(c, 'unix-timestamp-seconds')) {\n                var p = rose.param('promote')\n                var pri = rose.metadata(c, 'monotonicity') ? 65 : 63\n\n                if(c == col) pri += 1\n\n                rose.suggest(context, pri+1, {column: c, conversion: 'Unix seconds', promote: p}, true)\n                rose.suggest(context, pri, {column: c, conversion: 'Unix seconds', promote: !p}, true)\n                suggested = true\n            }\n\n            if(rose.metadata(c, 'hasData') && rose.metadata(c, 'timestamp') ) {\n                var p = rose.param('promote')\n                var pri = 63\n\n                if(c == col) pri += 1\n\n                rose.suggest(context, pri+1, {column: c, conversion: 'format expression', format: rose.metadata(c, 'timestampFormat'), promote: p}, true)\n                rose.suggest(context, pri, {column: c, conversion: 'format expression', format: rose.metadata(c, 'timestampFormat'), promote: !p}, true)\n                suggested = true\n            }\n        }\n\n        //-- If nothing to suggest, tell them why\n        if(!suggested)\n            rose.suggest(context, -100, \"None of the columns look like potential timestamps. Enter a timestamp format (for example, yyyy-MM-dd hh:mm:ss) to parse a column manually. The format 'unix' can be used to convert a Unix timestamp (number of milliseconds since 1970-01-01) to a SQL timestamp.\")\n    })\n\n\n    var subs = {}\n    var rt = 'ROWTIME'\n\n    //--    bug 5975\n    //--\n    //--    Time formats supported by CAST are more efficient than CHAR_TO_TIMESTAMP\n    //--    Formats are documented under https://docs.sqlstream.com/sql-reference-guide/built-in-functions/cast/\n    //--    By trial and error, I can see that time is optional; if present, at least hours must be specified.\n    //--\n\n    //-- note use of group patterns \\3 and \\10 to make sure separators in date (yyyy/MM/dd) and in time (hh:mm:ss) are all the same (or all absent)\n\n    //-- Bug 1725 - FRG-341: Cast CHAR / VARCHAR string to TIMESTAMP rounds to nearest second\n    //-- so we cannot safely include formats with fractional seconds .SSS for this fastpath CAST processing\n\n    const castFormatRegex = /^yyyy(((\\/|-)?MM(\\3)dd)|(-)?DDD)((('T')| )HH((:)?mm((\\10)ss(\\.SSS)?)?)?(z|Z|X)?)?$/\n\n    var x\n    const fmt = rose.sqlLiteral(rose.param('format'))\n    const col = rose.sqlIdentifier(rose.param('column'))\n\n    if(/^Unix milliseconds/i.test(rose.param('conversion')))\n        x = `MILLIS_TO_TIMESTAMP(CAST(${col} AS BIGINT)) AS `\n    else if(/^Unix seconds/i.test(rose.param('conversion')))\n        x = `MILLIS_TO_TIMESTAMP(CAST(${col} AS BIGINT) * 1000) AS `\n    else if (castFormatRegex.test(rose.param('format')))\n        x = `CAST(${col} AS TIMESTAMP) /* ${fmt} */ AS `\n    else\n        x = `CHAR_TO_TIMESTAMP(${fmt}, CAST(${col} AS VARCHAR(64))) AS `\n\n    if(rose.param('promote')) {\n        //--subs[rt] = x + rose.sqlInColumn(rt)\n        subs[rt] = x + rose.sqlIdentifier(rt)\n        subs[rose.param('column')] = ''\n    } else {\n        subs[rose.param('column')] = x + rose.sqlInColumn(rose.param('column'))\n    }\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(subs) %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Timestamp","public":true,"doc":"## Timestamp\nThe Parse Timestamp operation lets you convert any correctly formatted input `CHAR` or `VARCHAR` column to a `TIMESTAMP` datatype. It also\nlets you create a timestamp from a numeric column containing milliseconds or seconds since the Unix Epoch. Use **conversion** to select the\ntime conversion.\n\nYou can specify how to convert a string into a timestamp by entering a **format string** that identifies the parts of the timestamp you want.\nThe input date-time string can contain any parts of a full timestamp (for example `'yyyy-MM-dd HH:mm:ss'`).\nIf all these elements are present in your input string, and `'yyyy-MM-dd HH:mm:ss'` is the format you supply,\nthen the input-string elements are interpreted in that order as year, month, day, hour, minute, and seconds, such as in `'2009-09-16 03:15:24'`.\nThe `yyyy` may not be uppercase; the `HH` can be lowercase (12 hour clock - in which case it is usually combined with `a` the AM/PM indicator)\n or uppercase to mean using a 24-hour clock.\n\nThose fields in the resulting `TIMESTAMP` will then contain the corresponding data taken from your input-date-time string;\nfields not specified in your template will use default values (see below).\n\nThe full set of format strings allowed are defined by the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html\" target=\\_blank\">Java SimpleDateFormat class</a>.\n\nFor more information on s-Server's use of date and time patterns, see <a href=\"https://docs.sqlstream.com/sql-reference-guide/built-in-functions/date-and-time-patterns/\" target=\"\\_blank\">the topic Date and Time Patterns in the s-Server Streaming SQL Reference Guide</a>.\n\nBy default, this operation generates an expression like this:\n```\n  SELECT STREAM ..., CHAR_TO_TIMESTAMP('<format string>',\"<column_name>\") as \"<column_name>\", ...\n```\n\nHowever, if the format string is one that can be handled directly by the `CAST` function, then `CAST` is used instead of `CHAR_TO_TIMESTAMP` because it performs better:\n```\n  SELECT STREAM ..., CAST(\"<column_name>\" AS TIMESTAMP) AS \"<column name>\". ...\n```\nIf you have a numeric column and select the **Unix milliseconds** or **Unix seconds** conversion, the column\nwill be interpreted as milliseconds (or seconds) since the Unix Epoch (midnight on 01-01-1970), and the generated expression is similar to:\n```\n  SELECT STREAM ..., MILLIS_TO_TIMESTAMP(\"<column_name>\") AS \"column_name>\", ...\n\n```\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/useNull.sql":{"value":"-- Use Null Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n\n\n    rose.param({id: 'column', title: \"column\", defval:\"\", type: \"choice\", width: 120, freeze: true,\n        valuesFunc: function() { return rose.columnList()},\n        values: [\"table not available\"]  });\n\n    rose.param({id: 'nullIndicator', title: \"value to make NULL\", type: \"string\", defval: '', width: 200});\n\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Replace {{nullIndicator}} with NULL in column {{column}}\");\n\n\n    rose.subscribe('column', function(e, col, columns) {\n        var c = columns[0];\n        if(c) e.setPath('params.column', c);\n    });\n\n    rose.subscribe('suggestions', function(context) {\n        //-- We must have a column, otherwise we're not going to suggest anything\n        var col = rose.param('column');\n        if(!col) return;\n\n        rose.suggest(context, 1);     //-- suggest the current settings at a low priority\n    });\n\n\n    rose.resultSubstitution = {};\n    rose.resultSubstitution[rose.param('column')] = 'NULLIF(\"' + rose.param('column') + '\",\\'' +\n        rose.param('nullIndicator') + '\\') AS \"' + rose.param('column') + '\"';\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(rose.resultSubstitution) %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Use Null","public":true,"doc":"## Use Null\nYou can turn empty cells to NULL cells with the Use Null command. To do so, select the column, select the replacement field and hit the space bar once. Once you do so, a suggestion appears reading \"Replace Empty with NULL in column [column]\"\n\n![](/images/doc/sl_use_null.png)\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseCDR.sql":{"value":"-- Sonus CDR Parse Operation\n-- Tuned for Veracity sample data\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n\n    rose.param({id: 'column', title: \"column\", defval:\"\", type: \"choice\", width: 160, freeze: true,\n        valuesFunc: function() { return rose.charColumnList() },\n        values: [\"table not available\"]  });\n\n    rose.param({id: 'parser', title: \"parser type\", type: \"choice\", defval: \"SONUS-COMMON\", width: 160,\n        values: [\"SONUS-COMMON\", \"SONUS-STOP\", \"BROADSOFT\", \"GENBAND\"]});\n\n    rose.param({id: 'delim', title: \"delimiter\", type: \"string\", defval: \",\", width: 120});\n\n    rose.param({id: 'escape', title: \"escape\", type: \"string\", defval: \"\\\\\", width: 120});\n\n    rose.param({id: 'quote', title: \"quote\", type: \"string\", defval: '\"', width: 120});\n\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Parse column {{column}} with the {{parser}} CDR parser using delimiter {{delim}}, escape {{escape}}, and quote {{quote}}\");\n\n\n    rose.subscribe('column', function(e, col, columns) {\n        var c = columns[0];\n        if(c && _.contains(rose.charColumnList(),c)) e.setPath('params.column', c);\n    });\n\n\n    rose.subscribe('suggestions', function(context) {\n        //-- If there are no char columns, complain\n        var cols = rose.columnList(false, 'char');\n        if(cols.length == 0)\n            return rose.suggest(context, -10, \"'Parse CDR' works only on text data, and there are no text columns. Try using 'Cast' to convert a column to a character type.\");\n\n        //-- We must have a column, otherwise we're not going to suggest anything\n        var col = rose.param('column');\n        if(!col) return;\n\n        rose.suggest(context, 1);     //-- suggest the current settings at a low priority\n    });\n\n\n    rose.parseColumns = [];\n    //-- push (name,parse-type) pairs in the order in which they'll be parsed\n    rose.parseColumns.push(['\"RecordType\"','VARCHAR(12)']);\n\n    switch(rose.param('parser')) {\n    case 'SONUS-COMMON':\n    case 'SONUS-STOP':\n        rose.parseColumns.push(['\"GatewayName\"','VARCHAR(23)']);\n        rose.parseColumns.push(['\"AccountingId\"','VARCHAR(18)']);\n        rose.parseColumns.push(['\"StartTimeSysTicks\"','BIGINT']);\n        rose.parseColumns.push(['\"NodeTimeZone\"','VARCHAR(23)']);\n        rose.parseColumns.push(['\"StartDate\"','VARCHAR(10)']);\n        rose.parseColumns.push(['\"StartTime\"','VARCHAR(10)']);\n        if (rose.param('parser') === 'SONUS-COMMON') {\n            break;\n        }\n        // additional columns for SONUS-STOP messages\n        rose.parseColumns.push(['\"PsxResponseTime\"','VARCHAR(10)']);\n        rose.parseColumns.push(['\"AcmTime\"','BIGINT']);\n        rose.parseColumns.push(['\"CallSetupTime\"','BIGINT']);           // STOP col #10\n        rose.parseColumns.push(['\"DisconnectDate\"','VARCHAR(10)']);\n        rose.parseColumns.push(['\"DisconnectTime\"','VARCHAR(10)']);\n        rose.parseColumns.push(['\"TeardownTime\"','VARCHAR(10)']);       // BIGINT, but want START to parse\n        rose.parseColumns.push(['\"CallServiceDuration\"','VARCHAR(10)']);// BIGINT, but want START to parse\n        rose.parseColumns.push(['\"CallDisconnectReason\"','VARCHAR(3)']);// INTEGER, but want START to parse\n        rose.parseColumns.push(['\"ServiceDelivered\"','VARCHAR(22)']);   // STOP col #16\n        rose.parseColumns.push(['\"CallDirection\"','VARCHAR(12)']);\n        rose.parseColumns.push(['\"ServiceProvider\"','VARCHAR(23)']);\n        rose.parseColumns.push(['\"TransitNetwork\"','VARCHAR(5)']);\n        rose.parseColumns.push(['\"CallingNumber\"','VARCHAR(30)']);      // STOP col #20\n        rose.parseColumns.push(['\"CalledNumber\"','VARCHAR(30)']);\n        rose.parseColumns.push(['\"ExtraCalledAddrDigits\"','VARCHAR(30)']);\n        rose.parseColumns.push(['\"NumCalledNumTrans\"','VARCHAR(1)']);   // SMALLINT, but want START to parse\n        rose.parseColumns.push(['\"CalledNumBeforeTrans1\"','VARCHAR(30)']);\n        rose.parseColumns.push(['\"TranslationType1\"','VARCHAR(1)']);    // SMALLINT, but want START to parse\n        rose.parseColumns.push(['\"CalledNumBeforeTrans2\"','VARCHAR(30)']);\n        rose.parseColumns.push(['\"TranslationType2\"','VARCHAR(1)']);    // SMALLINT, but want START to parse\n        rose.parseColumns.push(['\"BillingNumber\"','VARCHAR(30)']);      // STOP col #28\n        rose.parseColumns.push(['\"RouteLabel\"','VARCHAR(23)']);\n        rose.parseColumns.push(['\"RouteAttempt\"','VARCHAR(5)']);        // SMALLINT, but want START to parse\n        rose.parseColumns.push(['\"RouteSelected\"','VARCHAR(51)']);      // STOP col #31\n        break;\n    case 'BROADSOFT':\n        // TBD -- for now, just create a visibly different column name for s-Analyzer UI\n        rose.parseColumns.push(['\"Gateway\"','VARCHAR(23)']);\n        break;\n    case 'GENBAND':\n        // TBD -- for now, just create visibly different column names for s-Analyzer UI\n        rose.parseColumns.push(['\"Gateway\"','VARCHAR(23)']);\n        rose.parseColumns.push(['\"AcctngId\"','VARCHAR(18)']);\n        break;\n    default:\n        break;\n    }\n\n    //-- number of parseColumns defined above\n    rose.resultColumns = rose.parseColumns.length;\n\n    rose.resultSubstitution = {};\n    rose.resultSubstitution[rose.param('column')] =\n        _.times(rose.resultColumns, function(n) {\n                return '\"input\".r.' + rose.parseColumns[n][0] + ' AS ' + rose.parseColumns[n][0];\n            }).join()\n            // TEMP:\n            // -- need a way to get remainder of parsed column (that portion not accounted for\n            // -- by the specified set of result columns) from VCLP. In the meantime, we propagate\n            // -- the original column by including it here in the substitution list.\n                + ',' + rose.sqlInColumn(rose.param('column'));\n\n    rose.parseSpecifier = {};\n    rose.parseSpecifier[rose.param('column')] =\n        _.times(rose.resultColumns, function(n) {\n            return rose.parseColumns[n][0] + ' TYPE ' + rose.parseColumns[n][1]}).join();\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %>\n    DESCRIPTION <%= rose.sqlLiteral('Parse column ' + rose.sqlInColumn(rose.param('column')) + ' with the ' + rose.param('parser') + ' CDR parser') %>\nAS\n    SELECT <%= rose.local('stream') %>\n        <%= rose.substituteColumnsWithExpressions(rose.resultSubstitution) %>\n    FROM (SELECT <%= rose.local('stream') %>\n            *,\n            VARIABLE_COLUMN_LOG_PARSE(\n                \"<%= rose.param('column') %>\",\n                '<%= rose.parseSpecifier[rose.param('column')] %>',\n                <%= rose.sqlLiteral(rose.param('delim')) %>,\n                <%= rose.sqlLiteral(rose.param('escape')) %>,\n                <%= rose.sqlLiteral(rose.param('quote')) %>\n            ) AS r\n        FROM <%= rose.guideInput() %>) AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Parse CDR","public":true,"doc":"## Parse CDR\nCDRs are Caller Data Records.\n\nStreamLab provides four built-in parsers for these:\n\n - SONUS-Common.\n - SONUS-Stop.\n - Broadsoft.\n - Genband\n\nYou can customize the delimiter, escape, and quotation characters for each of these formats.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/parseJSON.sql":{"value":"-- Parse JSON Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true)\n\n\n    rose.param({id: 'column', title: \"column\", defval:\"\", type: \"choice\", width: 160, freeze: true,\n        valuesFunc: function() { return rose.charBinColumnList() },\n        values: [\"table not available\"]  })\n\n    rose.param({id: 'prefix', title: \"prefix\", type: \"string\", defval: '', width: 120})\n    \n    rose.param({id: 'struct', title: \"structure\", type: 'choice', defval: 'object', \n        values: ['object', 'array'], width: 100,\n        visibleWhen: () => false //-- the UDX can't handle arrays yet, so disable that part of the UI until we can\n    })\n\n    rose.param({id: 'objprops', title: \"property\", type: \"columntype\", defval: '', width: 340, repeats: true,\n        visibleWhen: () => rose.param('struct') === 'object'\n    })\n\n    rose.param({id: 'arrlen', title: 'length', type: 'integer', defval: 1, width: 90, \n        visibleWhen: () => rose.param('struct') === 'array'\n    })\n     \n    rose.param({id: 'arrtype', title: \"element\", type: \"columntype\", defval: '', width: 220, colField: 'none',\n        visibleWhen: () => rose.param('struct') === 'array'\n    })\n\n    rose.summary(function(e) {\n        return rose.param('struct') === 'object'\n    }, \"Parse the JSON in {{column}} extracting the object properties {{objprops}} into columns with the prefix: {{prefix}}\")\n    //-- should be this once arrays are implemented: \"Parse the JSON in {{column}} extracting the {{struct}} properties {{objprops}} into columns with the prefix: {{prefix}}\"\n\n    rose.summary(function(e) {\n        return true\n    }, \"Parse the JSON in {{column}} extracting {{arrlen}} {{struct}} elements of type {{arrtype}} into columns with the prefix: {{prefix}}\")\n\n\n    rose.subscribe('column', function(e, col, columns) {\n        var c = columns[0]\n        if(c && _.contains(rose.charBinColumnList(),c)) e.setPath('params.column', c)\n    })\n\n\n    rose.subscribe('suggestions', function(context) {\n        const col = rose.param('column')\n\n        //-- Suggest each of the columns that have json metadata\n        for(const c of rose.columnList()) {\n            if(rose.metadata(c, 'hasData') && rose.metadata(c, 'json')) {\n                const jt = rose.metadata(c, 'jsonTypes')\n                if(isNaN(jt)) {  //-- jt is not a number, it's [{column:,type:,precision:,scale:}...], indicating an object\n                    try {\n                        let sug = {column: c, prefix: c, struct: 'object'}\n                        let list = []    //-- indexes of repeated params\n\n                        let i = 0\n                        for(const p of JSON.parse(jt)) {\n                            sug[rose.util.compoundRepeat('showCol','objprops',i)] = true\n                            sug[rose.util.compoundRepeat('col','objprops',i)] = p.column\n                            sug[rose.util.compoundRepeat('type','objprops',i)] = p.type\n                            sug[rose.util.compoundRepeat('precision','objprops',i)] = p.precision\n                            sug[rose.util.compoundRepeat('scale','objprops',i)] = p.scale\n                            list.push(`${i}`)\n                            i++\n                        }\n                        sug[rose.util.listId('objprops')] = list.join(',')\n\n                        rose.suggest(context, c == col ? 61 : 60, sug, true)\n                    } catch(err) {\n                        RoseLib.Error(`ParseJSON: error while parsing \"${jt}\" in column ${c}: ${err}`,'ParseJSON Error')\n                    }\n                } else { //-- jt is a number, the length of an array. Eventually, we will want a type (or types) for the elements\n                    const n = parseInt(jt)\n                    rose.suggest(context, c == col ? 61 : 60, {column: c, prefix: c, struct: 'array', arrlen: n, arrtype: '|VARCHAR|1024|'}, true)\n                }\n\n            }\n        }\n\n        //-- If there are no char or binary columns, complain\n        const cols = rose.columnList(false, 'charbin')\n        if(cols.length == 0)\n            return rose.suggest(context, -10, \"'Parse JSON' works only on text data, and there are no character or binary columns. Try using 'Cast' to convert a column to a character type.\")\n\n        //-- Check that the types are OK\n        if(rose.param('struct') === 'object') {\n            const ctErrs = rose.checkColumntypes('objprops', false)\n            if(ctErrs) \n                return rose.suggest(context, -10, `Check properties: ${ctErrs}`)\n        } else {\n            const ctErr = rose.checkColumntype('arrtype', true)\n            if(ctErr) \n                return rose.suggest(context, -10, `Check element type: ${ctErr}`)\n        }\n\n        //-- If we made it here, we should be able to suggest what the user has entered\n        rose.suggest(context, 62)\n    })\n\n    const func = rose.guideOutput('parser')\n    let props = []\n\n    if(rose.param('struct') === 'object') {\n        rose.repeatParam('objprops', (x,index) => {\n            const prop = rose.compoundParam(x)\n            props.push({name:prop.col, type: rose.renderSQLtype(prop.type, prop.precision, prop.scale)})\n        })\n    } else {\n        //-- Not implemented yet\n    }\n\n    const prefix = rose.param('prefix')\n    const pre = prefix ? prefix + '_' : ''\n\n    rose.resultSubstitution = {}\n    rose.resultSubstitution[rose.param('column')] =\n        props.map(x => `JSON.\"${x.name}\" AS \"${pre}${x.name}\"`).join(', ')\n    rose.resultSubstitution['ROWTIME'] = ''\n%>\n\n<%= rose.createSqlObj('FUNCTION', func) %>(\n   input cursor,\n   columnName select from input, \n   parserClassName varchar(256),\n   options cursor\n)\nreturns table(\n    input.*,\n    <%= props.map(x => rose.sqlIdentifier(x.name) + ' ' + x.type).join(',') %>\n)\nlanguage java\nparameter style system defined java\nno sql\nexternal name 'class com.sqlstream.aspen.namespace.common.ParserUdx.parseColumn';\n\n<% \n    var st = rose.local('stream')\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(rose.resultSubstitution) %>\n    FROM <%= rose.local('stream') %> (<%= func %>(\n       CURSOR(SELECT <%= st %> * FROM <%= rose.guideInput() %> AS \"input\"),\n       ROW(<%= rose.sqlIdentifier(rose.param('column')) %>), 'JSON',\n       CURSOR(SELECT * FROM (values '$') AS OPTIONS(ROW_PATH))\n    )) JSON;\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Parse JSON","public":true,"doc":"## Parse JSON\nThis parser assumes a column contains a simple JSON object. It extracts new columns based on the properties in the JSON object.\n\n**Note:** the parser cannot process nested JSON objects, and will extract top level properties if the parser encounters nested objects.\n\nTo use the JSON parser, do the following:\n\n1. Choose a column that contains JSON content\n2. Enter a prefix for new columns that will be extracted from the JSON object\n3. For each property, enter the property name and the SQL type for the resulting column\n\nFor example, if the column contains a series of JSON objects such as\n```\n{\"id\":\"50116195532\", \"reported_at\":\"2014-07-23T20:51:58.547\", \"lat\":-33.530784606933594, \"lon\":150.87783813476562, \"speed\":0, \"bearing\":0, \"driver_no\":\"160019\", \"prescribed\":false, \"highway\":\"\"}\n{\"id\":\"60116195532\", \"reported_at\":\"2014-07-24T20:51:58.547\", \"lat\":-33.530784606943594, \"lon\":150.87783813876562, \"speed\":10, \"bearing\":30, \"driver_no\":\"160019\", \"prescribed\":false, \"highway\":\"\"}\n```\nand you set prefix to 'xyz_' and specify 3 *property* parameters with the names 'id', 'lat', and 'lon', you'll get 3 new columns:\n```\nxyz_id\nxyz_lat\nxyz_lon\n```\n\nIn this case, you would want to change the default type (VARCHAR(64)) for each of the properties to DOUBLE, so that the properties are extracted from the JSON object and converted to doubles all in one step.\n\nStreamLab will try to identify columns that contain JSON objects, so look for a suggestion that contains all of the properties and their types filled in for you (you can select a column containing JSON to focus the suggestions on\nthe possibilities for that column).\n\nFor more information on s-Server's JSON parser, see <a href=\"https://docs.sqlstream.com/sql-reference-guide/merge-statement/\" target=\"\\_blank\"> Parsing JSON in the Integrating SQLstream with Other Systems guide</a>.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/w3c.sql":{"value":"-- W3C Parse Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n\n\n    rose.param({id: 'column', title: \"column\", defval:\"\", type: \"choice\", width: 120, freeze: true,\n        valuesFunc: function() { return rose.charColumnList(false, 'char')},\n        values: [\"table not available\"]  });\n\n    rose.param({id: 'logFormat', title: \"format\", type: \"choice\", defval: \"COMMON\", width: 400,\n        values: [\"COMMON\", \"COMMON WITH VHOST\", \"NCSA EXTENDED\", \"REFERER\", \"AGENT\",\n        '%h %l %u [%t] \\\\\"%r %r HTTP/%r\\\\\" ' + rose.closeToken + 's %b \\\\\"%r\\\\\" \\\\\"%r\\\\\" %r %r']})\n\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Parse W3C-compliant log entries in column {{column}} with format {{logFormat}}\");\n\n\n    rose.subscribe('column', function(e, col, columns) {\n        var c = columns[0];\n        if(c && _.contains(rose.charColumnList(),c)) e.setPath('params.column', c);\n    });\n\n\n    rose.subscribe('suggestions', function(context) {\n        //-- We must have a column, otherwise we're not going to suggest anything\n        var col = rose.param('column');\n        if(!rose.validColumnList(col)) return;\n\n        rose.suggest(context, 1);     //-- suggest the current settings at a low priority\n    });\n\n    //--Note: this probably needs to be revised to be similar to split.sql; select\n    //--should use rose.substituteColumnsWithExpressions(rose.resultSubstitution)\n%>\n\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %>\n\n<%  var i = 1;\n    switch(rose.param('logFormat')) { case 'COMMON': %>\n\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(256))     AS \"remoteHost\",        -- %h\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(256))     AS \"remoteLogname\",     -- %l\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(256))     AS \"remoteUser\",        -- %u\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(26))      AS \"time\",              -- %t\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(1024))    AS \"request\",           -- %r\n        CAST(\"input\".r.column<%= i++ %>  AS SMALLINT)         AS \"status\",            -- %s\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(7))       AS \"responseBytesCLF\"   -- %b\n\n<%  break; case 'COMMON WITH VHOST': %>\n\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(256))     AS \"serverName\",        -- %v\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(256))     AS \"remoteHost\",        -- %h\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(256))     AS \"remoteLogname\",     -- %l\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(256))     AS \"remoteUser\",        -- %u\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(26))      AS \"time\",              -- %t\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(1024))    AS \"request\",           -- %r\n        CAST(\"input\".r.column<%= i++ %>  AS SMALLINT)         AS \"status\",            -- %s\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(7))       AS \"responseBytesCLF\"   -- %b\n\n<%  break; case 'NCSA EXTENDED': %>\n\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(256))     AS \"remoteHost\",        -- %h\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(256))     AS \"remoteLogname\",     -- %l\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(256))     AS \"remoteUser\",        -- %u\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(26))      AS \"time\",              -- %t\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(1024))    AS \"request\",           -- %r\n        CAST(\"input\".r.column<%= i++ %>  AS SMALLINT)         AS \"status\",            -- %s\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(7))       AS \"responseBytesCLF\",  -- %b\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(1024))    AS \"referer\",           -- %i\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(1024))    AS \"userAgent\"          -- %i\n\n<%  break; case 'REFERER': %>\n\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(1024))    AS \"referer\",           -- %i\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(1024))    AS \"requestURL\"         -- %U\n\n<%  break; case 'AGENT': %>\n\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(1024))    AS \"userAgent\"          -- %i\n\n<%  break; default: %>\n\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(256))     AS \"remoteHost\",        -- %h\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(256))     AS \"remoteLogname\",     -- %l\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(256))     AS \"remoteUser\",        -- %u\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(26))      AS \"requestTime\",              -- %t\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(1024))    AS \"requestMethod\",           -- %r\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(1024))    AS \"requestLine\",           -- %r\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(1024))    AS \"httpVer\",           -- %r\n        CAST(\"input\".r.column<%= i++ %>  AS SMALLINT)         AS \"status\",            -- %s\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(7))       AS \"responseBytesCLF\",  -- %b\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(1024))    AS \"referer\",           -- %i\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(1024))    AS \"userAgent\",          -- %i\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(1024))    AS \"extra1\",           -- %r\n        CAST(\"input\".r.column<%= i++ %>  AS VARCHAR(1024))    AS \"extra2\"           -- %r\n\n<% break; } %>\n\n    FROM (SELECT <%= rose.local('stream') %> W3C_LOG_PARSE(\"<%= rose.param('column') %>\",\n        '<%= rose.param(\"logFormat\") %>')\n        FROM <%= rose.guideInput() %>) AS \"input\"(r);\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Parse W3C Log ","public":true,"doc":"## Parse W3C Log\nParse a column containing W3C-compliant log entries using one of the predefined formats.\n\nW3C_LOG_PARSE supports access to logs generated by W3C-compliant applications like the Apache web server, producing output rows with one column for each specifier. The data types are derived from the log entry description specifiers listed in the [Apache mod_log_config](http://httpd.apache.org/docs-2.0/mod/mod_log_config.html?# formats) specification.\n\nYou can choose from one of five pre-defined parsers. Each parser breaks the log into predefined columns with one column for each format specifier. The column's type is determined by the specifier's output. For example, %b represents the number of bytes sent in processing an HTTP request, so the column type will be numeric.\n\n| Format Name | W3C Name | Format Specifiers |\n| --- | --- | --- |\n| COMMON | Common Log Format (CLF) | %h %l %u %t \"%r\" %>s %b |\n| COMMON WITH VHOST | Common Log Format with Virtual Host | %v %h %l %u %t \"%r\" %>s %b |\n| NCSA EXTENDED | NCSA extended/combined log format | %h %l %u %t \"%r\" %>s %b \"%[Referer]i\"\"%[User-agent]i\" |\n| REFERER | Referer log format | %[Referer]i ---> %U |\n\nFor more information on parsing W3C files, see <a href=\"https://docs.sqlstream.com/sql-reference-guide/built-in-functions/w3clogparse/\" target=\"\\_blank\">Parsing W3C in the Integrating SQLstream with Other Systems Guide</a>.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/regex.sql":{"value":"-- Regex Parse Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n\n    rose.param({id: 'column', title: \"column\", defval:\"\", type: \"choice\", width: 160, freeze: true,\n        valuesFunc: function() { return rose.charColumnList() },\n        values: [\"table not available\"]  });\n\n    rose.param({id: 'parser', width: 120, title: \"parser type\", type: \"choice\", defval: \"FULL\", values: [\"FULL\", \"FAST\"]});\n\n    rose.param({id: 'regex', title: \"regular expression\", type: \"string\", defval: \"(.*)\", width: 'end' /* was 200 */});\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Parse column {{column}} with the {{parser}} regex parser using {{regex}}\");\n\n\n    rose.subscribe('column', function(e, col, columns) {\n        var c = columns[0];\n        if(c && _.contains(rose.charColumnList(),c)) e.setPath('params.column', c);\n    });\n\n\n    rose.subscribe('suggestions', function(context) {\n        //-- If there are no char columns, complain\n        var cols = rose.columnList(false, 'char');\n        if(cols.length == 0)\n            return rose.suggest(context, -10, \"'Regex Split' works only on text data, and there are no text columns. Try using 'Cast' to convert a column to a character type.\");\n\n        //-- We must have a column, otherwise we're not going to suggest anything\n        var col = rose.param('column');\n        if(!rose.validColumnList(col)) return;\n\n        rose.suggest(context, 1);     //-- suggest the current settings at a low priority\n    });\n\n\n    var resultColumns = 0;\n\n    //-- Protect against invalid regular expressions (such as when the user is in the middle of typing it in)\n    try {\n        var x = new RegExp(rose.param('regex') + '|').exec();\n        if(x)\n            resultColumns = x.length - 1;\n    } catch(err) {}\n\n    var resultSubstitution = {};\n\n    if(resultColumns)\n        resultSubstitution[rose.param('column')] =\n            _.times(resultColumns, function(n) { return '\"input\".r.column' + (n+1) + ' AS \"' + rose.param('column') + '_' + (n+1) + '\"'}).join();\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(resultSubstitution) %>\nFROM (SELECT <%= rose.local('stream') %> *, <%= rose.param('parser') === 'FAST' ? 'FAST_REGEX_LOG_PARSE' : 'REGEX_LOG_PARSE' %> (\"<%= rose.param('column') %>\",'<%= rose.param('regex') %>') AS r\n        FROM <%= rose.guideInput() %>) AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Regex Split","public":true,"doc":"## Regex Split\nThe Regex Split command parses (separates) a character string based on Java Regular Expression patterns as defined in [java.util.regex.pattern](http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/Pattern.html). For more information on using regular expressions, see http://docs.oracle.com/javase/tutorial/essential/regex/\n\nThe columns returned will be COLUMN1 through COLUMNn, where n is the number of groups in the regular expression. The columns will be of type varchar(1024).\n\n![](/images/doc/sl_commands_regex.png)\n\nTo use the Regex Split parser, you select the column to which you want to apply a Java Regular Expression pattern, then enter the pattern in the regular expression box. This topic provides a cursory explanation of RegEx, but you may want to consult an expert for help in creating RegEx strings.\n\nFor more information on the s-Server Regex parser, see <a href=\"https://docs.sqlstream.com/sql-reference-guide/built-in-functions/regexlogparse/\" target=\"\\_blank\">Regex Log Parse in the s-Server Streaming SQL Reference Guide</a>.\n\nFor example, the following Regular Expression returns two columns with zero or more of [0-9] from the string:\n\n```\n([^0-9]*)1*([^0-9]*)2*([^0-9]*)\n```\nSo if the selected column contained a string like\n\n```\n'abcde111fghij22klm'\n```\n\nthe columns returned would be the following:\n```\n         +----------+-----------+\n         | COLUMN1  | COLUMN2   |\n         +----------+-----------+\n         | 111      | 22        |\n         +----------+-----------+\n         1 row selected\n```\n\nIf the Regular Expression you enter is invalid, StreamLab returns an error.\n\nYou can select from Full or Fast parsing. Full is more accurate, while Fast, as it suggests, works more quickly.\n\n#### Full\nColumns are based on match groups defined in the regex-pattern. Each group defines a column, and the groups are processed from left to right. Failure to match produces a NULL value result: If the regular expression does not match the the string passed as the first parameter, NULL is returned.\n\n#### Fast\nThe FAST_REGEX_LOG_PARSE works by first decomposing the regular expression into a series of regular expressions, one for each expression inside a group and one for each expression outside a group. Any fixed length portions at the start of any expressions are moved to the end of the previous expression.\n\nIf any expression is entirely fixed length, it is merged with the previous expression. The series of expressions is then evaluated using lazy semantics with no backtracking. (In regular expression parsing parlance, \"lazy\" means don't parse more than you need to at each step. \"Greedy\" means parse as much as you can at each step.)\n\n#### Quick Regex Reference\nFor full details on Regex, see [java.util.regex.pattern](http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/Pattern.html)\n\n- [xyz] Find single character of: x, y or z\n- [^abc] Find any single character except: x, y, or z\n- [r-z] Find any single character between r-z\n- [r-zR-Z] Find any single character between r-z or R-Z\n- \\^ Start of line\n- $ End of line\n- \\\\A Start of string\n- \\\\z End of string\nAny single character\n- \\\\s Find any whitespace character\n- \\\\S Find any non-whitespace character\n- \\\\d Find any digit\n- \\\\D Find any non-digit\n- \\\\w Find any word character (letter, number, underscore)\n- \\\\W Find any non-word character\n- \\\\b Find any word boundary\n- (...) Capture everything enclosed\n- (x | y) Find x or y (also works with symbols such as \\\\d or \\\\s)\n- x? Find zero or one of x (also works with symbols such as \\\\d or \\\\s)\n- x\\* Find zero or more of x (also works with symbols such as \\\\d or \\s)\n- x+ Find one or more of x (also works with symbols such as \\\\d or \\\\s)\n- x{3} Find exactly 3 of x (also works with symbols such as \\\\d or \\\\s)\n- x{3,} Find 3 or more of x (also works with symbols such as \\\\d or \\\\s)\n- x{3,6} Find between 3 and 6 of x (also works with symbols such as \\\\d or \\\\s)\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/unfold.sql":{"value":"-- Unfold Operation\n<%= rose.panel('params') %>\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    rose.localSet('docsDismissed', true)\n\n    rose.param({id: 'key', title: \"key column\", defval:\"\", type: \"choice\", width: 120, freeze: true,\n        valuesFunc: () => rose.columnList(false, 'groupable'),\n        values: [\"table not available\"] \n    })\n    rose.param({id: 'operation', title: \"operation on value\", type: \"operation\", opsSet: 'unfold|number', defval: \"sum\", width: 270})\n    rose.param({id: 'val', title: \"value column\", defval:\"\", type: \"choice\", width: 120,\n        valuesFunc: () => rose.columnList(false,'numeric'),\n        values: [\"table not available\"]\n    })\n    rose.param({id: 'suffix', title: \"new column suffix\", type: \"string\", defval: \"_total\", width: 160})\n    rose.param({id: 'parts', title: 'partition by', repeats: true, type: 'choice', width: 120,\n        valuesFunc: () => rose.columnListPlusNone(),\n        visibleWhen: () => rose.param('mode') !== 'tumbling',\n        values: [\"table not available\"]\n    })\n    rose.param({id: 'opExtra', title: \"operation on others\", type: \"operation\", opsSet: 'others', defval: \"sum\", width: 270})\n    rose.param({id: 'window', title: 'analytics time window', repeats: false, type: 'timewindow', defval: \"1 minute\", width: 170})\n    rose.param({id: 'mode', title: \"mode\", type: \"choice\", values: ['sliding', 'tumbling'], defval: 'sliding', width: 100})\n    rose.param({id: 'refresh', title: 'refresh rate', repeats: false, type: 'timewindow', defval: \"1 second\", width: 170,\n        visibleWhen: () => rose.param('mode') === 'sliding',\n    })\n    rose.param({id: 'keylist', title: 'key list', defval:\"\", type: \"string\", width: 400})\n\n    rose.subscribe('column', function(e, col) {\n        e.setPath('params.key', col)\n    })\n\n    function hasParts(r) {\n        var gotOne = false\n\n        r.repeatParam('parts', function(p, index) {\n            var pcol = r.param(p)\n            if(pcol !== rose.noColumn) gotOne = true\n        })\n\n        return gotOne\n    }\n\n    const xmsg = 'For the other columns use {{opExtra}}.'\n    const sumParts = \"For each unique value in the column(s) {{parts}}: \"\n    const sumSlide = \"Unfold the column {{key}} containing keys {{keylist}}, creating new columns with the suffix {{suffix}} aggregating {{operation}} of {{val}} over a {{window}} {{mode}} window, refreshing every {{refresh}}(s).\" + xmsg\n\n    rose.summary(e => rose.param('mode') === 'tumbling'\n        , \"Unfold the column {{key}} containing keys {{keylist}}, creating new columns with the suffix {{suffix}} aggregating {{operation}} of {{val}} over a {{window}} {{mode}} window.\" + xmsg)\n\n    //-- sliding with partitions\n    rose.summary(e => hasParts(rose)\n        , sumParts + sumSlide)\n\n    //-- sliding\n    rose.summary(e => true\n        , sumSlide)\n\n\n    rose.subscribe('suggestions', function(context) {\n        var key = rose.param('key')\n        var val = rose.param('val')\n        var op = rose.param('operation')\n        var opX = rose.param('opExtra')\n        var keylist = rose.param('keylist').split(',')\n\n        var opErrs = rose.checkOperation('operation')\n        if(opErrs)\n            return rose.suggest(context, -100, \"In the 'operation on value' setting: \" + opErrs)\n\n        opErrs = rose.checkOperation('opExtra')\n        if(opErrs)\n            return rose.suggest(context, -100, \"In the 'operation on others' setting: \" + opErrs)\n\n        if(!rose.param('suffix'))\n            return rose.suggest(context, -100, \"Enter a suffix for the new columns that will be created\")\n\n        var keyType = rose.metadata(key, 'type')\n        var valType = rose.metadata(val, 'type')\n\n        if(!/char/i.test(keyType))\n            return rose.suggest(context, -10, \"Choose a key column that contains character data\")\n\n        if(!rose.isSQLNumeric(valType)) {\n            var okOps = ['MAX','MIN']\n\n            if(!_.contains(okOps, op))\n                return rose.suggest(context, -10, op + \" is not supported for non-numeric values, use one of: \" + okOps.join(', ') + \" or select a different value column\")\n        }\n\n        var win = rose.timewindowParam('window', rose.param('mode') === 'tumbling')\n        if(!win.valid)\n            return rose.suggest(context, -10, \"Specify a time window\")\n\n\n        if(keylist && keylist.length > 1)\n            rose.suggest(context, 11)     //-- suggest the current settings\n        else\n            rose.suggest(context, -10, \"List the possible values of the key column in 'key list'. Check below for suggestions with the key list filled in.\")\n\n        if(rose.metadata(key, 'partitionKeyCandidate')) {\n            var unique = rose.metadata(key, 'unique')\n            rose.suggest(context, 10, {keylist: unique.join(',')}, true)\n        }\n    })\n\n    var opCP = rose.compoundParam('operation')\n    var op = opCP && opCP.op\n    var nth = opCP && opCP.nth\n    var opXCP = rose.compoundParam('opExtra')\n    var opX = opXCP && opXCP.op\n    var nthX = opXCP && opXCP.nth\n    var key = rose.colParam('key')     //-- quoted key column name\n    var keylist = rose.param('keylist').split(',')\n    var tumbling = rose.param('mode') === 'tumbling'\n    var aggCol = 'unfold_ticker_aggregate'\n    var aggColA = aggCol + 'A'\n    var aggColB = aggCol + 'B'\n\n    //-- partition keys\n    var pkeys = []\n    rose.repeatParam('parts', function(p) {\n        var pcol = rose.param(p)\n        if(pcol === rose.noColumn) return\n        pkeys.push(pcol)\n    })\n\n    var valCol = rose.param('val')\n    var keyCol = rose.param('key')\n    var xtraCols = _.filter(rose.columnList(), function(c) {\n        if(c === valCol || c === keyCol || c === 'ROWTIME') return false\n        if(rose.param('mode') === 'tumbling') return true\n        if(_.contains(pkeys, c)) return false\n\n        return true\n    })\n\n    /*\n     * Each partition key maps onto itself\n     */\n    var doPKeys = function(subList, win) {\n        _.each(pkeys, function(k) {\n            subList[k] = rose.sqlInColumn(k)\n        })\n    }\n\n    /*\n     * Each extra column is either aggregated or dropped\n     */\n    var doExtras = function(subList, win) {\n        _.each(xtraCols, function(c) {\n            if(opX === 'drop')\n                subList[c] = ''\n            else if(win)\n                subList[c] = rose.aggregateOp(opX, c, nthX, ' OVER \"aWindow\" ', c)\n            else\n                subList[c] = rose.aggregateOp(opX, c, nthX, null, c)\n        })\n    }\n\n    /*\n     * Build the substitution maps, some ops require special cases.\n     * If tumbling, only tumblingSubstitution is used.\n     */\n    var tickerSubstitution = {}\n    var tumblingSubstitution = {}\n    var slidingSubstitution = {}\n\n    tumblingSubstitution[valCol] = ''   //-- cause val column to be dropped\n    doPKeys(tumblingSubstitution, false)\n    doExtras(tumblingSubstitution, false)\n\n    if(tumbling) {\n        tumblingSubstitution[keyCol] = _.map(keylist, function(k) {\n            var arg = 'CASE WHEN ' + key + ' = ' + rose.sqlLiteral(k) + ' THEN ' + rose.sqlInColumn(valCol) + ' ELSE NULL END'\n            return rose.aggregateOp(op, arg, nth, null, k + rose.param('suffix'), true)\n        }).join(', ')\n    } else {\n        //-- the rollup op is the same as the user-specified agg except in the case of count\n        var rollupOp = op\n        if(rollupOp == 'count') rollupOp = 'sum'\n\n        tickerSubstitution['ROWTIME'] = ''\n        tickerSubstitution[valCol] = ''\n        doPKeys(tickerSubstitution, false)\n        doExtras(tickerSubstitution, false)\n\n        slidingSubstitution[valCol] = ''    //-- cause val column to be dropped\n        slidingSubstitution['ROWTIME'] = ''            //-- cause ROWTIME column to be dropped\n        doPKeys(slidingSubstitution, false)\n        doExtras(slidingSubstitution, true)\n\n        switch(op) {\n            case 'average':\n                tickerSubstitution[keyCol] = rose.aggregateOp('sum', valCol, null, null, aggColA) + ',' + rose.aggregateOp('count', valCol, null, null, aggColB)\n\n                tumblingSubstitution[keyCol] = _.map(keylist, function(k) {\n                    var argA = 'CASE WHEN ' + key + ' = ' + rose.sqlLiteral(k) + ' THEN ' + rose.sqlInColumn(aggColA) + ' ELSE NULL END'\n                    var argB = 'CASE WHEN ' + key + ' = ' + rose.sqlLiteral(k) + ' THEN ' + rose.sqlInColumn(aggColB) + ' ELSE NULL END'\n                    var colA = k + rose.param('suffix') + '_A'\n                    var colB = k + rose.param('suffix') + '_B'\n\n                    return rose.aggregateOp('sum', argA, null, null, colA, true) + ', ' + rose.aggregateOp('sum', argB, null, null, colB, true)\n                }).join(', ')\n\n                slidingSubstitution[keyCol] = _.map(keylist, function(k) {\n                    var col = k + rose.param('suffix')\n                    var colA = k + rose.param('suffix') + '_A'\n                    var colB = k + rose.param('suffix') + '_B'\n\n                    return rose.aggregateOp(\"sum\", colA, null, ' OVER \"aWindow\" ') + ' / ' + rose.aggregateOp(\"sum\", colB, null, ' OVER \"aWindow\" ', col)\n                }).join(', ')\n\n                break\n\n            case 'population std deviation':\n            case 'population variance':\n            case 'sample std deviation':\n            case 'sample variance':\n            default:\n                tickerSubstitution[keyCol] = rose.aggregateOp(op, valCol, nth, null, aggCol)\n\n                tumblingSubstitution[keyCol] = _.map(keylist, function(k) {\n                    var arg = 'CASE WHEN ' + key + ' = ' + rose.sqlLiteral(k) + ' THEN ' + rose.sqlInColumn(aggCol) + ' ELSE NULL END'\n                    return rose.aggregateOp(rollupOp, arg, nth, null, k + rose.param('suffix'), true)\n                }).join(', ')\n\n                slidingSubstitution[keyCol] = _.map(keylist, function(k) {\n                    var col = k + rose.param('suffix')\n                    return rose.aggregateOp(rollupOp, col, nth, ' OVER \"aWindow\" ', col)\n                }).join(', ')\n\n                break\n        }\n    }\n\n    var tickerWindowClause\n    var tumblingWindowClause\n    if(tumbling) {\n        tickerWindowClause = rose.timewindowWindowClause('window', [rose.param('key')], true)\n        tumblingWindowClause = 'GROUP BY \"input\".ROWTIME'\n    } else {\n        tickerWindowClause = rose.timewindowWindowClause('refresh', _.union(pkeys,[rose.param('key')]), true)\n        tumblingWindowClause = 'GROUP BY ' + rose.sqlIds('ROWTIME', pkeys)\n    }\n\n    var slidingWindowClause = rose.timewindowWindowClause('window', pkeys, false)\n\n    var tickerView = rose.guideOutput('ticker')\n    var tumblingView = rose.guideOutput('tumbler')\n%>\n\n<% if(tumbling) { %>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(tumblingSubstitution) %>\n    FROM <%= rose.guideInput() %> AS \"input\"\n    <%= tumblingWindowClause %>;\n\n<% } else { /* sliding */ %>\n\n<%= rose.createSqlObj('VIEW', tickerView) %> AS\n    SELECT <%= rose.local('stream') %> <%= key %>, <%= rose.substituteColumnsWithExpressions(tickerSubstitution) %>\n    FROM <%= rose.guideInput() %> AS \"input\"\n    <%= tickerWindowClause %>;\n\n<%= rose.createSqlObj('VIEW', tumblingView) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(tumblingSubstitution) %>\n    FROM <%= tickerView %> AS \"input\"\n    <%= tumblingWindowClause %>;\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(slidingSubstitution) %>\n    FROM <%= tumblingView %> AS \"input\"\n    <%= slidingWindowClause %>;\n\n<% } %>\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Unfold","public":true,"doc":"## Unfold\nUnfold reshapes a table into columns of key-value sets. Selected rows map to keys, and selected columns map to values.\n\nThe unfold operation proceeds as follows.\n\nGiven a stream of the form:\n\n| Rowtime | Browser | Count |\n|1.-- |1.-- |1.-- |\n| 1:01 | IE | 110|\n| 1:03 | Chrome | 290|\n| 2:01 | IE | 90|\n| 2:03 | Chrome | 300 |\n\nAn unfold operation generates columns like the following:\n\n| rowtime window | IE | Firefox | Chrome | Safari |\n|1.-- |1.-- |1.-- |1.-- |\n| <hour 1> | 110 | 230 | 290 | 100 |\n| <hour 2> | 90 | 220 | 300 | 90 |\n\nIn the example above, \"user-agent\" serves as the key column, and \"count\" serves as the value column. For each value in the key column, StreamLab creates a new column and fills in this column with values from the value column. Because you may have multiple values for each key, you need to use an operation to aggregate those values to produce a single value for the unfolded row. For example, if incoming values are counts (as in the example above), you'd want to SUM over the time window. If they're measurements of a continuous value, like a current temperature reading from a sensor, you would likely want to use AVG.\n\nAs rows come in, the StreamLab scrutinizer watches the input stream and lists unique values in the key column (in this example, the user-agent column). Once you select the Unfold operation and pick user-agent as the key column, it will make a suggestion that fills in the 'key list' parameter with the list of unique values observed in the stream. You can then set the rest of the parameters either using the widgets up top or by selecting the fields in the suggestion. You can also enter the key list manually.\n\nA window on rowtime is a common use case.\n\nTo implement an unfold operation:\n\n1. Select a column to be used as a key column. This column has all the column names for the new columns. This column must contain text. StreamLab will automatically identify values from this column for use as keys (new column names).\n1. Select a column to be used as a value column. This column must be numerical. This column provides values for the new columns. This might be counts, temperature readings, pressure readings, and so on.\n1. If desired, enter a column suffix for the new columns. This suffix will make it easy to identify the new columns.\n1. Select an operation to aggregate values for the new columns. This might be an average temperature, or a running total. See *Operations Used in Commands* for more details on these operations.\n1. Select a length and unit for the aggregation window, such as \"1 hour\" or \"15 minutes.\"\n1. Choose rolling or tumbling window type. See below for more information on these.\n1. If desired, either enter the keys manually or let StreamLab fill them in.\n1. Click the + icon to add the command to the Guide script.\n    The results of the script appear in the Output View window.\n\n![](/images/sl/sl_pivot_unfold.png)\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/fold.sql":{"value":"-- Fold Operation\n<%= rose.panel('params') %>\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    rose.localSet('docsDismissed', true);\n\n    rose.param({id: 'keyCol', title: \"new key column\", type: \"string\", defval: \"key\", width: 140, freeze: true});\n    rose.param({id: 'valCol', title: \"new value column\", type: \"string\", defval: \"value\", width: 140, freeze: true});\n    rose.param({id: 'srcCols', title: \"source columns\", type: \"string\", defval: \"\", width: 240, freeze: true});\n    rose.param({id: 'suffix', title: \"column suffix\", type: \"string\", defval: \"_total\", width: 140});\n\n    rose.focusMap({\n        column: [],\n        columnList: ['srcCols'],\n        row: [],\n        start: [],\n        end: [],\n        text: []\n    });\n\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Create two new columns, {{keyCol}} and {{valCol}}, by folding the columns {{srcCols}}, removing the suffix {{suffix}} from the column names\");\n\n\n    rose.subscribe('suggestions', function(context) {\n        var keyCol = rose.param('keyCol');\n        var valCol = rose.param('valCol');\n        var srcCols = rose.param('srcCols');\n\n        if(!keyCol)\n            return rose.suggest(context, -10, \"Enter the name of the new column that will contain the keys\");\n\n        if(!valCol)\n            return rose.suggest(context, -10, \"Enter the name of the new column that will contain the values\");\n\n        if(!srcCols || !rose.validColumnList(srcCols))\n            return rose.suggest(context, -10, \"Enter the source columns: a comma-separated list of columns in the current stream\");\n\n        rose.suggest(context, 1);\n    });\n\n    var keyCol = rose.param('keyCol');\n    var valCol = rose.param('valCol');\n    var srcCols = rose.param('srcCols');\n    srcCols = srcCols ? srcCols.split(',') : [];\n    var suffix = rose.param ('suffix');\n\n    var keys = _.map(srcCols, function(x) {\n        if(!suffix) return x;\n\n        var a = x.lastIndexOf(suffix);\n        if(a === -1) return x;\n\n        return x.slice(0,a);\n    });\n\n    var keyTable = rose.guideOutput('keys');\n    var utilView = rose.guideOutput('util_view');\n%>\n\n-- Create a table that contains all the keys\n<%= rose.createSqlObj('TABLE', keyTable) %>(key VARCHAR(64) primary key, version int);\n<% for(var k=0; k < keys.length; k++) { %>\nINSERT INTO <%= keyTable %> VALUES (<%= rose.sqlLiteral(keys[k]) %>, 1);\n<% } %>\n\n<%= rose.createSqlObj('VIEW', utilView) %> AS\n    SELECT STREAM *, 1 AS version FROM <%= rose.guideInput() %> AS \"input\";\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> kt.key, CASE <%= _.map(keys, function(k, index) {\n        return 'WHEN kt.key = ' + rose.sqlLiteral(k) + ' THEN ' + rose.sqlInColumn(srcCols[index]) }).join(' ') %>\n        ELSE NULL END AS <%= rose.sqlIdentifier(valCol) %>\n    FROM <%= utilView %> AS v JOIN <%= keyTable %> AS kt ON(v.version = kt.version);\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Fold","public":true,"doc":"## Fold\n\nFold lets you convert multiple columns with like values into a single row. For fold, select multiple columns with like values (for example, a series of columns that contain counts for different categories, such as product types or employees). Fold creates two new columns: a key column with values drawn from the column names of selected columns, and a value column with values drawn from selected column values.\n\nTo implement a fold:\n\n 1. Enter a column name for the key column. This will contain the selected columns' names.\n 1. Enter a column name for the value column. This column will contain values drawn from the selected columns.\n 1. Choose or enter source columns. These columns will be combined into the new column. All of these columns should contain the same type of values (counts, temperatures, and so on).\n 1. If desired, enter a column suffix for the new columns. This suffix will make it easy to identify the new columns.\n 1. Click the + icon to add the command to the Guide script.\n 1. The results of the script appear in the Output View window.\n\n![](/images/doc/sl_pivot_fold.png)\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/sortColumns.sql":{"value":"-- Sort Columns Operation\n<%= rose.panel('params') %>\n<%\n    //-- some of the synonym types can probably be removed, eg DOUBLE PRECISION for DOUBLE\n    const typeCodes = { \"TIMESTAMP\":1, \"DATE\":1, \"TIME\":2, \"BOOLEAN\":5,\n                      \"TINYINT\":10, \"SMALLINT\":10, \"INT\":10, \"INTEGER\":10, \"BIGINT\":10,\n                      \"NUMERIC\":15, \"DECIMAL\":15, \"DEC\":15,\n                      \"REAL\":20, \"DOUBLE\":20, \"DOUBLE PRECISION\":20,\n                      \"CHAR\":30, \"CHARACTER\":30, \"VARCHAR\":30,\n                      \"BINARY\":40, \"VARBINARY\":40 }\n\n    const SORT_KEY_NAMES = 'column name'\n    const SORT_KEY_NAMES_CASE_INSENSITIVE = 'column name (ignore case)'\n    const SORT_KEY_TYPES = 'data type'\n    const sortOptions = [SORT_KEY_NAMES, SORT_KEY_NAMES_CASE_INSENSITIVE, SORT_KEY_TYPES]\n    const sortDirs = ['forward', 'reverse']\n\n    rose.localSet('docsDismissed', true)\n\n    //-- TODO: add order by cardinality option when supported by scrutinizer and RTS\n    //-- TODO: can we add order by ad-hoc ordering (give user a column list and let him edit it)\n    //-- TODO: allow order by multiple sort keys\n\n    rose.param({id: 'sortby', title: 'sort columns by', repeats: false, type: \"choice\", values: sortOptions, defval: SORT_KEY_NAMES, width: 300})\n\n    rose.param({id: 'direction', title: 'order', repeats: false, type: \"choice\", values: sortDirs, defval: sortDirs[0], width: 300})\n\n\n    rose.summary(e => true, \"Sort columns by {{sortby}} in {{direction}} order.\");\n\n    rose.subscribe('suggestions', context => rose.suggest(context, 1))\n\n    let rcl = rose.columnList()\n    let sourceColumns = [\"*\"]\n    let hasRowtime = false\n\n    if(rcl === null) {\n        sourceColumns = [\"*\"]\n    } else {\n        //-- remove ROWTIME if it's first in the list of columns\n        if(rcl[0] === 'ROWTIME') {\n            hasRowtime = true\n            sourceColumns = rcl.slice(1)\n        } else\n            sourceColumns = rcl\n    }\n\n    switch(rose.param('sortby')) {\n        case SORT_KEY_TYPES:         //-- sort by case insensitive name within type code\n            const tc = col => typeCodes[rose.metadata(col, 'type')]\n\n            sourceColumns.sort((a, b) => tc(a) - tc(b) || a.toLowerCase().localeCompare(b.toLowerCase()))\n            break\n            \n        case SORT_KEY_NAMES_CASE_INSENSITIVE:\n            sourceColumns.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()))\n            break\n\n        case SORT_KEY_NAMES:\n        default:\n            sourceColumns.sort((a, b) => a.localeCompare(b))\n            break\n    }\n\n    if(rose.param('direction') === 'reverse') \n        sourceColumns.reverse()\n\n    if(hasRowtime)\n        sourceColumns.unshift('ROWTIME')\n\n    let outputColumns = sourceColumns.map(c => `\"input\".${rose.sqlIdentifier(c)}`).join(', ')\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= outputColumns %>\n    FROM <%= rose.guideInput() %> AS \"input\"\n    ;\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Sort Columns","public":true,"doc":"## Sort Columns\nThe Sort Columns command lets you re-order columns across the StreamLab display so that related columns are close together. There are currently three ways to re-order:\n\n* By column name: columns are ordered from left to right by column name\n* By column name, case insensitive: the sorting ignores case of the column name\n* By data type: columns are ordered by column name within data type. Types are ordered as:\n    * TIMESTAMP / DATE\n    * TIME\n    * BOOLEAN\n    * INTEGER (including TINYINT, SMALLINT, BIGINT)\n    * NUMERIC (including DECIMAL)\n    * REAL (including FLOAT, DOUBLE) \n    * CHAR / VARCHAR \n    * BINARY / VARBINARY\n\nThe order can be **forward** or **reverse**.\n\nIn streaming pipelines, `ROWTIME` is always treated as the first column\n\n![](/images/doc/sl_sortColumns_params.png)\n\nOnce you make your selection, a suggestion appears in the Suggestion list. Click the + button to add the suggestion to the Script list.\n\nThe re-ordered columns appear in the Output view - either sorted by name:\n\n![](/images/doc/sl_sortColumns_byname.png)\n\nOr sorted by type:\n\n![](/images/doc/sl_sortColumns_bytype.png)\n\nThe generated SQL looks like this:\n\n![](/images/doc/sl_sortColumns_sql.png)\n\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/aggregate.sql":{"value":"-- Aggregate Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true)\n\n\n    //-- common for row windows\n    const nRows = 'N rows preceding'\n    const curRow = 'current row'\n    const unboundRow = 'unbounded preceding'\n    const rowTypeFromArr = [nRows, unboundRow]       //-- no point selecting current row for start\n    const rowTypeUntilArr = [curRow, nRows]          //-- meaningless to select unbounded for offset\n\n    rose.param({id: 'mode', title: \"mode\", type: \"choice\", values: ['sliding', 'tumbling'], defval: 'sliding', width: 100})\n    //-- tumbling window frame must be logical (time based for now) - sliding may be row based\n    \n    rose.param({id: 'frame', title: \"type\", type: \"choice\", values: ['time', 'rows'], defval: 'time', width: 70\n        //--    ,visibleWhen: () => rose.param('mode') === 'sliding'\n    })\n    \n    //-- get tumbling time period for time windows\n    rose.param({id: 'tumbletime'\n            , title: 'time period'\n            , repeats: false, type: 'timewindow', defval: \"1 minute\"\n            , width: 170 //--518 to match three windows\n            , visibleWhen: () => rose.param('frame') === 'time' && rose.param('mode') === 'tumbling'\n    })\n    //-- get start time spec for sliding time windows\n    rose.param({id: 'timestart'\n            , title: 'time from'\n            , repeats: false, type: 'timewindow', defval: \"1 minute\"\n            , width: 170\n            , visibleWhen: () => rose.param('frame') === 'time' && rose.param('mode') === 'sliding'\n    })\n\n    //-- get offset time spec for time windows - only applies to sliding time windows\n    rose.param({id: 'timeend', title: 'time until', repeats: false, type: 'timewindow', defval: \"0 minute\", width: 170\n           , visibleWhen: () => rose.param('frame') === 'time' && rose.param('mode') === 'sliding'\n    })\n\n    //-- get hopping period - only applies to sliding time windows\n    rose.param({id: 'hoptime', title: 'hopping period', repeats: false, type: 'timewindow', defval: \"0 minute\", width: 170\n            , visibleWhen: () => rose.param('frame') === 'time' && rose.param('mode') === 'sliding' \n    })\n\n\n    //-- get start row spec for row windows only - keep total width same as time params to avoid distracting redraw of later params\n    rose.param({id: 'rowstarttype', title: 'row window from', repeats: false, type: 'choice', width: 175\n            , values:rowTypeFromArr, defval: nRows\n            , visibleWhen: () => rose.param('frame') === 'rows' && rose.param('mode') === 'sliding'\n    })\n\n    rose.param({id: 'rowstart', title: 'rows from', repeats: false, type: 'integer', defval: 1, from: 1, width: 90\n            , visibleWhen: () => rose.param('frame') === 'rows' && rose.param('rowstarttype') === nRows && rose.param('mode') === 'sliding'\n    })\n\n    //-- get offset row spec for row windows\n    rose.param({id: 'rowendtype', title: 'row window until', repeats: false, type: 'choice', width: 165\n            , values:rowTypeUntilArr, defval: curRow\n            , visibleWhen: () => rose.param('frame') === 'rows' && rose.param('mode') === 'sliding'\n    })\n\n    rose.param({id: 'rowend', title: 'rows until', repeats: false, type: 'integer', defval: 0, from: 0, width: 90\n           , visibleWhen: () => rose.param('frame') === 'rows' && rose.param('rowendtype')  === nRows  && rose.param('mode') === 'sliding'\n    })\n\n\n    rose.param({id: 'aggs', title: 'aggregation', repeats: true, type: 'aggregate', defval: '', skipColumn: 'ROWTIME',\n        columnsFunc: function() {\n            let newCols = []\n            if(rose.countRepeatParam('aggs') > 1)\n                rose.repeatParam('aggs', (p, index) => newCols.push(rose.compoundParam(p).newcol))\n\n            return _.union(rose.columnList(false), newCols)\n        }, width: 511\n    })\n    rose.param({id: 'groups', title: 'group by', repeats: true, type: 'choice', width: 120,\n        valuesFunc: () => rose.columnListPlusNone(),\n        visibleWhen: () => rose.param('mode') === 'tumbling',\n        values: [\"table not available\"]\n    })\n\n    rose.param({id: 'parts', title: 'partition by', repeats: true, type: 'choice', width: 120,\n        valuesFunc: () => rose.columnListPlusNone(),\n        visibleWhen: () => rose.param('mode') !== 'tumbling',\n        values: [\"table not available\"]\n    })\n\n    \n    rose.param({\n        id: \"session_on\",\n        title: \"Session?\",\n        type: \"boolean\",\n        defval: false,\n        width: 90,\n        tooltip: \"Whether or not to include SESSION partitioning\",\n        visibleWhen: () => (rose.param('mode') !== 'tumbling'),\n    })\n\n    var _isSessionOn = function() { return (rose.param('session_on') && rose.param('mode') !== 'tumbling')}\n    \n/*\n    var _isSessionOn = function() {\n        if (rose.param('mode') === 'tumbling') return false\n\n        rose.repeatParam('sessionparts', function(p, index) {\n            var pcol = rose.param(p)\n            if(pcol !== rose.noColumn) return true\n        })\n\n        return false\n    }\n*/ \n    //-- if session window, there must be at least one column selected here\n\n    rose.param({id: 'sessionparts', title: 'session on', repeats: true, type: 'choice', width: 120,\n        valuesFunc: () => rose.columnList(),\n        visibleWhen: _isSessionOn,\n        values: [\"table not available\"]\n    })\n\n    //-- rather than force the user to add a SESSION() analytic function, we add it for him automatically\n    //-- there is no case for a session window without this functiuon\n\n    rose.param({id: 'session_id_column', \n        title: 'id column', \n        type: 'string',\n        tooltip: \"Enter a name for the session_id column associated with this session window\",\n        defval: \"session_id\",\n        width: 100,\n        visibleWhen: _isSessionOn,\n    })\n\n    rose.param({\n        id: \"session_start_on\",\n        title: \"start when?\",\n        type: \"boolean\",\n        defval: false,\n        width: 90,\n        tooltip: \"Whether or not to include START WHEN clause\",\n        visibleWhen: _isSessionOn\n    })\n\n\n    rose.param({id: 'session_start_clause', title: 'start when', repeats: true, type: 'clause',\n        hasConj: true, hasColumn: true, hasThen: false, insertComma: false,\n        tooltip: \"Enter an expression for SESSION ... START WHEN\",\n        visibleWhen: () => (rose.param('session_on') && rose.param('mode') !== 'tumbling') && rose.param('session_start_on'),\n        defval: \"\", columnsFunc: () => rose.columnList(), width: 400\n    })\n\n\n    rose.param({\n        id: \"session_end_on\",\n        title: \"end when?\",\n        type: \"boolean\",\n        defval: false,\n        width: 90,\n        tooltip: \"Whether or not to include END WHEN clause\",\n        visibleWhen: _isSessionOn,\n    })\n\n    rose.param({id: 'session_end_clause', title: 'end when', repeats: true, type: 'clause',\n        hasConj: true, hasColumn: true, hasThen: false, insertComma: false,\n        tooltip: \"Enter an expression for SESSION ... END WHEN\",\n        visibleWhen: () => (rose.param('session_on') && rose.param('mode') !== 'tumbling') && rose.param('session_end_on'),\n        defval: \"\", columnsFunc: () => rose.columnList(), width: 400\n    })\n\n    //-- explicitly select whether there is a timeout after clause\n\n    rose.param({\n        id: \"session_timeout_on\",\n        title: \"timeout?\",\n        type: \"boolean\",\n        defval: false,\n        width: 90,\n        tooltip: \"Whether or not to include SESSION ... TIMEOUT AFTER\",\n        visibleWhen: _isSessionOn,\n    })\n\n    rose.param({\n        id: \"session_timeout\",\n        title: \"Timeout after\",\n        repeats: false, type: 'timewindow', defval: \"1 minute\",\n        width: 170,\n        tooltip: \"Specifies the time out for sessions\",\n        //-- TODO protect against change to trueVal ('Yes')\n        visibleWhen: () => (rose.param('session_on') && rose.param('mode') !== 'tumbling') && rose.param('session_timeout_on')\n    })\n\n\n\n    rose.param({id: 'remaining', title: \"unaggregated columns\", type: \"choice\", defval: 'drop', width: 200,\n        values: ['drop', 'use the first value', 'use the last value', 'use the max value', 'use the min value'],\n        visibleWhen: () => rose.param('mode') === 'tumbling'\n    })\n\n    function hasGroups(r) {\n        var gotOne = false\n\n        r.repeatParam('groups', function(p, index) {\n            var pcol = r.param(p)\n            if(pcol !== rose.noColumn) gotOne = true\n        })\n\n        return gotOne\n    }\n\n    function hasParts(r) {\n        var gotOne = false\n\n        r.repeatParam('parts', function(p, index) {\n            var pcol = r.param(p)\n            if(pcol !== rose.noColumn) gotOne = true\n        })\n\n        return gotOne\n    }\n\n    const isTumbling = rose.param('mode') === 'tumbling'\n    const isRows = rose.param('frame') === 'rows'\n    const isTime = rose.param('frame') === 'time'\n\n    const sumGroups = \"Group rows using the column(s) {{groups}}. \"\n    const sumParts = \"For each unique value in the column(s) {{parts}}: \"\n\n    let sumSession\n    if (_isSessionOn) {\n        sumSession = \"Session on {{sessionparts}} \"\n        if (rose.param('session_start_on')) sumSession += 'start when {{session_start_clause}} '\n        if (rose.param('session_end_on')) sumSession += 'start when {{session_end_clause}} '\n        if (rose.param('session_timeout_on')) sumSession += 'timeout after {{session_timeout}} '\n        sumSession += \" returning {{session_id_column}}, \"\n     }\n\n    const sumAgg = \"perform the aggregations: {{aggs}} \"\n\n    let sumWindow\n    const sumDrop = \"Drop the columns that are not listed in the aggregations.\"\n    const sumRem = \"For columns not listed in the aggregations, {{remaining}}.\"\n\n    var winhop\n    var winend\n    var winstart\n\n    if (isRows) {\n        if (!isTumbling) {\n            if (rose.param('rowstarttype') === nRows) {\n                sumWindow = \"Over a {{mode}} {{frame}} window {{rowstarttype}} (N = {{rowstart}}) \"\n            } else {\n                sumWindow = \"Over a {{mode}} {{frame}} window from {{rowstarttype}} \"\n            }\n\n            //-- add until clause, unless current row or rows 0 preceding\n\n            switch (rose.param('rowendtype')) {\n                case nRows:\n                    sumWindow += \"until {{rowendtype}} (N = {{rowend}}) \"\n                    break;\n\n                case curRow:\n                    break;\n\n                default:\n                    sumWindow += \"until {{rowendtype}} \"\n            }\n        }\n    }\n    else {\n\n        if(isTumbling) {\n            winstart = rose.timewindowParam('tumbletime',isTumbling)\n            sumWindow = \"Over a {{mode}} time window each {{tumbletime}} \"\n        } else {\n            winstart = rose.timewindowParam('timestart',isTumbling)\n            winend = rose.timewindowParam('timeend',false)\n            winhop = rose.timewindowParam('hoptime',false)\n\n            sumWindow = \"Over a {{mode}} {{frame}} window from {{timestart}} \"\n            sumWindow += \" until {{timeend}} \"\n            sumWindow += \" hopping every {{hoptime}} \"\n\n        } \n    } \n\n\n    rose.summary(function(e) {\n        return isTime && isTumbling && hasGroups(rose) && rose.param('remaining') === 'drop'\n    }, sumGroups + sumWindow +sumAgg + sumDrop)\n\n    rose.summary(function(e) {\n        return isTime && isTumbling && !hasGroups(rose) && rose.param('remaining') === 'drop'\n    }, sumWindow + sumAgg + sumDrop)\n\n    rose.summary(function(e) {\n        return isTime && isTumbling && hasGroups(rose)\n    }, sumGroups + sumWindow + sumAgg + sumRem)\n\n    rose.summary(function(e) {\n        return isTime && isTumbling && !hasGroups(rose)\n    }, sumWindow + sumAgg + sumRem)\n\n    //-- must be sliding\n    rose.summary(function(e) {\n        return hasParts(rose) || rose.param('session_on')\n    }, sumParts + sumSession + sumWindow + sumAgg)\n\n    rose.summary(function(e) {\n        return true\n    }, sumWindow + sumAgg + sumSession)\n\n    //-- get groups / parts / sessionparts into convenient arrays for error checking and SQL generation\n\n    let keys = []\n    let sessionKeys = []\n\n    if(isTumbling) {\n        rose.repeatParam('groups', function(p) {\n            var pcol = rose.param(p)\n            if(pcol === rose.noColumn) return\n            keys.push(pcol)\n        })\n    } else {\n        rose.repeatParam('parts', function(p) {\n            var pcol = rose.param(p)\n            if(pcol === rose.noColumn) return\n            keys.push(pcol)\n        })\n\n        rose.repeatParam('sessionparts', function(p) {\n            var pcol = rose.param(p)\n            if(pcol === rose.noColumn) return\n            sessionKeys.push(pcol)\n        })\n\n    }\n\n    rose.subscribe('suggestions', function(context) {\n        var cols = rose.columnList(false, 'groupable')\n        if(!cols || !cols.length)\n            return rose.suggest(context, -100, 'There are no numerical or text columns. Use Cast to change column types.')\n\n        //-- we need local variables rather than referencing variables in the global scope\n        var isTumbling = rose.param('mode') === 'tumbling'\n        var isRows = rose.param('frame') === 'rows'\n        var winhop\n        var winend\n        var winstart\n\n        var errs = \"\"\n\n        // canonicalise time windows to seconds\n\n        var winSecs = function(w) {\n            var secs \n            switch (w.unit) {\n                case 'DAY':\n                    secs = w.len * 24*60*60\n                    break\n                case 'HOUR':\n                    secs = w.len * 60*60\n                    break\n                case 'MINUTE':\n                    secs = w.len * 60\n                    break\n                case 'SECOND':\n                    secs = w.len\n                    break\n                default:\n                    secs = w.len //-- for debug only\n            }\n            return secs\n           \n        }\n\n        //-- return message if start window is less than end window\n        var compareWindows = function(sw, ew, msg) {\n            var ssecs = winSecs(sw)\n            var esecs = winSecs(ew)\n            return (ssecs < esecs ? msg /*+ \": \"+ssecs+\" < \" +esecs+\". \"*/ : \"\")\n        }\n\n        const effectiveRowsFn = function(rtype, rownum) {\n            switch(rose.param(rtype)) {\n                case nRows:\n                    return parseInt(rose.param(rownum))\n\n                case unboundRow:\n                    return Number.MAX_SAFE_INTEGER\n\n                case curRow:\n                    return 0\n            }\n        }\n\n        if(isRows) {\n            if(isTumbling) {\n                errs += 'Cannot define tumbling row-based window. '\n            } else {\n\n                if (effectiveRowsFn('rowendtype','rowend') > effectiveRowsFn('rowstarttype','rowstart'))\n                    errs += 'rows until offset is greater than start row. '\n            }\n        } else {\n            if(isTumbling) {\n                winstart = rose.timewindowParam('tumbletime', isTumbling)\n                errs += (winstart.len > 0) ? \"\" : \"Specify tumbling time period. \"\n            } else {\n                winstart = rose.timewindowParam('timestart', isTumbling)\n\n                errs += (winstart.len > 0) ? \"\" : \"Specify sliding time window. \"\n\n                winend = rose.timewindowParam('timeend',true)\n                winhop = rose.timewindowParam('hoptime',true)\n                //-- check offset LE start time\n                errs += compareWindows(winstart, winend, \"Offset is greater than start time. \")\n                //-- check hopping LE start time\n                errs += compareWindows(winstart, winhop, \"Hopping period is greater than start time. \")\n            }\n\n        }\n\n        //-- Check Nth VALUE while tumbling\n        var foundOne = false\n        if(isTumbling) {\n            rose.repeatParam('aggs', function(p, index) {\n                var agg = rose.compoundParam(p)\n                if(foundOne) return\n\n                if(/nth value/i.test(agg.op)) {\n                    foundOne = true\n                    errs += 'Nth value aggregations are not compatible with a tumbling window. '\n                }\n            })\n        }\n\n        var agErrs = rose.checkAggregates('aggs')\n        if(agErrs)\n            errs += \"Check aggregations: \" + agErrs\n\n        if (rose.param('session_on')) {\n\n            if (!rose.param('session_start_on') && !rose.param('session_end_on') && !rose.param('session_timeout_on')) {\n                errs += \"For a session window you must specify at least one of START WHEN, END WHEN or TIMEOUT AFTER. \"\n            }\n            /* TODO this error is always firing regardless, but showing no overlap. \n            var overlapKeys = keys.filter(x => sessionKeys.includes(x))\n            if (overlapKeys.length > 0) {\n                errs += \"You must not specify the same column(s) as both a partition key and a session key: \"+ overlapKeys.join(', ')\n            }\n            */\n        }\n\n        if(errs)\n            rose.suggest(context, -100, errs)\n        else \n            rose.suggest(context, 1);     //-- suggest the current settings\n    })\n\n\n    var substitution = {}\n\n    rose.repeatParam('aggs', function(p, index) {\n        var agg = rose.compoundParam(p)\n\n        substitution[agg.newcol] = rose.aggregateOp(agg.op, agg.col, agg.nth) + (isTumbling ? '' : ' OVER \"aWindow\"')\n\n        //-- sunil says no   keys.push(agg.col)\n    })\n\n\n\n    if(isTumbling) {\n        var remaining = rose.param('remaining')\n\n        for(const c of rose.columnList()) {\n            if(c === 'ROWTIME') {\n                substitution[c] = ''    //-- remove ROWTIME\n                continue\n            }\n\n            if(substitution[c]) continue\n\n            if(_.contains(keys, c))\n                substitution[c] = rose.sqlInColumn(c)\n            else switch(remaining) {\n                    case 'drop':\n                        substitution[c] = ''\n                        break\n\n                    case 'use the first value':\n                        substitution[c] = 'FIRST_VALUE(' + rose.sqlInColumn(c) + ')  AS ' + rose.sqlIdentifier(c)\n                        break\n\n                    case 'use the last value':\n                        substitution[c] = 'LAST_VALUE(' + rose.sqlInColumn(c) + ')  AS ' + rose.sqlIdentifier(c)\n                        break\n\n                    case 'use the max value':\n                        substitution[c] = 'MAX(' + rose.sqlInColumn(c) + ')  AS ' + rose.sqlIdentifier(c)\n                        break\n\n                    case 'use the min value':\n                        substitution[c] = 'MIN(' + rose.sqlInColumn(c) + ')  AS ' + rose.sqlIdentifier(c)\n                        break\n            }\n        }\n    } else { //-- sliding\n\n        //-- sneak in the session() function if needed (and if there are session keys)\n\n        if (_isSessionOn && sessionKeys.length > 0) {\n            substitution[rose.param('session_id_column')] = 'SESSION() OVER \"aWindow\" AS '+ rose.sqlIdentifier(rose.param('session_id_column'))\n        }\n\n        substitution['ROWTIME'] = ''\n    }\n\n    var windowClause = \"\"\n\n    var rowWindowClause = function(rtype, rownum, untilFlag) {\n        var rtypeval = rose.param(rtype)\n        var rownumval = rose.param(rownum)\n\n        if(untilFlag && (rtypeval === curRow || (rtypeval === nRows && rownumval === '0'))) {\n            //-- no clause needed - current / 0 'until row' specified\n            return \"\"\n        }\n\n        return (rtypeval === nRows) ? `${rownumval} PRECEDING` : rtypeval\n    }\n\n    function make_filter(prefix, param_id, rejecting) {\n        var wc = []\n\n        rose.repeatParam(param_id, function(p, index) {\n            var clause = rose.compoundParam(p)\n\n            if (clause.col !== rose.noColumn) {\n                //-- exclude no-column expressions\n                if(index > 0) {\n                    wc.push(' ')\n                    wc.push(clause.conj.toUpperCase())\n                    wc.push(' ')\n                }\n\n                wc.push(rose.sqlInColumn(clause.col))\n                wc.push(' ')\n                var op = rose.clauseOp(clause.op)\n                wc.push(op)\n                wc.push(' ')\n\n                switch(op) {\n                    case 'BETWEEN':\n                        wc.push(rose.literal(clause.val))\n                        wc.push(' AND ')\n                        wc.push(rose.literal(clause.val2))\n                        break\n\n                    case 'IN':  //-- expecting a comma-separated list\n                    case 'NOT IN':\n                        var sp = _.map(clause.val.split(/\\s*,\\s*/), function(x) { return rose.literal(x) })\n                        wc.push('(' + sp.join(', ') + ')')\n                        break\n\n                    case 'IS NULL':\n                    case 'IS NOT NULL':\n                    case 'IS TRUE':\n                    case 'IS FALSE':\n                        break\n\n                    default:\n                        wc.push(rose.literal(clause.val))\n                        break\n                }\n            }\n        })\n\n        if (wc.length == 0) {\n            return ''\n        } else {\n            if (rejecting) {\n                wc.unshift('NOT (')\n                wc.push(')')\n            }\n            return  prefix+' '+wc.join('')+' '\n        }\n\n    }\n\n    var intervalbuilder = function(tWin) {\n        return 'INTERVAL ' + rose.sqlLiteral(tWin.len) + ' ' + tWin.unit        \n    }\n\n    var sessionClause = ''\n\n    if (rose.param('session_on') && sessionKeys.length > 0) {\n        if (keys.length == 0) {\n            sessionClause += 'PARTITION BY '\n        }\n        sessionClause += 'SESSION ON '\n        const y = _.map(sessionKeys, k => rose.sqlInColumn(k))\n        sessionClause +=  y.join(', ') + ' '\n        \n        if (rose.param('session_start_on')) {\n            sessionClause += make_filter('START WHEN','session_start_clause', false)\n        }\n        if (rose.param('session_end_on')) {\n            sessionClause += make_filter('END WHEN', 'session_end_clause', false)\n        }\n        if (rose.param('session_timeout_on')) {\n            sessionClause += 'TIMEOUT AFTER '+ intervalbuilder(rose.timewindowParam('session_timeout',false))+' '\n        }\n    }\n\n    if (isRows) {\n        var preamble = 'WINDOW \"aWindow\" AS ('\n\n        if (keys.length == 0) {\n            //-- add this because there is no separate partition key being added\n            preamble += 'PARTITION BY '\n            const x = _.map(keys, k => rose.sqlInColumn(k))\n            preamble +=  x.join(', ') + ' '\n        }\n\n        if (sessionKeys.length > 0) {\n            preamble += sessionClause\n        }\n\n        var startclause = rowWindowClause('rowstarttype','rowstart',false)\n        var endclause = rowWindowClause('rowendtype', 'rowend', true)\n\n        if (endclause === \"\")\n            windowClause = preamble + 'ROWS ' + startclause + ')'\n        else\n            windowClause = preamble + 'ROWS BETWEEN ' + startclause + ' AND ' + endclause + ')'\n    }\n    else\n    {\n\n        if (isTumbling) {\n            windowClause = rose.timewindowWindowClause('tumbletime', keys, isTumbling)\n        } else {\n            windowClause = rose.timewindowWindowClause('timestart', keys, isTumbling)\n\n            if (sessionClause.length > 0) {\n                //-- insert the session clause here - after the partition clause and before RANGE\n                windowClause = windowClause.replace('RANGE', sessionClause+' RANGE') \n            }\n            if (winhop.len > 0) {\n                //-- insert the ORDER BY clause\n                var hopper = 'ORDER BY STEP(\"input\".ROWTIME BY '+intervalbuilder(winhop)+') RANGE'\n                windowClause = windowClause.replace('RANGE', hopper)\n            }\n            if (winend.len > 0) {\n                //-- insert BETWEEN\n                windowClause = windowClause.replace('RANGE','RANGE BETWEEN')\n                //-- insert the ending time\n                var ender = 'PRECEDING AND ' + intervalbuilder(winend) + ' PRECEDING'\n                windowClause = windowClause.replace('PRECEDING', ender)\n            }\n        }\n    }\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(substitution) %>\n    FROM <%= rose.guideInput() %> AS \"input\"\n    <%= windowClause %> ;\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Aggregate","public":true,"doc":"## Aggregate\nCreate one or more new columns with the result of aggregations performed over a time window.\n\nThe Aggregate analytic lets you make calculations on a column of numerical data, such as the sum, the average, the maximum value, the minimum value, the first value, or the last value. You can also choose statistical formulas such as population variance, population standard deviation, or sample variance. See [Aggregation Operations](#agg_opps) below.\n\nBecause StreamLab works with streaming data, you first need to designate a window across which you will perform the aggregation.\n\nYou can designate windows as _sliding_ or _tumbling_.\n\n_Sliding windows_ display data continuously. Each row contains one or more running aggregations for the specified time period. See [Sliding Windows](#sliding) below. You can define sliding windows as [time-based](#timebased) or [row-based](#rowbased). You can apply a [hopping period](#hopping-period) to time-based windows. You can apply [partitions](#partitions) and [sessions](#sessions) to sliding windows.\n\n_Tumbling windows_ emit one aggregated row for each defined interval. See [Tumbling Windows](#tumbling) below.\n\nFor tumbling windows, you can also group aggregations into categories, such as departments, industries, regions, states, and so on, using the Group By option, including grouping results by multiple categories, such as region, then department (use the + to add additional grouping columns).\n\nYou can apply multiple aggregations by using the + button in the right corner of the aggregation section of the Aggregate tab.\n\nFor more information on aggregate functions, <a href=\"https://docs.sqlstream.com/sql-reference-guide/built-in-functions/aggregatefunctions/\" target=\"\\_blank\">see the topic Aggregate Functions in the s-Server Streaming SQL Reference Guide</a>.\n\n### Implementing an Aggregate Analytic\n\nTo implement a Aggregate analytic.\n\n1. Select a mode for the aggregation, [sliding](#sliding) or [tumbling](#tumbling). (See definitions below.)\n2. Select a length and unit for the aggregation window, such as \"1 hour\" or \"15 minutes\" or \"200 rows.\"\n3. Select a column to aggregate. This column must contain numerical data.\n4. Select an operation to aggregate values for the new column. This might be an average temperature, or a running total. See [Aggregation Operations](#agg_opps) below. You can add multiple analytics by using the + button.\n5. Enter a column name for the resulting column or columns.\n\n    For *sliding windows*, you can also choose to group the column's results. To do so, choose a column with a limited set of values, such as region, department, product line, and so on. For time-based sliding windows, you can use time until to designate a time period that ends before the current row. See [Using Time Until with Time-based Sliding Windows](#time-until) below. You can also choose to have the window hop forward once the stream reaches a designated time period. This means that, for example, rows will clear out and start accumulating anew once you reach the 5 minute mark for the hopping period. See [Using a Hopping Period with Time-based Sliding Windows](#hopping-period) below. You can partition all sliding windows by column. See [Partitioning Sliding Windows](#partitions) below. You can also use sessions for sliding windows. See [Using Sessions](#sessions) below.\n\n    For *tumbling windows* (which display data at specified intervals), you need to choose what to do with other columns: either drop these (so that only aggregated columns display), use the first value in the window, or use the last value in the window. With tumbling windows, you can also choose to apply a GROUP BY using a column of limited values. See [Grouping Tumbling Windows](#group-tumbling-windows) below.\n\n6. Click the + icon to add the command to the Guide script.\n7. The results of the script appear in the Output View window.\n\n<a name=\"sliding\"></a>\n### Using Sliding Windows\n\nAll streaming rows have a timestamp called ROWTIME. This means that you can tell StreamLab \"aggregate all the rows in the past hour\" or \"aggregate all the rows in the past minute\" and so on. Long window frames may affect performance, so experiment accordingly.\n\nSliding windows display data continuously. Each row contains one or more running aggregations for the specified time period. In the illustration below, avg_order and max_order are calculated using all data in the window frame.\n\n![sliding-window](/images/doc/sliding-window.png)\n\n<a name=\"timebased\"></a>\n#### Using Time-based Sliding Windows\n\nTime-based sliding windows identify groups of rows based on a specified time period in relation to the current row.\n\nYou define time-based windows in terms of 1) a time when the window begins. 2) a time when the window ends. 3) whether or not the window should \"hop.\" Hopping windows accumulate data in a specified time period (1 minute, 5 minutes, 1 hour) and then reset once the time period has elapsed.\n\nSliding windows emit one row for every row that enters the query (through a simple INSERT, a pump or an external source accessed by a foreign stream). The window frame of a sliding window moves along one row at a time. Rows exit the window as they move out of the defined frame. If you define a window as beginning five minutes ago, rows move out of the window once their timestamp is greater than 5 minutes past the current row. If you define a window as 200 rows, rows move out of the window once the 201st row enters the window.\n\n![sl_aggregate-sliding-time](/images/doc/sl_aggregate-sliding-time.png)\n\nFor more information on time-based sliding windows, see <a href=\"https://docs.sqlstream.com/sql-reference-guide/select-statement/window-clause/#time-based-sliding-windows\" target=\"\\_blank\"> see the topic Using Time-Based Sliding Windows in the s-Server Streaming SQL Reference Guide</a>.\n\n<a name=\"time-until\"></a>\n#### Using Time Until with Time-based Sliding Windows\n\nBy default, windows have an upper bound of the current row. For some calculations, you will want to exclude the current row by designating a window that starts before the current row. Otherwise, a given calculation may miss additional rows that come in with the same ROWTIME as the current row, since StreamLab begins emitting output rows as soon as the current row hits its system. Using time untilensures that you have captured all rows with the same ROWTIIME in a calculation.\n\nHowever, when you define windows this way, youintroduce some latency. In cases where it is not important to calculate rows with the same rowtime, you can use the default upper bound.\n\nWindows that use time until let you exclude the current row from calculations such as [AVG](https://docs.sqlstream.com/sql-reference-guide/built-in-functions/avg/) or [MAX](https://docs.sqlstream.com/sql-reference-guide/built-in-functions/max/). This makes statistical tools like Bollinger bands or the naive bayes classifier statistically valid.\n\nIn the illustration below, values for the row with a rowtime of '2019-03-30 03:05:30.0' include rows fro. '2019-03-30 03:00:30.0' t. '2019-03-30 03:04:30.0', but do not include the current row. If no data is available for the window, as in the first row, values return null.\n\n![offset-window](/images/doc/offset-window.png)\n\n<a name=\"hopping-period\"></a>\n#### Using a Hopping Period with Time-based Sliding Windows\n\nWhen you designate a _hopping period_, the window will slide forward at the top of every the designated hopping periodROWTIMEs in the 3:00 hour will accumulate in the window until a row arrives with a ROWTIME of 4:00 or later. At that point, the window starts over; the first calculation will include only one row, the next two rows, and so on, until a row arrives with a ROWTIME of 5:00 or later. When you use a hopping window with COUNT, for example, counts will go up for the entire hour, then start at zero at the beginning of the new hour. Data from the previous hour is \"dropped\" from aggregation.\n\nHopping windows are particularly useful for aggregations like AVG, VARIANCE, STDDEV on large time windows (such as hours, days, or weeks) on high datarate streams.\n\nHopping windows have significant benefits.\n\n - They reduce the amount of system resources required to maintain the window, since the window only needs to maintain aggregated history for each time interval (1 hour in the example above).\n - When used with an offset, such as RANGE BETWEEN INTERVAL '60' MINUTE PRECEDING AND INTERVAL '1' MINUTE PRECEDING, the results for each input row are computed on a window that excludes data from the current row. This is highly desirable since any anomaly in streaming data does not adversely impact computation of Bollinger bands or Naive Bayes classifiers. We recommend using hopping windows with an offset. The offset makes both ends of a window frame hop forward in a 1 minute interval. That is, as each row arrives for the current minute interval, it does not contribute to the aggregation results for that row since its not in the window frame for the current row.\n - When used without an offset, results for hopping windows are computed for each input row with zero latency.\n\nThe illustration below shows the results of a query run on the view defined above. In the illustration, calculations for the first 9 rows include rows from '2019-03-30 03:02:00.0' to '2019-03-30 03:59:45.0'. Once a row arrives later than '2019-03-30 03:59:59.999', calculations reset to newly arriving rows. In the last 5 rows, calculations include rows from '2019-03-30 04:02:00.0' to '2019-03-30 04:18:00.0'.\n\n![hopping-window](/images/doc/hopping-window.png)\n\nFor more information on hopping windows, see <a href=\"https://docs.sqlstream.com/sql-reference-guide/select-statement/window-clause/#hopping-windows\" target=\"\\_blank\"> see the topic Using Row-Based Sliding Windows in the s-Server Streaming SQL Reference Guide</a>.\n\n<a name=\"rowbased\"></a>\n#### Using Row-based Sliding Windows\n\nRow-based sliding windows identify groups of rows based on N number of rows in relation to the current row.\n\nYou define row-based windows in terms of\n\n1. when the window begins, either unbounded (all rows received up until the current row) or a specified number of rows (such as 200 rows).\n2. when the window ends, either the current row or N rows preceding (such as \"until 10 rows ago\").\nRow-based windows are defined as the current row plus X number of rows preceding. A window such ROWS '3' PRECEDING will actually contain 4 rows: 3 preceding rows plus the current row.\n\n![sl_aggregate-sliding-row](/images/doc/sl_aggregate-sliding-row.png)\n\nIn the illustration below, for the first row, only that row is included in the window. The 6th row calculates values using data from rows 1, 2, 3, 4, 5, and 6. The 10th row calculates values using data from rows 5, 6, 7, 8, 9, and 10.\n\n![rows-based-window](/images/doc/rows-based-window.png)\n\nFor more information on time-based sliding windows, see <a href=\"https://docs.sqlstream.com/sql-reference-guide/select-statement/window-clause/#row-based-sliding-windows\" target=\"\\_blank\"> see the topic Using Row-Based Sliding Windows in the s-Server Streaming SQL Reference Guide</a>.\n\n<a name=\"partitions\"></a>\n### Partitioning Sliding Windows\n\nBoth time-based and row-based sliding windows can be partitioned by one or more columns. When you apply partitioning, calculations incorporate both the window frame and the partitioned column value. This means that for an aggregatiaon such as average, the sum will include the column amount for all rows with tickers matching ORCL and arriving within the window frame.\n\nIn the illustration, all rows with the value 'IBM' for the column ticker that have been received up until this point and fall within the window frame are calculated together.\n\n![partitioned-window](/images/doc/partitioned-window.png)\n\nFor more information on partitions, see <a href=\"https://docs.sqlstream.com/sql-reference-guide/select-statement/window-clause/#partitioned-windows\" target=\"\\_blank\">see the topic Partitioned Windows in the s-Server Streaming SQL Reference Guide</a>.\n\n<a name=\"sessions\"></a>\n### Using Sessions with Sliding Windows\n\n(new in StreamLab **version 2.3.1**)\n\nYou can also define *sessions* for a column or columns.  You do not need to choose a column to partition in order to use sessions. (You cannot use sessions with tumbling windows.)\n\nWith sessions, you can determine the location and size of a partitioned window using the input data itself. For example, you might have a session applied to a customer's id, which you could use to develop aggregates for the customer's orders over the past day.\n\nSessions can start and end in one of two ways:\n\n- You can set Boolean conditions for when the session starts (*START WHEN*) and ends (*END WHEN*).\n- You can set a time out for the session's expiration.\n\nYou set *START WHEN*, *END WHEN*, and time out using controls on the far right of the Aggregate analytic. These controls are available once you set _Session?_ to _Yes_. You can use these flags together.\n\n**Note:** Sessions are not currently supported for Tumbling windows.\n\nBy default, sessions are not enabled, The image below shows the session option set to No:\n\n![session not enabled](/images/doc/sl_aggregate_session_no.png)\n\nTo use sessions:\n\n1. Under *SESSION,* choose *yes*:\n\n    ![session enabled](/images/doc/sl_aggregate_session_yws.png)\n\n2. Indicate a time frame for the session. You can do so using Boolean conditions for start and end, a timeout period, or both.\n\n    - If you wish to set a condition for when the session starts, choose *yes* under *START WHEN*. Using the leftmost control under *START WHEN*, select the column on which the condition will apply. Next, define the condition for when the session starts. For a simple flag in the data, for example, you might select *is equal to* and enter \"START\" (or whatever flag is contained in your data).\n    - If you wish to set a condition for when the session ends, choose *yes* under *END WHEN*. Using the leftmost control under *END WHEN*, select the column on which the condition will apply. Next, define the condition for when the session ends. For a simple flag in the data, for example, you might select *is equal to* and enter \"END\" (or whatever flag is contained in your data).\n    - If you wish to set a time out for the session's expiration, select *yes* under *timeout?*. Enter a number and select a unit for the timeout. For example, if you wish the session to time out after no rows have arrived in the session for 2 hours, you would enter \"2\" and select *hours*. If rows stop arriving for 2 hours, the session ends, and a new session begins.\n\n    The following image displays all three parameters enabled:\n\n    ![session details](/images/doc/sl_aggregate_session_details.png)\n\n3. Once you have finished configuring the session, click *+* in the Suggestions window to add the aggregation to the Script.\n\nFor more information on sessions, see <a href=\"https://docs.sqlstream.com/sql-reference-guide/select-statement/window-clause/#partitioned-windows-using-session-on\" target=\"\\_blank\"> see the topic Using SESSION ON in the s-Server Streaming SQL Reference Guide</a>.\n\n<a name=\"tumbling\"></a>\n### Using Tumbling Windows\n\nThis data window also uses ROWTIME, and lets you tell StreamLab. \"aggregate data for an hour, then clear data, then give me data for the next hour,\" at, for example, 2:00 PM, 3:00 PM, 4:00 PM, and so on.\n\nTumbling windows emit one aggregated row for each defined interval. That is, if you choose 5 seconds, a new row appears every five seconds with aggregated data. For non-aggregated rows (the rows that are, for example, averaged for the aggregation), you can choose to either drop non-aggregated columns, display the first value for non-aggregated columns, or display the last value.\n\nWith tumbling windows, you can also choose to use a group by, drawing on a column with limited values, such as \"dept A, dept B, dept C.\" When you apply a group by, StreamLab emits one row for each group that appears window, that is, every 10 seconds a row for dept A, B, and C, provided that each group has appeared in the window.\n\n#### Options for Tumbling Windows\n\nTumbling windows emit one row for every group of rows aggregated. As with sliding windows, a calculation such as sum or average incorporates all the rows in the window, but a row will appear only once during the window frame. So if you designate a window of 200 rows, one row will appear for every 200 rows that enter StreamLab. Similarly, if you designate a window of 5 minutes, one row will appear for all rows that enter StreamLab during a 5 minute interval.\n\n| ROWTIME | AMOUNT | TICKER |\n| ----------------------- | ------ | ------ |\n| 2019-03-30 03:02:00.000 | 20 | ORC. |\n| 2019-03-30 03:03:00.000 | 30 | IB.  |\n| 2019-03-30 03:04:00.000 | 100 | ORC. |\n| 2019-03-30 03:04:30.000 | 40 | IB.  |\n| 2019-03-30 03:05:00.000 | 100 | MSF. |\n| 2019-03-30 03:05:30.000 | 50 | MSF. |\n| 2019-03-30 04:04:00.000 | 100  | GOOG. |\n| 2019-03-30 04:06:00.000 | 100 | ORC. |\n| 2019-03-30 04:18:00.000 | 1000  | GOGG. |\n| 2019-03-30 04:44:00.000 | 1000 | ORC. |\n\n![sl_aggregate-tumbling](/images/doc/sl_aggregate-tumbling.png)\n\n<a name=\"group-tumbling-windows\"></a>\n#### Grouping Tumbling Windows\n\nWith tumbling windows, you can apply a group by, drawing on a column with limited values. When you apply a group by, StreamLab emits one row for each group that appears in the windowed time period. This allows you to display aggregated data for each department, or region, or building, and so on.\n\nIn the screen shot below, for example, StreamLab emits one aggregated row every ten seconds for trip_no 500s and 600s. During the first window, no rows with 600s appeared, so StreamLab only emits an aggregated row for 500s.\n\n![sl_aggregate_group_by_result](/images/doc/sl_aggregate_group_by_result.png)\n\n<a name=\"#agg_opps\"></a>\n### Aggregation Operations\n\n| Operation | Definition |\n| --------- | ---------- |\n| Average | Returns the average of all the value expressions evaluated for each row in the aggregation. |\n| Count | Returns the number of qualifying rows in the aggregation. |\n| Count Distinct | Returns the number of qualifying non-duplicate rows in the aggregation. |\n| First Value | Returns the evaluation of the <value expression> from the first row that qualifies for the aggregate. |\n| First Value Ignore Nulls | Returns first non null value of x in \\<window-specification\\> |\n| First Value Respect Nulls | Returns first value, including null of x in \\<window-specification\\> |\n| Last Value | LAST_VALUE returns the evaluation of the <value expression> from the last row that qualifies for the aggregate. Returns last value, including null of x in \\<window-specification\\>. |\n| Last Value Ignore Nulls | Returns last non null value of x in \\<window-specification\\>. |\n| Last Value Respect Nulls | Returns last value, including null of x in \\<window-specification\\>. |\n| Maximum | Returns the maximum value of all the value expressions evaluated for each row in the aggregation. For string values, MAX is determined by which string is last in the collating sequence. |\n| Minimum | Returns the minimum value of all the value expressions evaluated for each row in the aggregation. |\n| SUM | returns the sum of all the value expressions evaluated for each row in the aggregation. |\n| Population Variance | This is a standard statistical analytic method that returns the population variance of a non-null set of numbers (nulls being ignored). Population variance uses the following calculation: <br/><br/>*(SUM(expr*expr) - SUM(expr)\\*SUM(expr) / COUNT(expr)) / COUNT(expr)*  |\n| Population Standard Deviation | This is a standard statistical analytic method that returns the square root of the population variance (defined below) of the row's value, evaluated for each row in the aggregated window. |\n| Sample Variance | This is a standard statistical analytic method that returns the sample variance of a non-null set of numbers (nulls being ignored). Sample Variance uses the following calculation: <br/><br/>*(SUM(expr\\*expr) - SUM(expr)\\*SUM(expr) / COUNT(expr)) / (COUNT(expr)-1)* <br/><br/>In other words, for a given set of non-null values, using S1 as the sum of the values and S2 as the sum of the squares of the values, VAR_POP returns the result *(S2-S1*S1/N)/(N-1)*. |\n| Sample Standard Deviation | This is a standard statistical analytic method that returns the statistical standard deviation of all values in number-expression, evaluated for each row remaining in the group and defined as the square root of the sample variance (defined above). |\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/runningAverage.sql":{"value":"-- Running Average Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true)\n\n    rose.param({id: 'mode', title: \"mode\", type: \"choice\", values: ['sliding', 'tumbling'], defval: 'sliding', width: 100})\n    rose.param({id: 'window', title: 'time window', repeats: false, type: 'timewindow', defval: \"1 minute\", width: 170})\n    rose.param({id: 'column', title: \"column\", defval:\"\", type: \"choice\", width: 180, freeze: true,\n        valuesFunc: () => rose.numericColumnList(),\n        values: [\"table not available\"] \n    })\n    rose.param({id: 'operation', title: \"operation\", type: \"choice\", defval: 'AVERAGE', width: 200,\n        values: ['AVERAGE', 'AVERAGE with one band', 'AVERAGE with two bands']\n    })\n    rose.param({id: 'k1', title: \"band 1 standard deviations\", type: \"real\", defval: \"2.0\", width: 200,\n        visibleWhen: () => rose.param('operation') !== 'AVERAGE'\n    })\n    rose.param({id: 'k2', title: \"band 2 standard deviations\", type: \"real\", defval: \"3.0\", width: 200,\n        visibleWhen: () => rose.param('operation') === 'AVERAGE with two bands'\n    })\n    rose.param({id: 'outputColumn', title: \"prefix for new columns\", type: \"string\", defval: \"avg\", width: 200})\n    rose.param({id: 'remaining', title: \"unaggregated columns\", type: \"choice\", defval: 'drop', width: 200,\n        values: ['drop', 'use the first value', 'use the last value'],\n        visibleWhen: () => rose.param('mode') === 'tumbling'\n    })\n\n\n    rose.subscribe('column', function(e, col, columns) {\n        const c = columns[0]\n        if(c && _.contains(rose.numericColumnList(),c)) e.setPath('params.column', c)\n    })\n\n\n    let bands = 0\n    if(rose.param('operation') === 'AVERAGE with one band') bands = 1\n    if(rose.param('operation') === 'AVERAGE with two bands') bands = 2\n\n    const win = ' {{window}} {{mode}} window'\n\n    const addC = \"Add column named {{outputColumn}} containing an {{operation}} of {{column}} over a \"\n    const band0 = \".\"\n    const band1 = \" with Bollinger band k={{k1}}.\"\n    const band2 = \" with Bollinger bands k={{k1}} and k={{k2}}.\"\n    const drop = \" For the remaining columns, {{remaining}} them.\"\n    const rem = \" For the remaining columns, {{remaining}}.\"\n\n    rose.summary(e => bands === 0 && rose.param('mode') === 'tumbling' && rose.param('remaining') === 'drop'\n        , addC + win + band0 + drop)\n\n    rose.summary(e => bands === 0 && rose.param('mode') === 'tumbling' && rose.param('remaining') !== 'drop'\n        , addC + win + band0 + rem)\n\n    rose.summary(e => bands === 0\n        , addC + win + band0)\n\n\n    rose.summary(e => bands === 1 && rose.param('mode') === 'tumbling' && rose.param('remaining') === 'drop'\n        , addC + win + band1 + drop)\n\n    rose.summary(e => bands === 1  && rose.param('mode') === 'tumbling' && rose.param('remaining') !== 'drop'\n        , addC + win + band1 + rem)\n\n    rose.summary(e => bands === 1\n        , addC + win + band1)\n\n\n    rose.summary(e => bands === 2 && rose.param('mode') === 'tumbling' && rose.param('remaining') === 'drop'\n        , addC + win + band2 + drop)\n\n    rose.summary(e => bands === 2 && rose.param('mode') === 'tumbling' && rose.param('remaining') !== 'drop'\n        , addC + win + band2 + rem)\n\n    rose.summary(e => bands === 2\n        , addC + win + band2)\n\n\n\n    rose.subscribe('suggestions', function(context) {\n        //-- If there are no num columns, complain\n        var cols = rose.columnList(false, 'numeric')\n        if(cols.length == 0)\n            return rose.suggest(context, -10, \"This analytic works only on numeric data, and there are no numeric columns. Try using 'Cast' to convert a column to a numeric type.\")\n\n        var tumbling = rose.param('mode') === 'tumbling'\n        var win = rose.timewindowParam('window', tumbling)\n        var errs = (win.valid) ? \"\" : \"Specify time window. \"\n\n        var cols = rose.columnList()\n        var nc = rose.param('outputColumn')\n        if(_.contains(cols,nc))\n            errs += `The output column \"${nc}\" can't match an existing column name.`\n\n        if(errs)\n            rose.suggest(context, -100, errs)\n        else\n            rose.suggest(context, 1)     //-- suggest the current settings\n    })\n\n    var substitution = {}\n\n    var k1 = rose.param('k1')\n    var k2 = rose.param('k2')\n    var k1id = k1.replace('.', '_')\n    var k2id = k2.replace('.', '_')\n\n    var ic = 'CAST(' + rose.sqlIdentifier(rose.param('column')) + ' AS DOUBLE)'\n    var oc = rose.param('outputColumn')\n    var tumbling = rose.param('mode') === 'tumbling'\n\n    if(tumbling) {\n        var remaining = rose.param('remaining')\n\n        _.each(rose.columnList(), function(c) {\n            if(c === 'ROWTIME') return substitution[c] = ''    //-- remove ROWTIME\n\n            if(substitution[c]) return\n\n            switch(remaining) {\n                case 'drop':\n                    substitution[c] = ''\n                    break\n\n                case 'use the first value':\n                    substitution[c] = 'FIRST_VALUE(' + rose.sqlInColumn(c) + ')  AS ' + rose.sqlIdentifier(c)\n                    break\n\n                case 'use the last value':\n                    substitution[c] = 'LAST_VALUE(' + rose.sqlInColumn(c) + ')  AS ' + rose.sqlIdentifier(c)\n                    break\n            }\n        })\n\n        substitution[oc] = 'AVG(' + ic +')'\n        if(bands > 0) {\n            substitution[oc + 'B' + k1id + 'u'] = substitution[oc] + ' + STDDEV_POP(' + ic + ') * ' + k1\n            substitution[oc + 'B' + k1id + 'l'] = substitution[oc] + ' - STDDEV_POP(' + ic + ') * ' + k1\n        }\n\n        if(bands === 2 && k1 !== k2) {\n            substitution[oc + 'B' + k2id + 'u'] = substitution[oc] + ' + STDDEV_POP(' + ic + ') * ' + k2\n            substitution[oc + 'B' + k2id + 'l'] = substitution[oc] + ' - STDDEV_POP(' + ic + ') * ' + k2\n        }\n\n    } else { //-- sliding, all the old columns are carried through\n        substitution[oc] = '(AVG(' + ic + ') OVER \"aWindow\")'\n\n        if(bands > 0) {\n            substitution[oc + 'B' + k1id + 'u'] = substitution[oc] + ' + (STDDEV_POP(' + ic + ') OVER \"aWindow\") * ' + k1\n            substitution[oc + 'B' + k1id + 'l'] = substitution[oc] + ' - (STDDEV_POP(' + ic + ') OVER \"aWindow\") * ' + k1\n        }\n\n        if(bands === 2 && k1 !== k2) {\n            substitution[oc + 'B' + k2id + 'u'] = substitution[oc] + ' + (STDDEV_POP(' + ic + ') OVER \"aWindow\") * ' + k2\n            substitution[oc + 'B' + k2id + 'l'] = substitution[oc] + ' - (STDDEV_POP(' + ic + ') OVER \"aWindow\") * ' + k2\n        }\n    }\n\n    var windowClause = rose.timewindowWindowClause('window', [], tumbling)\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(substitution) %>\n    FROM <%= rose.guideInput() %> AS \"input\"\n    <%= windowClause %>;\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Bollinger Bands","public":true,"doc":"## Bollinger Band\nThe Bollinger Band analytic command lets you create a new column that is a running average of another column over a given window of time. This analytic works especially well for streaming data. The diagram below depicts the creation of a running average on a stock's closing price.\n\nYou can also add Bollinger bands to this running average. Bollinger Bands are a volatility indicator, typically used for stock prices.\n\nBollinger Bands consist of:\n\n - an moving average (avg) over a given period T.\n - an upper band at K times an T-period standard deviation above the moving average (avg + Kσ)\n - a lower band at K times an T-period standard deviation below the moving average (avg − Kσ)\n\nStreamLab also lets you define inner and outer values for the upper and lower bands.\n\n![](/images/doc/sl_running_average.png)\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/calculate.sql":{"value":"-- Calculate Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n\n    rose.param({id: 'columns', title: \"list of columns\", type: \"string\", defval: \"\", width: 200});\n    rose.param({id: 'expr', title: \"SQL expression\",\n        tooltip: \"Enter a SQL expression. Use @ as a placeholder for the current column.\",\n        type: \"string\", defval: \"\", width: 'end'});\n\n    rose.focusMap({\n        column: [],\n        columnList: ['columns'],\n        row: [],\n        start: [],\n        end: [],\n        text: []\n    });\n\n\n    rose.summary(function(e) {\n        return true\n    }, \"Calculate the expression {{expr}} on each of: {{columns}}\");\n\n\n    var process = function() {\n        rose.resultSubstitution = {};\n\n        var expr = rose.param('expr');\n        var cols = rose.param('columns');\n        if(cols)\n            _.each(cols.split(','), function(c) {\n                rose.exprStr = expr.replace(/@/g, rose.sqlInColumn(c));\n\n                rose.resultSubstitution[c] = rose.exprStr + ' AS ' + rose.sqlIdentifier(c);\n            });\n    };\n\n\n    rose.subscribe('column', function(e, col, columns) {\n        e.setPath('params.columns', columns.join(','));\n        process();\n    });\n\n\n    rose.subscribe('suggestions', function(context) {\n        if(!rose.validColumnList(rose.param('columns')))\n            rose.suggest(context, -100, \"Select one or more columns\");\n        else if(rose.param('expr'))\n            rose.suggest(context, 1);     //-- suggest the current settings, but at a low priority\n        else\n            rose.suggest(context, -100, 'Enter a SQL expression to be applied to each of ' +\n                rose.param('columns') + ' using @ as a placeholder for the column. You can refer to other columns by quoting their names with \"\" (double quotes). Literal strings should be quoted in \\'\\' (single quotes).');\n    });\n\n    process();\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(rose.resultSubstitution) %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Calculate","public":true,"doc":"## Calculate\n\nThe Calculate command lets you perform an arithmetical calculation on one or more columns. Use @ for the value of the column. Selected columns must have numerical values, such as DOUBLE.\nCalculations might be something like the following:\n\n<table style=\"border:1px solid black;\">\n<thead>\n<tr>\n<th style=\"border:1px solid black;\">Calculation</th>\n<th style=\"border:1px solid black;\">Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"border:1px solid black;\">@+2000</td>\n<td style=\"border:1px solid black;\">Adds 2000 to the column value.</td>\n</tr>\n<tr>\n<td style=\"border:1px solid black;\">@-800</td>\n<td style=\"border:1px solid black;\">Subtracts 800 from the column value.</td>\n</tr>\n<tr>\n<td style=\"border:1px solid black;\">@/2</td>\n<td style=\"border:1px solid black;\">Divides the column value by 2.</td>\n</tr>\n<tr>\n<td style=\"border:1px solid black;\">@\\*4</td>\n<td style=\"border:1px solid black;\">Multiplies the column value by 4.</td>\n</tr>\n</tbody>\n</table>\n\nTo implement a Calculate command:\n\n - Select column(s) to which to apply categories. Each column must contain numerical data.\n - Enter an arithmetical calculation for the column.\n - Click the + icon  in the Suggestions list to add the command to the Guide script.\n - The results of the script appear in the Output View window.\n\nFor more information on calculations, <a href=\"https://docs.sqlstream.com/sql-reference-guide/operators/\" target=\"\\_blank\">see the topic Operators in the s-Server Streaming SQL Reference Guide</a>.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/categorize.sql":{"value":"-- Categorize Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true)\n\n    rose.param({id: 'columns', title: \"columns\", type: \"string\", defval: \"\", freeze: true})\n    rose.param({id: 'def', title: \"default category\", type: \"string\", defval: \"\", width: 130})\n    rose.param({id: 'when', title: 'category', repeats: true, type: 'clause',\n        tooltip: 'category',\n        hasConj: false, hasColumn: false, hasThen: true, insertComma: true, defval: \"\", width: 560})\n\n    rose.focusMap({\n        column: [],\n        columnList: ['columns'],\n        row: [],\n        start: [],\n        end: [],\n        text: []\n    })\n\n    rose.summary(function(e) {\n        return true\n    }, \"Categorize the values in each of the columns: {{columns}}. The default category is {{def}}, then {{when}}\")\n\n\n    rose.subscribe('column', function(e, col, columns) {\n        e.setPath('params.columns', columns.join(','))\n        process()\n    })\n\n\n    rose.subscribe('suggestions', function(context) {\n        var errs = []\n\n        var cols = rose.param('columns')\n        if(!rose.validColumnList(cols))\n            errs.push('Enter a valid comma-separated list of columns.')\n\n        var def = rose.param('def')\n        if(!def)\n            errs.push(\"No default category (use '' for an empty string).\")\n\n        var clauseErrs = rose.checkClauses('when', true)\n        if(clauseErrs)\n            errs.push('Check categories: ' + clauseErrs + '.')\n\n        if(errs.length)\n            rose.suggest(context, -100, errs.join(' '))\n        else\n            rose.suggest(context, 1)     //-- suggest the current settings\n    })\n\n\n    var process = function() {\n        rose.resultSubstitution = {}\n\n        var def = rose.param('def')\n        var max = def && def.length || 0\n\n        var cols = rose.param('columns')\n        if(cols) _.each(cols.split(','), function(c) {\n            var wc = []\n            wc.push('TRIM(CASE')\n\n            rose.repeatParam('when', function(p, index) {\n                var when = rose.compoundParam(p)\n\n                wc.push(' WHEN ')\n                wc.push(rose.sqlInColumn(c))\n                wc.push(' ')\n\n                var op = rose.clauseOp(when.op)\n                wc.push(op)\n                wc.push(' ')\n\n                switch(op) {\n                    case 'BETWEEN':\n                        wc.push(rose.literal(when.val))\n                        wc.push(' AND ')\n                        wc.push(rose.literal(when.val2))\n                        break\n\n                    case 'IN':  //-- expecting a comma-separated list\n                    case 'NOT IN':\n                        var sp = _.map(when.val.split(/\\s*,\\s*/), function(x) { return rose.literal(x) })\n                        wc.push('(' + sp.join(', ') + ')')\n                        break\n\n                    case 'IS NULL':     //-- no argument\n                    case 'IS NOT NULL':\n                    case 'IS TRUE':\n                    case 'IS FALSE':\n                        break\n\n                    default:\n                        wc.push(rose.literal(when.val))\n                        break\n                }\n\n                wc.push(' THEN ' + rose.literal(when.then))\n            })\n\n            if(def) wc.push(' ELSE ' + rose.literal(def))\n            wc.push(' END) AS ' + rose.sqlIdentifier(c))\n\n            rose.resultSubstitution[c] = wc.join('')\n        })\n    }\n\n    process()\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.substituteColumnsWithExpressions(rose.resultSubstitution) %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Categorize","public":true,"doc":"## Categorize\n\nThe Categorize command lets you take a continuous value, such as a bus speed, and replace it with strings such as \"fast\", \"medium\", or \"slow\" by applying conditions to the column. You can process more than one column at once. Because this command replaces the column with one containing strings, you may want to make a copy of the column first, using the New Column command.\n\nTo implement a Categorize command:\n\n - Select column(s) to which to apply categories. Each column must contain numerical data.\n - Enter a default category for column values that do not meet any conditions, such as \"Normal.\"\n - Enter a category for columns that meet the first condition, such as \"High.\"\n - Select a comparison operator for the condition, such as \"is equal to.\"\n - Enter a value for the condition, such as \"110.\"\n\nTo add more conditions, click the + icon in the Category window.\n\n - Click the + icon  in the Suggestions list to add the command to the Guide script.\n - The results of the script appear in the Output View window.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/distinct.sql":{"value":"-- DISTINCT Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true)\n    \n    rose.param({id: 'window', title: 'time window', repeats: false, type: 'timewindow', defval: \"1 millisecond\", width: 170})\n\n    rose.param({id: 'promote', title: \"promote to ROWTIME?\", type: \"boolean\", defval: false, width: 180})\n\n    rose.param({id: 'to'\n            , title: \"rename as\"\n            , type: \"string\"\n            , defval: \"\"\n            , width: 200\n            , visibleWhen: () => !rose.param('promote')\n            })\n\n\n    rose.summary(function(e) {\n        return rose.param('promote');\n    }, \"Eliminate duplicate rows over a window of {{window}} promoted to ROWTIME (promote to ROWTIME is {{promote}}).\");\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Eliminate duplicate rows over a window of {{window}} renamed as {{to}} (promote to ROWTIME is {{promote}}).\");\n\n    var win = rose.timewindowParam('window', true)\n\n    rose.subscribe('suggestions', function(context) {\n\n        const win = rose.timewindowParam('window', true)\n        let errs = \"\"\n\n        if(!win.valid)\n            errs += \"Enter a non-zero time window. \"\n\n        if(!rose.param('promote')) {\n            const t = rose.param('to')\n            if(t === \"\")\n                errs += \"Enter an alias for the window. \"\n            else if(rose.validColumnList(t))\n                errs += `You may not use an existing column for the \"to\" column (${t}). `\n        }\n        \n        if (errs === \"\")\n            rose.suggest(context, 1)\n        else\n            rose.suggest(context, -100, errs)\n    })\n\n    let tpCol = 'ROWTIME'\n    if(!rose.param('promote'))\n        tpCol = rose.sqlIdentifier(rose.param('to'))\n\n//-- template supports millisecond window as STEP(input.ROWTIME BY INTERVAL '.001' SECOND)\n//-- should simply use \"input.ROWTIME\" in this degenerate case?\n\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> DISTINCT STEP(\"input\".ROWTIME BY INTERVAL <%= rose.sqlLiteral(win.len) %> <%= win.unit %>) as <%= tpCol %>, *\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Distinct","public":true,"doc":"## Distinct Operation\nThe Distinct operation lets you eliminate rows with duplicate columns over a specified timeframe.\n\nChoosing *Promote to ROWTIME?* will produce an output view showing only rows with distinct columns. You can also choose to not promote the new timestamp to ROWTIME, which will allow you to see the new timestamp for which rows are evaluated.\n\nYou may want to drop some columns from the view before applying *Distinct*, using *Basic/Drop*.\n\nMake sure to drop columns *before* the *Distinct* step.\n\n**Note:** If you do not promote to ROWTIME, new timestamps will display as one millisecond behind the row's rowtime.\n\nFor more information on distinct, <a href=\"https://docs.sqlstream.com/sql-reference-guide/select-statement/select-all-and-select-distinct/\" target=\"\\_blank\">see the topic SELECT ALL and SELECT DISTINCT in the s-Server Streaming SQL Reference Guide</a>.\n\n## Implementing Distinct\n\nTo implement Distinct.\n\n1. Select a number of milliseconds over which duplicate rows will be eliminated.\n2. Choose whether or not to promote the new timestamp to ROWTIME.\n3. Enter a name for the column with distinct timestamps.\n4. Click the + icon to add the command to the Guide script.\n5. The results of the script appear in the Output View window.\n\n![sl_distinct](/images/sl/sl_distinct.png)\n\nFor example, if you chose to eliminate duplicate rows over a 1 minute timeframe, and StreamLab received the data below, the last 5 rows would be eliminated because they are duplicates.\n\n| 2019-03-30 04:18:00.000 | GOOGL | 100  |\n| ----------------------- | ----- | ---- |\n| 2019-03-30 04:18:00.000 | GOOGL | 100  |\n| 2019-03-30 04:18:00.000 | IBM   | 15   |\n| 2019-03-30 04:43:00.000 | IBM   | 60   |\n| 2019-03-30 04:44:00.000 | ORCL  | 1000 |\n| 2019-03-30 04:46:00.000 | ORCL  | 3000 |\n| 2019-03-30 05:03:00.000 | IBM   | 30   |\n| 2019-03-30 05:03:01.000 | IBM   | 30   |\n| 2019-03-30 05:03:02.000 | IBM   | 30   |\n| 2019-03-30 05:03:03.000 | IBM   | 30   |\n| 2019-03-30 05:03:04.000 | IBM   | 30   |\n| 2019-03-30 05:03:05.000 | IBM   | 30   |\n\n### Resulting SQL\n\nYou need not view or understand the SQL generated by a command in order to use them. However, some users may find it useful or interesting to view the SQL generated.  \n\nLike other commands, the Distinct command generates a new view on the pipeline guide's stream:\n\n\n```\n--  DISTINCT Operation\n\nCREATE OR REPLACE VIEW \"StreamLab_Output_df\".\"pipeline_1_step_2\" AS\nSELECT STREAM DISTINCT \"input\".ROWTIME, *\nFROM \"StreamLab_Output_df\".\"pipeline_1_step_1\" AS \"input\";\n```\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/geoIP.sql":{"value":"-- Add lat/lon columns given a column of IP addresses\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true)\n\n    rose.param({id: 'column', title: \"column of IP addresses\", defval:\"\", type: \"choice\", width: 180, freeze: true,\n        valuesFunc: () => rose.charColumnList(),\n        values: [\"table not available\"]  })\n\n    rose.param({id: 'prefix', title: \"prefix\", type: \"string\", defval: '', width: 120})\n\n    rose.summary(e => !rose.param('prefix'),\n        'Geo-locate the IP addresses in {{column}} (prefix is {{prefix}})')\n\n    rose.summary(e => true,\n        \"Geo-locate the IP addresses in {{column}} adding columns with the prefix: {{prefix}}\")\n\n\n    rose.subscribe('column', function(e, col, columns) {\n        var c = columns[0]\n        if(c && _.contains(rose.charColumnList(),c)) e.setPath('params.column', c)\n    })\n\n    rose.subscribe('suggestions', function(context) {\n        var column = rose.param('column')\n\n        if(rose.metadata(column, 'hasData') && rose.metadata(column, 'ip'))\n            rose.suggest(context, 11)     //-- suggest the current settings\n        else\n            rose.suggest(context, -100, 'Select a column that contains IP addresses in dotted-decimal format.')\n\n        //-- Suggest each of the columns that have IP metadata\n        _.each(rose.columnList(), function(col) {\n            if(rose.metadata(col, 'hasData') && rose.metadata(col, 'ip'))\n                rose.suggest(context, 10, {column: col, prefix: col}, true)\n        })\n    })\n\n    var jar = rose.guideSchema('GeoIp')\n    var func = rose.guideOutput('addIpLocation')\n    var prefix = rose.param('prefix')\n    var pre = prefix ? prefix + '_' : ''\n\n    var geoCols = [\n        'countryCode',\n        'countryName',\n        'city',\n        'region',\n        'latitude',\n        'longitude'\n    ]\n\n    var outputs = _.map(geoCols, function(x) { return '\"input\".'+ rose.sqlIdentifier(x) + ' AS ' + rose.sqlIdentifier(pre + x)}).join(', ')\n%>\n\n<%= rose.createSqlObj('JAR', jar, {wasCoR: true}) %>\n    LIBRARY 'file:plugin/geoip/geoip.jar'\n    OPTIONS(0);\n\n<%= rose.createSqlObj('FUNCTION', func) %>(\n        c CURSOR,\n        ipColName VARCHAR(25))\n    RETURNS TABLE(\n        c.*,\n        \"countryCode\" CHAR(2),\n        \"countryName\" VARCHAR(34),\n        \"city\" VARCHAR(32),\n        \"region\" VARCHAR(2),\n        \"latitude\" float,\n        \"longitude\" float)\n    LANGUAGE JAVA\n    PARAMETER STYLE SYSTEM DEFINED JAVA\n    NO SQL\n    EXTERNAL NAME '<%= jar %>:com.sqlstream.plugin.geoip.GeoIp.addLocation';\n\n<% \n    var st = rose.local('stream')\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= outputs %>, <%= rose.allColumnsBut('ROWTIME') %>\n    FROM <%= rose.local('stream') %> (<%= func %>(\n        CURSOR(SELECT <%= st %> * FROM <%= rose.guideInput() %> AS \"input\"),\n        <%= rose.sqlLiteral(rose.param('column')) %>\n    )) AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Geo-Locate IP","public":true,"doc":"## Geo-Locate IP\nUse an IP address column to add latitude/longitude columns.\n\nFor more information on GeoIP, <a href=\"https://docs.sqlstream.com/analyzing-data/transforming-data-in-s-server/geoipfunctions-udx/\" target=\"\\_blank\">see the topic GeoIPFunctions UDX in the Integrating SQLstream with Other Systems Guide</a>.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/group_rank.sql":{"value":"-- Group Rank Window Operation\n<%= rose.panel('params') %>\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    rose.localSet('docsDismissed', true)\n\n    rose.param({id: 'outputColumn', title: \"new column\", type: \"string\", defval: \"groupRank\", width: 160})\n    rose.param({id: 'part', title: 'group by', repeats: true, type: 'choice', width: 200,\n        valuesFunc: () => rose.groupableColumnList(),\n        values: [\"table not available\"]  })\n    rose.param({id: 'column', title: \"rank by\", defval:\"\", type: \"choice\", width: 200, freeze: true,\n        valuesFunc: () => rose.groupableColumnList(),\n        values: [\"table not available\"]  })\n    rose.param({id: 'operation', title: \"operation\", type: \"choice\", defval: \"AVG\", width: 140,\n        values: ['AVG','COUNT','FIRST_VALUE','LAST_VALUE','MAX','MIN','SUM','STDDEV_POP','STDDEV_SAMP','VAR_POP','VAR_SAMP']\n})\n    rose.param({id: 'window', title: 'time window', repeats: false, type: 'timewindow', defval: \"1 minute\", width: 170})\n    rose.param({id: 'sortOrder', title: 'sort order', defval: 'descending', type: 'choice', width: 120,\n        values: ['ascending', 'descending']})\n    rose.param({id: 'outputOrder', title: 'output order', defval: 'ascending', type: 'choice', width: 120,\n        values: ['ascending', 'descending']})\n    rose.param({id: 'maxIdle', title: 'max idle time', defval: 1000, type: 'integer', width: 120})\n    rose.param({id: 'maxOut', title: 'max rows in a group', defval: 50, type: 'integer', width: 160})\n\n\n    const sum0 = \"Partition rows into groups using the column(s) {{part}}.\"\n    const sum1 = \"Rank rows by {{operation}}({{column}}) over the window {{window}}, putting the ranking in {{outputColumn}}.\"\n    const sum2 = \" Rank the input in {{sortOrder}} order and output the ranked rows in {{outputOrder}} order.\"\n    const sum3 = \" Groups are held for ranking for {{maxIdle}} milliseconds.\"\n    const notsum3 = \" Groups are not held for ranking (max idle time = {{maxIdle}}).\"\n    const sum4 = \" The most rows output in a group will be {{maxOut}}.\"\n    const notsum4 = \" Group size is not limited (max rows in a group = {{maxOut}}).\"\n\n    rose.summary(function(e) {\n        return rose.numParam('maxIdle') === 0 && rose.numParam('maxOut') === 0\n    }, sum0 + sum1 + sum2 + notsum3 + notsum4)\n\n    rose.summary(function(e) {\n        return rose.numParam('maxIdle') === 0\n    }, sum0 + sum1 + sum2 + sum4 + notsum3)\n\n    rose.summary(function(e) {\n        return rose.numParam('maxOut') === 0\n    }, sum0 + sum1 + sum2 + sum3 + notsum4)\n\n    rose.summary(function(e) {\n        return true\n    }, sum0 + sum1 + sum2 + sum3 + sum4)\n\n\n    rose.subscribe('suggestions', function(context) {\n        //-- If there are no groupable columns, complain\n        var cols = rose.columnList(false, 'groupable') || []\n        if(cols.length == 0)\n            return rose.suggest(context, -10, \"'Group Rank' works only on groupable (numeric or text) data, and there are no groupable columns. Try using 'Cast' to convert a column to a character or numeric type.\")\n\n        var win = rose.timewindowParam('window', true)\n        var errs = (win.valid) ? \"\" : \"Specify time window. \"\n\n        var badParts = false\n        rose.repeatParam('part', function(p, index) {\n            if(badParts) return\n\n            var pcol = rose.param(p)\n            var pcolType = rose.metadata(pcol, 'type')\n\n            if(!rose.isSQLGroupable(pcolType))\n                badParts = true\n        })\n\n        if(badParts)\n            errs += \"Choose one or more 'group by' columns that contain character or numeric data\"\n\n        var col = rose.param('column')\n        var colType = rose.metadata(col, 'type')\n\n        if(!rose.isSQLGroupable(colType))\n            errs += \"Choose a 'rank by' column that contains character or numeric data\"\n\n        if(errs)\n            rose.suggest(context, -100, errs)\n        else\n            rose.suggest(context, 1)     //-- suggest the current settings\n    })\n\n    var func = rose.guideOutput('groupRank')\n\n    var sortOrd = rose.sqlLiteral(rose.param('sortOrder') === 'ascending' ? 'asc' : 'desc')\n    var outOrd = rose.sqlLiteral(rose.param('outputOrder') === 'ascending' ? 'asc' : 'desc')\n\n    var parts = []\n    var colsA = []\n    colsA.push(rose.colParam('outputColumn'))\n\n    rose.repeatParam('part', function(p) {\n        parts.push(rose.colParam(p))\n        colsA.push(rose.colParam(p))\n    })\n\n    colsA.push(rose.colParam('column'))\n\n    var columnsA = colsA.join(', ')\n    var qc = rose.sqlInColumn(rose.param('column'))\n    var columnsB = parts.join(', ') + ', ' + rose.param('operation') + '(' + qc + ') AS ' + qc\n\n    var groupby\n    var win = rose.timewindowParam('window', true)\n    if(win.len === 1) {\n        groupby = 'FLOOR(input.ROWTIME TO ' + win.unit + '), ' + parts.join(', ')\n    } else {\n        groupby = 'FLOOR(((input.ROWTIME - TIMESTAMP \\'1970-01-01 00:00:00\\') ' + win.unit + ')/'\n            + win.len + ' TO ' + win.unit + '), ' + parts.join(', ')\n    }\n%>\n\n<%= rose.createSqlObj('FUNCTION', func) %>(\n        c CURSOR,\n        rankByColumnName VARCHAR(128),\n        rankOutColumnName VARCHAR(128),\n        sortOrder VARCHAR(10),\n        outputOrder VARCHAR(10),\n        maxIdle INTEGER,\n        outputMax INTEGER)\n    RETURNS TABLE(\n        c.*,\n        <%= rose.sqlIdentifier(rose.param('outputColumn')) %>  INTEGER)\n    LANGUAGE JAVA\n    PARAMETER STYLE SYSTEM DEFINED JAVA\n    NO SQL\n    EXTERNAL NAME 'class com.sqlstream.plugin.grouprank.GroupRank.group_rank';\n\n<% \n    var st = rose.local('stream')\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= columnsA %>\n    FROM <%= rose.local('stream') %> (<%= func %>(CURSOR(SELECT <%= st %> <%= columnsB %>\n        FROM <%= rose.guideInput() %> AS input\n        GROUP BY <%= groupby %>),\n        <%= rose.sqlLiteral(rose.param('column')) %>, <%= rose.sqlLiteral(rose.param('outputColumn')) %>,\n        <%= sortOrd %>, <%= outOrd %>, <%= rose.param('maxIdle') %>, <%= rose.param('maxOut') %>));\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Group Rank","public":true,"doc":"## Group Rank\nRanks rows by the selected column\n\nGroupRank lets you group rows by the values in one column (group by) and then rank the rows within that group according to another column (rank by) across a window defined by you.\n\nTo implement a GroupRank operation:\n\n1. Enter a name for the column that will display length\n1. Select a column that StreamLab will use to group rows over the *group window*.\n1. Select a column that StreamLab will use to rank rows within the group defined above.\n1. Select an operation to aggregate values within the group. See *Operations Used in Commands* for more details on these operations.\n1. Select a length and unit for the group window, such as \"1 hour\" or \"15 minutes.\"\n1. Chose to sort group rows in either ascending or descending order.\n1. Choose to order output rows in either ascending or descending order.\n1. Choose rolling or tumbling window type. See below for more information on these.\n1. If desired, define a max idle time for holding a group for ranking. When maxIdle expires the current group is released to the stream. A value of zero indicates no idle time out.\n1. If desired, indicate the maximum number of rows the UDX will output in a given group. A value of 0 indicates no limit.\n1. Click the + icon to add the command to the Guide script.\n    The results of the script appear in the Output View window.\n\nFor more information on Group Rank, <a href=\"https://docs.sqlstream.com/analyzing-data/transforming-data-in-s-server/grouprankudx/\" target=\"\\_blank\">see the topic Group Rank UDX in the Integrating SQLstream with Other Systems guide</a>.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/join.sql":{"value":"-- Join Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true)\n    rose.localSet('secondarySourceStreamParams', JSON.stringify(['tableName']))\n\n    var leftWindow = \"\"\n    var rightWindow = \"\"\n\n    const isLeftStream = () => rose.isStreamingGuide()\n\n    //-- what type of windows for stream/stream join only\n    const windowOptNone = 'none'\n    const windowOptTime = 'time'\n    const windowOptRows = 'rows'\n    const windowOptArr = [windowOptNone, windowOptTime, windowOptRows]\n\n    //-- common for row windows\n    const nRows = 'N rows preceding'\n    const curRow = 'current row'\n    const unboundRow = 'unbounded preceding'\n    const rowTypeFromArr = [nRows, unboundRow]       //-- no point selecting current row for start\n    const rowTypeUntilArr = [curRow, nRows]          //-- meaningless to select unbounded for offset\n\n    //-- we use this once each for left and right sides of the join\n\n    const getWindowParams = function(joinside, applicableWhenFunction) {\n//--    var joinside = 'left'\n//--    var applicableWhenFunction = function() { return isLeftStream() }\n//--        var applicableWhenFunction\n//--\n//--        if (joinside === 'left')\n//--            applicableWhenFunction = function() {return rose.isStreamingGuide()}\n//--        else\n//--            applicableWhenFunction = function() {return rose.param('joinmode') === joinModeS}\n\n        rose.param({id: joinside+'windowtype'\n                , title: joinside+\" window\"\n                , type: \"choice\"\n                , values: windowOptArr\n                , defval: windowOptNone\n                , width: 120\n                , visibleWhen: () => applicableWhenFunction()\n                //--, visibleWhen: function() {return isLeftStream()}\n        })\n\n\n        //-- get start time spec for sliding time windows\n        rose.param({id: joinside+'timestart'\n                , title: 'time from'\n                , repeats: false, type: 'timewindow', defval: \"1 minute\"\n                , width: 170\n                , visibleWhen: () => applicableWhenFunction() && rose.param(joinside+'windowtype') === windowOptTime\n                //--, visibleWhen: function() { return isLeftStream() && rose.param(joinside+'windowtype') === windowOptTime}\n        })\n\n\n        //-- get offset time spec for time windows - only applies to sliding time windows\n        rose.param({id: joinside+'timeend'\n                , title: 'time until'\n                , repeats: false\n                , type: 'timewindow'\n                , defval: \"0 minute\"\n                , width: 170\n                , visibleWhen: () => applicableWhenFunction() && rose.param(joinside+'windowtype') === windowOptTime\n                //--, visibleWhen: function() { return isLeftStream() && rose.param(joinside+'windowtype') === windowOptTime}\n        })\n\n\n\n//--\n//--        //-- TODO: get hopping period - only applies to sliding time windows\n//--        rose.param({id: joinside+'hoptime', title: 'hopping period', repeats: false, type: 'timewindow', defval: \"0 minute\", width: 170\n//--                , visibleWhen: function() { return applicableWhenFunction() && rose.param(joinside+'windowtype') === windowOptTime}\n//--        })\n\n\n//--        //-- TODO: get start row spec for row windows only - keep total width same as time params to avoid distracting redraw of later params\n//--        rose.param({id: joinside+'rowstarttype', title: 'row window from', repeats: false, type: 'choice', width: 175\n//--                , values:rowTypeFromArr, defval: nRows\n//--                , visibleWhen: function() { return applicableWhenFunction() && rose.param(joinside+'windowtype') === windowOptRows}\n//--        })\n\n        //-- get start row for row windows only\n        rose.param({id: joinside+'rowstart'\n                , title: 'rows from'\n                , repeats: false\n                , type: 'integer'\n                , defval: 1, from: 1, width: 90\n                , visibleWhen: () => applicableWhenFunction() && rose.param(joinside+'windowtype') === windowOptRows\n                //--, visibleWhen: function() { return isLeftStream() && rose.param(joinside+'windowtype') === windowOptRows}\n        })\n\n\n        //-- TODO: get offset row spec for row windows - could be required in future\n//--        rose.param({id: joinside+'rowendtype', title: 'row window until', repeats: false, type: 'choice', width: 165\n//--                , values:rowTypeUntilArr, defval: curRow\n//--                , visibleWhen: function() { return applicableWhenFunction() && rose.param(joinside+'windowtype') === windowOptRows}\n//--        })\n//--\n        //-- get end row for row windows only\n        rose.param({id: joinside+'rowend'\n                , title: 'rows until'\n                , repeats: false\n                , type: 'integer'\n                , defval: 0\n                , from: 0\n                , width: 90\n                //--, visibleWhen: function() { return applicableWhenFunction() && rose.param(joinside+'windowtype') === windowOptRows && rose.param(joinside+'rowendtype') === nRows}\n                , visibleWhen: () => applicableWhenFunction() && rose.param(joinside+'windowtype') === windowOptRows\n                //--, visibleWhen: function() { return isLeftStream() && rose.param(joinside+'windowtype') === windowOptRows}\n        })\n    }\n\n\n    //-- window params will be shown for stream/stream and stream/table join\n    getWindowParams('left', isLeftStream )\n    //--getWindowParams('left' )\n\n    //-- strings for join mode\n    const joinModeS = 'stream'\n    const joinModeT = 'table'\n    const joinModeL = 'lookup'\n\n    //-- options for type of RHS\n    const joinModeAllArray = [ joinModeS, joinModeT, joinModeL]\n    const joinModeSQLArray = [ joinModeS, joinModeT]\n\n    //-- we need to determine whether current pipeline is streaming or not (so we can enable stream/lookup\n\n    rose.param({id: 'joinmode', title: \"to\", type: \"choice\"\n        , valuesFunc: () => rose.isStreamingGuide() ? joinModeAllArray : joinModeSQLArray\n        , defval: joinModeS\n        , width: 85})\n\n\n    const isRightLookup = () => rose.param('joinmode') === joinModeL\n    const isRightStream = () => rose.param('joinmode') === joinModeS\n    const isRightTable = () => !isRightStream()\n\n    //-- strings for join type\n    const joinTypeInner = 'inner join'\n    const joinTypeLeft = 'left join'\n    const joinTypeRight = 'right join'\n    const joinTypeFull = 'full join'\n    const joinTypeCross = 'cross join'\n\n    const joinsForTablesArray = [ joinTypeInner, joinTypeLeft, joinTypeRight, joinTypeFull, joinTypeCross]\n    const joinsForStreamsArray = [ joinTypeInner, joinTypeLeft, joinTypeRight, joinTypeFull]\n\n    //-- this is n/a for table lookup options\n    //-- TODO: is there really no outer join flag for table lookup?\n    rose.param({id: 'jointype', title: \"join type\", type: \"choice\"\n        //--, valuesFunc: function () { isRightStream() ? joinsForStreamsArray : joinsForTablesArray }\n        , values: joinsForStreamsArray\n        , defval: joinTypeInner, width: 100\n        //--TODO, dependentOn: ['joinmode']\n        , visibleWhen: () => !isRightLookup()\n        })\n\n    //-- window on right side applies for stream/stream, table/stream only\n    getWindowParams('right', isRightStream)\n\n\n    //-- get right hand table for those join options with table or lookup on the right\n\n    rose.param({id: 'tableName', title: 'join to', type: 'choice', width: 280\n        ,valuesFunc: () => isRightLookup() ? rose.availableLookupTables() : (isRightStream() ? rose.availableStreams() : rose.availableTables())\n        ,dependentOn: ['joinmode']\n        ,values: [\"no tables declared\"]\n        //--,visibleWhen: () => isRightTable()\n        })\n\n    rose.param({id: 'joins', title: 'predicate', repeats: true, type: 'choicepair', defval: \"\"\n        ,columnsFunc: function() { return rose.columnList() }\n        ,columns2Func: function() { return isRightStream() ? rose.streamColumns(rose.param('tableName')) : rose.tableColumns(rose.param('tableName')) }\n        ,dependentOn: ['tableName']\n        //--,visibleWhen: () => isRightTable()\n        ,width: 264\n        })\n\n    //-- secondary params for table lookup only\n    rose.param({id: 'cache', title: 'cache size', defval: 0, type: 'integer', width: 100\n        ,visibleWhen: () => isRightLookup()\n        })\n\n    //-- TODO: following two seem to be never displayed in table_lookup, so we always hide them here\n    rose.param({id: 'prefetch', title: \"prefetch rows?\", type: \"boolean\", defval: false, width: 140\n        , visibleWhen: () => false && isRightLookup()\n        })\n\n    rose.param({id: 'fuzzy', title: \"fuzzy lookup?\", type: \"boolean\", defval: false, width: 140\n        , visibleWhen: () => false && isRightLookup()\n        })\n\n    //-- Prevent optimization if we're doing a stream-stream join\n    rose.local('streamStreamJoin', (rose.param('joinmode') === joinModeS))\n\n\n    //-- method to get the summary text for the stream/stream windows\n    var getWindowSuggestion = function(joinside) {\n        let sumWindow = \"\"\n        const wt = joinside+'windowtype'\n\n        switch(rose.param(wt)) {\n            case windowOptNone:\n                sumWindow = `(${joinside} window {{${wt}}})`\n                break\n\n            case windowOptRows:\n                sumWindow = `over a window from {{${wt}}} {{${joinside}rowstart}} until rows {{${joinside}rowend}} preceding`\n\n                //-- add until clause, unless current row or rows 0 preceding\n//--                switch (rose.param(joinside+'rowendtype')) {\n//--                    case nRows:\n//--                        if (rose.param('rowend') !== 0)\n//--                            sumWindow += \"until rows {{\"+joinside+\"rowend}} preceding \"\n//--                        break\n//--\n//--                    case curRow:\n//--                        break\n//--\n//--                    default:\n//--                        sumWindow += \"until {{\"+joinside+\"rowendtype}} \"\n//--                }\n                break\n\n            case windowOptTime:\n                //--winstart = rose.timewindowParam(joinside+'timestart',false)\n                //--winend = rose.timewindowParam(joinside+'timeend',false)\n                //--winhop = rose.timewindowParam(joinside+'hoptime',false)\n\n                sumWindow = `over a {{${wt}}} window from {{${joinside}timestart}} until {{${joinside}timeend}} `\n                break\n        }\n\n        return sumWindow\n    }\n\n    //-- Join summaries ------------------------\n    const ss_join_type = \"{{jointype}}\"\n    const ss_base = \"to {{joinmode}} {{tableName}}\"\n    const ss_joins = \"Join conditions: {{joins}} \"\n\n    const ss_left = getWindowSuggestion('left')\n    const ss_right = getWindowSuggestion('right')\n\n    rose.summary(e => rose.param('leftwindowtype') === windowOptNone && !isRightLookup()\n        , [\"Perform a join of type:\", ss_left, ss_join_type, ss_base, ss_right, ss_joins].join(' '))\n\n    rose.summary(e => !isRightLookup()\n        , [\"Perform a join \", ss_left, ss_join_type, ss_base, ss_right, ss_joins].join(' '))\n\n    //-- Table Lookup summaries -------------------------\n    const tl_prefix = \"Lookup table {{tableName}}: {{joins}}\"\n    const tl_cache = \"Cache {{cache}} rows from the table.\"\n    const tl_prefetch = \"Prefetch {{cache}} rows from the table.\"\n    const tl_fuzzy = \"Use fuzzy lookups (numbers close to each other will match).\"\n\n    rose.summary(e => isRightLookup() && parseInt(rose.param('cache')) < 1  && !rose.param('fuzzy')\n        , [tl_prefix].join(' '))\n\n    rose.summary(e => isRightLookup() && parseInt(rose.param('cache')) < 1  && rose.param('fuzzy')\n        , [tl_prefix,tl_fuzzy].join(' '))\n\n    //-- cache > 0\n    rose.summary(e => isRightLookup() && !rose.param('prefetch') && !rose.param('fuzzy')\n        , [tl_prefix,tl_cache].join(' '))\n\n    rose.summary(e => isRightLookup() && rose.param('prefetch') && !rose.param('fuzzy')\n        , [tl_prefix,tl_prefetch].join(' '))\n\n    //-- fuzzy is true\n    rose.summary(e => isRightLookup() && !rose.param('prefetch')\n        , [tl_prefix,tl_cache,tl_fuzzy].join(' '))\n\n    rose.summary(e => isRightLookup()\n        , [tl_prefix,tl_prefetch,tl_fuzzy].join(' '))\n\n    rose.summary(e => true, \"impossible summary\")\n\n    //-------- Suggestions ---------------------------------------------------\n\n    rose.subscribe('suggestions', function(context) {\n        var errs = \"\"\n        var njoins = rose.countRepeatParam('joins')\n\n        switch (rose.param('joinmode')) {\n            case joinModeS:\n                var strms = rose.availableStreams()\n                if (rose.isEmptyList(strms))\n                    errs += 'There are no streams declared. Navigate to the top of the project and either create a SQLstream stream or import streams from a SQLstream schema'\n                break\n\n            case joinModeT:\n                var tabs = rose.availableTables()\n                if (rose.isEmptyList(tabs))\n                    errs += 'There are no external or foreign tables declared. Navigate to the top of the project and: 1. create an External Stream with Render Mode \"direct as table\" OR 2a. create an External Connection to the database, then 2b. create an External Table Source for your lookup table.'\n                break\n\n            case joinModeL:\n                var tabs = rose.availableLookupTables()\n                if(rose.isEmptyList(tabs))\n                    errs += 'There are no external tables declared. Navigate to the top of the project and: 1. create an External Connection to the database, then 2. create an External Table Source for your lookup table.'\n                if (njoins > 3)\n                    err += \"'Table Lookup' supports only 1, 2, or 3 joins\"\n                break\n        }\n\n        //-- this check applies to all types\n        if (njoins < 1)\n            errs += 'You must supply one or more join joins'\n\n        if (errs === \"\")\n            return rose.suggest(context,1)\n        else\n            return rose.suggest(context, -100, errs)\n\n    })\n\n\n%>\n\n<% if (isRightLookup()) {\n    //-- for table lookup only\n    var jar = rose.guideSchema('table_lookup_jar');\n    var func = rose.guideOutput('tableLookup');\n\n\n    var joinS = []; //-- columns from stream being joined\n    var joinT= []; //-- corresponding columns from table\n    var colsS = rose.columnList();  //-- all stream columns\n    var colsT = rose.tableColumns(rose.param('tableName')); //-- all table columns\n    var colNameArgs = [];\n\n    rose.repeatParam('joins', function(p, index) {\n        var cp = rose.compoundParam(p);\n        joinS.push(cp.col);\n        joinT.push(cp.col2);\n\n        if(index === 0)\n            colNameArgs.push('colName VARCHAR(128)');\n        else\n            colNameArgs.push('colName' + (index+1) + ' VARCHAR(128)');\n    });\n\n    var tclist = rose.tableColumnList(rose.param('tableName'), joinT);\n    var addedCols = _.difference(colsT, joinT);\n\n    var joinColumns = _.map(joinT, function(j) { return rose.sqlLiteral(j) }).join(', ');\n    colNameArgs = colNameArgs.join(', ');\n\n    //-- handle naming conflicts\n    var subFrom = {};\n    var subSel = {};\n    var jSame = {}; //-- if s == t for a join, then jSame[s] = true\n\n    _.each(joinS, function(s, index) {\n        var t = joinT[index];\n        if(s === t) jSame[s] = true;\n\n        if(s !== t) {\n            subFrom[s] = rose.sqlInColumn(s) + ' AS ' + rose.sqlIdentifier(t);\n            subSel[s] = rose.sqlInColumn(t) + ' AS ' + rose.sqlIdentifier(s);\n        }\n    });\n\n    _.each(_.intersection(colsS, colsT), function(s) {\n        if(jSame[s]) return; //-- no renaming necessary\n\n        subFrom[s] = rose.sqlInColumn(s) + ' AS ' + rose.sqlIdentifier(s + '_stream');\n\n        //-- protect against null/undefined joinT\n        if(joinT && _.contains(joinT, s))\n            subSel[s] = rose.sqlIdentifier(s + '_stream') + ' AS ' + rose.sqlIdentifier(s);\n\n    });\n\n    _.each(addedCols, function(t) { subSel[t] = rose.sqlIdentifier(t) });\n\n    var fromColumns = rose.substituteColumnsWithExpressions(subFrom);\n    var selectColumns = rose.substituteColumnsWithExpressions(subSel);\n\n\n%>\n\n<%= rose.tableRender(rose.param('tableName')) %>\n\n<%= rose.createSqlObj('JAR', jar, {wasCoR: true}) %>\n    SYSTEM LIBRARY 'file:plugin/TableLookup.jar'\n    OPTIONS(0);\n\n<%= rose.createSqlObj('FUNCTION', func) %>(\n        c CURSOR,\n        controlCmds CURSOR,\n        dsName VARCHAR(64),\n        tableName VARCHAR(128),\n        <%= colNameArgs %>,\n        cacheSize INTEGER,\n        prefetchRows BOOLEAN,\n        fuzzyLookups BOOLEAN)\n    RETURNS TABLE(c.*, <%= tclist %>)\n    LANGUAGE JAVA\n    PARAMETER STYLE SYSTEM DEFINED JAVA\n    NO SQL\n    EXTERNAL NAME '<%= jar %>:com.sqlstream.plugin.tablelookup.TableLookup.lookup';\n\n--  Control stream for table lookup: <%= rose.guideOutput('lookupControl') %>\n<%= rose.createSqlObj('STREAM', rose.guideOutput('lookupControl')) %>(\n    \"SQLS_cmd\" VARCHAR(12) NOT NULL,\n    \"SQLS_reason\" VARCHAR(100)\n);\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= selectColumns %>\n    FROM <%= rose.local('stream') %> (<%= func %>(\n        CURSOR(SELECT <%= rose.local('stream') %> <%= fromColumns %> FROM <%= rose.guideInput() %> AS \"input\"),\n        CURSOR(SELECT STREAM * FROM <%= rose.guideOutput('lookupControl') %>),\n        <%= rose.sqlLiteral('LOCALDB.' + rose.param('tableName')) %>,\n        CAST(NULL AS VARCHAR(32)),\n        <%= joinColumns %>,\n        <%= rose.param('cache') %>,\n        <%= rose.param('prefetch') %>,\n        <%= rose.param('fuzzy') %>\n    )) AS \"input\"  ;\n\n<% } else {\n    //-- for stream and table joins\n    \n    //--var joinInput = []\n    var joinRHS= []         //-- corresponding columns from join stream / table on the righthand side\n    var joinPredicates = [] //-- build up the hoin clause\n\n    //-- pick out the join columns\n\n    rose.repeatParam('joins', function(p, index) {\n        var cp = rose.compoundParam(p)\n        //--joinInput.push(cp.col)\n        joinRHS.push(cp.col2)\n        joinPredicates.push('\"input\".'+rose.sqlIdentifier(cp.col)+' = \"rhs\".'+rose.sqlIdentifier(cp.col2))\n    })\n\n\n    var rowWindowClause = function(rtype, rownum, untilFlag) {\n        //--var rtypeval = rose.param(rtype)\n        //-- unlike aggregate, we don't allow unbounded preceding so we don't need rowXXXtype so force nRows\n        var rtypeval = nRows\n\n        var rownumval = rose.param(rownum)\n\n        if (untilFlag && (rtypeval === curRow || (rtypeval === nRows && rownumval === '0'))) {\n            //-- no clause needed - current / 0 'until row' specified\n            return \"\"\n        }\n\n        return (rtypeval === nRows)?(rownumval+\" PRECEDING\"):rtypeval\n    }\n\n\n    var getWindowClause = function (joinside) {\n        var windowClause = \"\"\n\n        switch (rose.param(joinside+'windowtype')) {\n            case windowOptNone:\n                break\n\n            case windowOptRows:\n                var preamble = 'OVER ('\n\n                var startclause = rowWindowClause(joinside+'rowstarttype',joinside+'rowstart',false)\n                var endclause = rowWindowClause(joinside+'rowendtype', joinside+'rowend', true)\n\n                if (endclause === \"\")\n                    windowClause = preamble + 'ROWS ' + startclause + ')'\n                else\n                    windowClause = preamble + 'ROWS BETWEEN ' + startclause + ' AND ' + endclause + ')'\n                break\n\n            case windowOptTime:\n                var intervalbuilder = function(tWin) {\n                    return 'INTERVAL ' + rose.sqlLiteral(tWin.len) + ' ' + tWin.unit\n                }\n\n                windowClause = rose.timewindowWindowClause(joinside+'timestart', [], false).replace('WINDOW \"aWindow\" AS','OVER')\n\n//--            if (winhop.len > 0) {\n//--                //-- insert the ORDER BY clause\n//--                var hopper = 'ORDER BY STEP(\"input\".ROWTIME BY '+intervalbuilder(winhop)+') RANGE'\n//--                windowClause = windowClause.replace('RANGE', hopper)\n//--            }\n\n                var winend = rose.timewindowParam(joinside+'timeend',false)\n\n                if (winend.len > 0) {\n                    //-- insert BETWEEN\n                    windowClause = windowClause.replace('RANGE','RANGE BETWEEN')\n                    //-- insert the ending time\n                    var ender = 'PRECEDING AND ' + intervalbuilder(winend) + ' PRECEDING'\n                    windowClause = windowClause.replace('PRECEDING', ender)\n                }\n\n                break\n        }\n\n        return windowClause\n    }\n\n    if (isLeftStream())\n        leftWindow = getWindowClause('left')\n\n    if (isRightStream())\n        rightWindow = getWindowClause('right')\n\n    var colsInput = rose.columnList()  //-- all source (pipeline) columns\n    var colsRHS = isRightStream() ? rose.streamColumns(rose.param('tableName')) : rose.tableColumns(rose.param('tableName'))  //-- all RHS columns\n\n    //-- build up list of target columns to include; rename them where necessary to avoid clash with source columns\n\n    var columnsRHS = []\n\n    //-- protect against null/undefined joinRHS / colsInput use with contains - however unlikely\n    if (joinRHS && colsInput.length && !rose.isEmptyList(colsRHS)) {\n        _.each(colsRHS, function(col,index) {\n            var alias = \"\"\n            //-- only include columns which are not in the equijoin\n            //-- TODO check whether any reason not to drop these columns\n            if (!joinRHS.contains(col)) {\n                if (colsInput.contains(col))\n                    alias= ' AS '+ rose.sqlIdentifier('t_'+col)\n\n                columnsRHS.push('\"rhs\".' + rose.sqlIdentifier(col) + alias)\n            }\n        })\n    }\n\n    var fromColumnsRHS = \"/** NO RHS COLUMNS **/\"\n\n    if (columnsRHS.length > 0)\n        fromColumnsRHS = columnsRHS.join(', ')\n\n\n\n\n    var joinClause = \"/** NO JOIN CLAUSE **/\"\n    if (joinPredicates.length > 0)\n        joinClause = 'ON (' + joinPredicates.join(' AND ') + ')'\n\n\n    var tableNameRHS = rose.param('tableName')\n    var tableNameParts = []\n    if (tableNameRHS) {\n        tableNameParts = tableNameRHS.split('\\.')\n        _.each(tableNameParts, function(s, index) {\n             tableNameParts[index] = rose.sqlIdentifier(s)\n        })\n\n        tableNameRHS = tableNameParts.join(\".\")\n    }\n\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> \"input\".*, <%= fromColumnsRHS %>\n    FROM <%= rose.guideInput() %>  <%= leftWindow %> AS \"input\"\n    <%= rose.param('jointype').toUpperCase() %> <%= tableNameRHS %> <%= rightWindow %> AS \"rhs\"\n        <%= joinClause %>  ;\n\n<% }  %>\n\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Join","public":true,"doc":"## Join\n\n**Analytics / Join** lets you combine data in the guide with data from another stream or table.\n\nYou do so by joining one or more of the columns in the guide with corresponding columns in the other stream or table.\nFor example, if your guide has columns of data on bus positions and speed, and one of the columns, contains a driver\nidentification number, you might join the guide with a database table that has information on the driver's names matched\nto their identification numbers. By doing so, you can enrich your guide by adding columns from the `DRIVERS` table.\n\n**Join** supports stream/stream, stream/table, table/stream and table/table joins, implemented using the <a href=\"https://docs.sqlstream.com/sql-reference-guide/select-statement/join-clause/\" target=\"\\_blank\">SQL `JOIN` clause</a>.\n\nIt also offers a mode called **lookup**, which provides some control over whether and how records in the lookup table are cached.\nThe **lookup** mode is implemented using the <a href=\"https://docs.sqlstream.com/analyzing-data/transforming-data-in-s-server/tablelookupudx/\" target=\"\\_blank\">TableLookup UDX</a>.\n\nTo use Analytic / Join, fill in each parameter\n\n - **left window**: (only shown if the guide source is streaming) you may specify **none**, **rows**, or **time** to choose if you need a window on the guide input, and if so should it be physical (rows) or logical (time)\n   - if you choose **rows** you will see **rows from** and **rows until** parameters; this allows you to define a window `ROWS BETWEEN <rows from> ROWS AND <rows until> ROWS PRECEDING`. If **rows until** is 0, the clause will be `ROWS <rows from> PRECEDING` and all rows up to the current row will be included.\n   - if you choose **time** you will see **time from** and **time until** parameters; this allows you to define a window `RANGE BETWEEN INTERVAL <time from> AND INTERVAL <time until>`. If **time until** is 0 (for any unit of time) the clause will be `RANGE INTERVAL <time from> PRECEDING`.\n - **to**: choose whether you are joining to a **stream** or **table**, or choose the **lookup** option (which is not available if the guide source is non-streaming)\n - **join type**: (not shown for lookup) choose one of **inner join, left join, right join, full join**\n - **join to**: select which stream or table to join from the dropdown list. The selection will change depending on the value for **to**; for **stream** you see a list of streams, for **table** a list of tables, and for **lookup** a list of _external_ tables.\n - **right window**: (only shown if you are joining to a stream)  you may specify **none**, **rows**, or **time** to choose whether you require a window on the joined-to stream, and if so, what type. Additional row or time, from and until parameters (as for the **left window**) will appear if required. The window types for the left window and the right window do not need to be the same.\n - **predicate**: select a pair of columns to match. You can match on more than one pair of columns by pressing the **+** button in the top right of the parameter box.\n   - you must provide at least one predicate (join condition)\n   - each match is treated as an equi-join - `guidecolumn = jointocolumn`\n   - note that **lookup** supports a maximum of three predicates\n\nTo learn more about windows in streaming joins, see the <a href=\"https://docs.sqlstream.com/sql-reference-guide/select-statement/window-clause/\" target=\"\\_blank\">SQL `WINDOW` clause</a>.\n\n**JOIN to a stream**\n - the **join to** can be an **SQLstream Stream**, or an **External Stream** that has been created with a Render Mode of either _Standard: FS->pump->stream_ or _Directly as stream_ (implemented as a`FOREIGN STREAM`)\n - SQLstream Streams can be defined from the Sources (either creating them individually or using **Import SQLstream Schema**)\n - Don't forget to **Discover columns** when you define a SQLstream Stream individually or as part of a schema\n - It is legitimate to join a stream to itself (especially when using windowing)\n\n**JOIN to a table**\n - The **join to** can be an **External Table**, or an **External Stream** that has been created with a Render Mode of _Directly as table_ (which is implemented as a `FOREIGN TABLE`)\n - Native (s-Server) tables are also supported\n - It is legitimate to join a table to itself. For example you might want to join `SALES.EMPS` to itself to get information about the employee's manager\n - **NOTE** the entire table will be read into memory when the guide starts running; this means that:\n   - the table must fit into memory\n   - changes to the data in the table after the guide starts running are not reflected in the resulting query output\n\n![](/images/doc/sl_join_streams.png)\n\n**Lookups**\n - To use the lookup **lookup**, you first need to create an external connection.\n - You can only join to an **External Table**.\n - If you know the number of rows contained in the external table, you can speed processing by entering a cache size and clicking the Prefetch Rows option.\n - You can use a feature called fuzzy lookup if your column uses numbers, and if these numbers only need to be close. Working with latitudes and longitudes is good use case for this setting, since you will not necessarily get an equals match when joining on latitude or longitude. In this case, with fuzzy set to true, numbers that are close to each other will match.\n - For more information on external tables, see <a href=\"https://docs.sqlstream.com/streamlab/adding-an-external-connection/\" target=\"\\_blank\">Adding an External Connection in the StreamLab Guide</a>.\n - Once you have an external table added as a source, it will be available in the table menu of the Table Lookup command.\n\n![](/images/doc/sl_table_lookup.png)\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/timesort.sql":{"value":"-- Time Sort\n<%= rose.panel('params') %>\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    rose.localSet('docsDismissed', true);\n\n    rose.param({id: 'column', title: \"column\", defval:\"\", type: \"choice\", width: 120, freeze: true,\n        valuesFunc: function() { return rose.timeColumnList()},\n        values: [\"table not available\"]  });\n    rose.param({id: 'window', title: 'time window', repeats: false, type: 'timewindow', defval: \"1 minute\", width: 170});\n    /*\n    rose.param({id: 'promote', title: \"promote to ROWTIME?\", type: \"boolean\", defval: false, width: 180});\n    */\n\n\n    rose.subscribe('column', function(e, col, columns) {\n        var c = columns[0];\n        if(c && _.contains(rose.timeColumnList(),c)) e.setPath('params.column', c);\n    });\n\n\n    /*\n    rose.summary(function(e) {\n        return !rose.param('promote');\n    }, \"Sort by the time in {{column}} over the window {{window}}\");\n    */\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Sort by the time in {{column}} over the window {{window}} and promote to ROWTIME\");\n\n    rose.subscribe('suggestions', function(context) {\n        //-- If there are no time columns, complain. If we're streaming and there's only one, complain\n        var cols = rose.columnList(false, 'time');\n        if(cols.length == 0)\n            return rose.suggest(context, -10, \"'TimeSort' works only on time data, and there are no time columns. Try using 'Parsers:Timestamp' to convert a column to a time type.\");\n\n        if(context.streaming && cols.length === 1 && cols[0] === 'ROWTIME')\n            return rose.suggest(context, -10, \"'TimeSort' works only on time data, and there are no time columns other than ROWTIME (streams are already sorted by ROWTIME). Try using 'Parsers:Timestamp' to convert a column to a time type.\");\n\n        var errs = \"\";\n\n        if(rose.param('column') === 'ROWTIME' && context.streaming)\n            errs += \"Streams are already sorted by ROWTIME. Please choose another column to perform a time sort.\";\n\n        //-- No need to check time window if we already have the error above.\n        if(!errs) {\n            var win = rose.timewindowParam('window', true);\n            if(!win.valid) errs += \"Specify time window. \";\n        }\n\n        if(errs)\n            rose.suggest(context, -100, errs);\n        else\n            rose.suggest(context, 1);\n    });\n\n    //-- for time sort we must ALWAYS promote the selected column to ROWTIME (bug 5797)\n    //-- var x = rose.param('promote') ? [{col:rose.param('column'), to: 'ROWTIME'}] : [];\n    var x = [{col:rose.param('column'), to: 'ROWTIME'}];\n    var win = rose.timewindowParam('window', true);\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rose.renameColumns(x) %>\n    FROM <%= rose.guideInput() %> AS \"input\"\n    ORDER BY <%= rose.sqlInColumn(rose.param('column')) %> WITHIN INTERVAL <%= rose.sqlLiteral(win.len) %> <%= win.unit %>;\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Time Sort","public":true,"doc":"## Time Sort\nThe Time Sort uses a sliding time-based window of incoming rows to reorder those rows by the selected column or by ROWTIME in order to address time synchronization problems with data. For example, sometimes data arriving from multiple sources may not be time-synchronized. Such problems can produce unreliable results from analytics, which typically depend on arriving data being ordered by ROWTIME.\n\nYou will likely only need to use this command if you are seeing unreliable results in your data that are time-related.\n\nIn the Time Sort command, you can also choose to promote a selected column to rowtime. You do so in cases where you know that another column contains a timestamp more relevant than the time the row entered s-Server. This might be, for example, the time an earthquake actually occurred instead of the time the row enters s-Server. These values can have slight lags, making data calculations less reliable.\n\nTo implement a Time Sort command:\n\n1. Select a column containing a time stamp.\n1. Enter a window length and unit on which to sort rows.\n1. Choose whether or not to promote the row to ROWTIME.\n1. Click the + icon  in the Suggestions list to add the command to the Guide script.\n1. The results of the script appear in the Output View window.\n\n![](/images/doc/sl_time_sort.png)\n\nFor more information on time sorting input, see <a href=\"https://docs.sqlstream.com/sql-reference-guide/select-statement/order-by-clause/#t-sorting-stream-input\" target=\"\\_blank\">T-Sorting Stream Input in the s-Server Streaming SQL Reference Guide</a>.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/newColumn.sql":{"value":"-- New Column Operation\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n\n    rose.param({id: 'column', title: \"new column\", type: \"string\", defval: \"result\", width: 160, freeze: true});\n    rose.param({id: 'expression', title: \"SQL expression\", tooltip: 'Enter a SQL expression', type: \"string\", defval: \"\", width: 'end'});\n\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Create a new column named {{column}} containing {{expression}}\");\n\n\n    rose.subscribe('suggestions', function(context) {\n        var col = rose.param('column').trim();\n        var exp = rose.param('expression');\n        var errs = [];\n\n        if(!col)\n            errs.push(\"Enter a new column name.\");\n\n        if(!exp)\n            errs.push('Enter a SQL expression for the new column. You can refer to other columns by quoting their names with \"\" (double quotes). Literal strings should be quoted in \\'\\' (single quotes).');\n\n        if(errs.length)\n            rose.suggest(context, -100, errs.join(' '));\n        else\n            rose.suggest(context, 1);\n    });\n\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %>\n           <%= rose.param('expression') %> AS \"<%= rose.param('column').trim() %>\", *\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"New Column","public":true,"doc":"## New Column\nThe New Column analytic lets you add a column to the guide using a SQL expression. Using this feature requires both knowledge of SQL and knowledge of s1.Server's current contents (in that you will need to work with streams and tables in s1.Server).\n\nTo add a new column:\n\n1. Enter a name for the column.\n1. Enter a SQL expression for the column.\n1. Click the + icon to add the command to the Guide script.\n1. The new column appears in the Output View window.\n\n![](/images/doc/sl_new_column_analytic.png)\n\nFor more information on views, <a href=\"https://docs.sqlstream.com/sql-reference-guide/create-statements/createview/\" target=\"\\_blank\">see the topic CREATE VIEW in the s-Server Streaming SQL Reference Guide</a>.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/callUDX.sql":{"value":"-- Invoke a UDX with one or more arguments\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n\n    rose.param({id: 'func', title: \"function name\", width: 260, type: \"string\", defval: \"\"});\n    rose.param({id: 'args', title: 'argument', repeats: true, type: 'udxarg', defval: \"\",\n        columnsFunc: function() { return rose.udxargMenu() },\n        width: 160\n    });\n\n    rose.param({id: 'type', title: \"output is\", type: \"choice\", defval: \"STREAM\", width: 100,\n        values: ['STREAM', 'TABLE']});\n\n    rose.param({id: 'rowtime', title: \"ROWTIME column is\", width: 220, type: \"string\", defval: \"CURRENT_ROW_TIMESTAMP\",\n        visibleWhen: function() { return rose.param('type') == 'TABLE' }\n    });\n\n\n    rose.summary(function(e) {\n        return rose.param('type') === 'TABLE';\n    }, \"Call the {{type}} UDX {{func}}({{args}}) using {{rowtime}} for the ROWTIME column\");\n\n    rose.summary(function(e) {\n        return true\n    }, \"Call the {{type}} UDX {{func}}({{args}})\");\n\n\n    rose.subscribe('suggestions', function(context) {\n        var func = rose.param('func').trim();\n\n        if(!func)\n            rose.suggest(context, -100, 'Enter the function name of a UDX (user-defined transform).');\n        else\n            rose.suggest(context, 1);     //-- suggest the current settings\n    });\n\n    var x = rose.param('rowtime');\n    var rt = '';\n    if(rose.param('type') === 'TABLE' && x !== 'ROWTIME' && x !== '')\n        rt = rose.sqlIdentifier(x) + ' AS ROWTIME, ';\n\n    var st = rose.local('stream');\n\n    var inputCursor = 'CURSOR( SELECT ' + st + ' * FROM ' + rose.guideInput() + ' AS \"input\")';\n\n    var argList = [];\n    rose.repeatParam('args', function(p, index) {\n        argList.push(rose.udxargParam(p, inputCursor));\n    });\n\n    var args = argList.join(',');\n    var func = rose.sqlProtect(rose.param('func').trim());\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n    SELECT <%= rose.local('stream') %> <%= rt %> *\n    FROM <%= rose.param('type') %>(<%= func %>(<%= args %>));\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Call UDX","public":true,"doc":"## Call UDX\nCall a UDX with no arguments.\n\nThis command lets you enter the name of a predefined custom user transform. You need to provide the full name of the function (including schema).\n\nA user-defined transform is a user-defined function that returns a table or a stream.\n\nThe UDX does have to be predefined and it cannot take arguments.\n\nIt can return either a table or a stream. If it is a table you can specify a column that will contain the ROWTIME.\n\nFor more information on UDXs, please see the topic, <a href=\"https://docs.sqlstream.com/analyzing-data/transforming-data-in-s-server/\" target=\"\\_blank\">see the topic Transforming Data in s-Server in the Integrating SQLstream with Other Systems guide</a>.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/injectSQLview.sql":{"value":"-- Custom SQL view\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true)\n\n    rose.param({id: 'mode', title: \"use SQL\", defval:\"\", type: \"choice\", width: 210,\n        values: [\"inside SELECT clause\", \"instead of SELECT .. FROM ...\"]  })\n    rose.param({id: 'sql', title: \"SQL\", width: 'end', type: \"string\", defval: \"\"})\n\n    function noSelect(r) { return /^instead/.test(r.param('mode')) }\n\n    rose.summary(e => noSelect(rose),\n        'Custom SQL view using SQL {{mode}}: CREATE VIEW <span style=\"font-style: italic\">output</span> AS {{sql}}')\n\n    rose.summary(e => rose.isStreamingGuide(),\n        'Custom SQL view using SQL {{mode}}: CREATE VIEW <span style=\"font-style: italic\">output</span> AS SELECT STREAM {{sql}} FROM <span style=\"font-style: italic\">input</span>')\n\n    rose.summary(e => true,\n        'Custom SQL view using SQL {{mode}}: CREATE VIEW <span style=\"font-style: italic\">output</span> AS SELECT {{sql}} FROM <span style=\"font-style: italic\">input</span>')\n\n\n    rose.subscribe('suggestions', function(context) {\n        if(!rose.param('sql')) {\n            if(noSelect(rose)) {\n                rose.suggest(context, -100,\n                    \"Enter the SQL to transform the current stream. Only the output name will be inserted, the user has full control over the rest of the statement. Use <input> to indicate where the previous step's view should be inserted.\")\n            } else {\n                rose.suggest(context, -100,\n                    \"Enter a SQL SELECT clause to transform the current stream. Enter the SQL between SELECT and FROM, the rest of the statement will be filled in.\")\n            }\n        } else {\n            rose.suggest(context, 1)\n        }\n    })\n\n    var sql = rose.param('sql')\n    if(noSelect(rose))\n        sql = sql.replace(/<input>/g, rose.guideInput())\n\n%>\n\n<%= rose.createSqlObj('VIEW', rose.guideOutput()) %> AS\n<% if(noSelect(rose)) { %>\n    <%= sql %>;\n<% } else { %>\n    SELECT <%= rose.local('stream') %> <%= sql %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n<% } %>\n\n<% rose.guideAdvance() %>\n","external":true,"binary":false,"title":"Custom View","public":true,"doc":"## Custom View\nCreate a custom SQL view on the stream.\n\nThe SQL you enter here will be used to transform the stream you are building in the Guide.\n\nThe actual SQL added to the script will be in the following form:\n\n```\n   CREATE VIEW (output) AS SELECT (stream) <<your SQL here>> FROM (input)\n```\n\n(input), (output) and (stream) are all filled in by StreamLab.\n\nFor more information on views, <a href=\"https://docs.sqlstream.com/sql-reference-guide/create-statements/createview/\" target=\"\\_blank\">see the topic CREATE VIEW in the s-Server Streaming SQL Reference Guide</a>.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/injectSQL.sql":{"value":"-- Hand-written SQL\n<%= rose.panel('params') %>\n<% \n    rose.localSet('docsDismissed', true);\n\n    rose.param({id: 'sql', title: \"Complete SQL statement\", width: 'end', type: \"string\", defval: \"\"});\n\n    rose.summary(function(e) {\n        return true\n    }, \"Custom SQL: {{sql}}\");\n\n    rose.subscribe('suggestions', function(context) {\n        if(!rose.param('sql'))\n            rose.suggest(context, -100, \"Enter a SQL statement\");\n        else\n            rose.suggest(context, 1);\n    });\n\n    var semi = /;\\s*$/.test(rose.param('sql')) ? '' : ';' ;\n%>\n\n<%= rose.param('sql') %><%= semi %>\n","external":true,"binary":false,"title":"Custom SQL","public":true,"doc":"## Custom SQL\nThe Custom SQL analytic lets you run any block of SQL in s-Server. This SQL is not added to the pipeline, but is added to the Script. In order to add SQL to the pipeline, you should use the Custom View command.\n\nFor more information on s-Server's streaming SQL, see <a href=\"https://docs.sqlstream.com/sql-reference-guide/\" target=\"\\_blank\">the s-Server Streaming SQL Reference Guide</a>.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-multipanel.sql":{"value":"-- Dashboard with multiple panels\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n    rose.localSet('suppressOptimizationIfModified', true);\n\n    rose.param({id: 'pcols', repeats: true, title: \"Panel columns\", type: \"string\", defval: \"\"});\n\n    rose.summary(function(e) {\n        return true;\n    }, 'Create a dashboard with columns assigned to panels: {{pcols}}');\n\n    rose.focusMap({\n        column: [],\n        columnList: ['pcols'],\n        row: [],\n        start: [],\n        end: [],\n        text: []\n    });\n\n    function allValid(r) {\n        var valid = true;\n\n        r.repeatParam('pcols', function(p, index) {\n            var pcol = r.param(p);\n            if(!r.validColumnList(pcol)) valid = false;\n        });\n\n        return valid;\n    }\n\n    rose.subscribe('suggestions', function(context) {\n        if(rose.countRepeatParam('pcols') > 6)\n            return rose.suggest(context, -100, 'This interface supports 1 to 6 panels')\n\n        if(allValid(rose))\n            rose.suggest(context, 110);     //-- suggest the current settings\n        else\n            rose.suggest(context, -100, 'Enter a comma-separated list of columns for each panel');\n    });\n\n    var n = Math.min(rose.countRepeatParam('pcols'), 6);\n    rose.local('whichDash', n);\n    rose.dashboard('/dashboard-templates/panels-multi.json');\n\n    var dashName = rose.guideDash();\n    var dashStream = rose.obj2fqn(dashName);\n    var dashPump = rose.dash2pumpFQN(dashName);\n%>\n\n<%= rose.createSqlObj('STREAM', dashStream) %>(\n<%= rose.columnDefinitions('ROWTIME') %>);\n\n<%= rose.createPump(dashPump, dashStream) %>\nSELECT STREAM * FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideDashAdvance() %>\n","external":true,"binary":false,"title":"One or More Panels","public":true,"doc":"## One or More Panels\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-chartjs-bars.sql":{"value":"-- Bar Graph Dashboard\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n    rose.localSet('suppressOptimizationIfModified', true);\n\n    rose.param({id: 'dataColumns', title: \"Data columns\", type: \"string\", defval: \"\", width: 'end'});\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Create a bar graph of the columns {{dataColumns}}\");\n\n    rose.focusMap({\n        column: [],\n        columnList: ['dataColumns'],\n        row: [],\n        start: [],\n        end: [],\n        text: []\n    });\n\n    rose.subscribe('suggestions', function(context) {\n        var dc = rose.param('dataColumns');\n        if(rose.validColumnList(dc))\n            rose.suggest(context, 110);     //-- suggest the current settings\n        else\n            rose.suggest(context, -100, 'Enter a comma-separated list of columns');\n    });\n\n    rose.dashboard('/dashboard-templates/chartjs-bars.json');\n\n    var dashName = rose.guideDash();\n    var dashStream = rose.obj2fqn(dashName);\n    var dashPump = rose.dash2pumpFQN(dashName);\n%>\n\n<%= rose.createSqlObj('STREAM', dashStream) %>(\n<%= rose.columnDefinitions('ROWTIME') %>);\n\n<%= rose.createPump(dashPump, dashStream) %>\nSELECT STREAM * FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideDashAdvance() %>\n","external":true,"binary":false,"title":"Bar Graph","public":true,"doc":"## Bar Graph\nA bar graph shows each numerical row as a bar. s-Dashboard displays each numerical column regardless of its range. Data will be most useful if columns are in comparable ranges.\n\nAs with other panels, you can set preferences for the bar graph panel by clicking the Preferences icon.\n\nThis panel is built with Chart.js and is highly customizable. For example, this panel has a bar border width field that specifies the border width to use when drawing the bars. These properties can be a single value, such as 2, or a comma-separated list, like 2,3,2. Single values apply to all the data columns, while a list applies to each data column in turn. So if there are columns alpha, beta, gamma, and delta, and the bar border width is 2,3,2, the bar corresponding to the beta column would have a border width of 3 while the other bars would have a border width of 2.\n\nThis feature is most useful for properties that specify a color. You can specify a list of colors explicitly, such as red,green,blue, or rgba(255,0,0,1.0),rgba(0,255,0,1.0),rgba(0,0,255,1.0). You may also access the palettes provided by [Rickshaw](http://code.shutterstock.com/rickshaw/) by entering a value like palette(colorwheel,1.0). colorwheel can be any of the Rickshaw palettes: classic9, colorwheel, cool, munin, spectrum14, spectrum2000, spectrum2001. 1.0 is the alpha value to apply to the colors.\n\nIf you enable Advanced Options, you can edit the options portion of the Chart.js spec as a JSON object. You can learn more about customizing panels with Chart.js by looking at the Chart.js* documentation at http://www.chartjs.org/docs/.\n\nOnce the dashboard opens, you can modify it with *panel preferences* or by modifying the layout.\n\nYou can configure how data flows into the panel using [Panel Input Preferences](#configuring-panel-input-preferences).\n\n## Configuring Panel Input Preferences\nEach panel gets its input from one stream, view, or table. There are separate preferences for how the frame reads its input and for whatever panel is selected.\n\nTo set input preferences:\n\n1. Click the Configure Input Preferences Icon\n2. The Input Preferences dialog box opens.\n\nYou can configure input preferences in four main categories:\n\n - [Configuring Data Windows](#configuring-data-windows)\n - [Throttling the Input Stream](#throttling-the-input-stream)\n - [Using Key Columns](#working-with-key-columns)\n - [Treating Views as Tables](#treating-views-as-tables)\n - [Using a Custom Select Template](#using-the-select-template-option)\n\nOnce you configure preferences, click Update. You can change preferences at any time.\n\n### Configuring Data Windows\nThe nature of streaming data means that it continually updates. This means that dashboards always display a subset of the data emitted from your source, such as \"all failed logins from the last minute\" or \"all buses speeding over the past hour.\"\n\nWe use the term *data window* to refer to how s-Dashboard displays data in terms of time. (Some dashboards can only display one row at a time.) The data window can be a fixed number (\"20 rows\"), a fixed number per category (\"20 rows for each department\") a fixed time period (\"every hour on the hour\"), a sliding time period (\"all data from the last sixty minutes\").\n\nThe first thing you want to determine, then, is how you want to configure your data window. (You can always change this by returning to Input Preferences.)\n\nChoose one of the following four options:\n\n| Data Window | Description |\n| --- | --- |\n| N Rows | A specified number of rows. When you choose N Rows, a dialog box appears that lets you enter a number. Very high numbers may affect performance. |\n| N Rows Per Key | s-Dashboard lets you use a column to divide your data into categories. This column is called the key column, and can be a list of cities, departments, countries, regions, products, and so on--any category into which your data can be grouped. N Rows Per Key works the same as N Rows, but lets you enter a number per category. When you choose N Rows Per Key, a dialog box appears that lets you enter a number. Very high numbers may affect performance. |\n| Sliding Time Period | All streaming rows have a timestamp called ROWTIME. This means that you can tell s-Dashboard \"give me all the rows in the past hour\" or \"give me all the rows in the past minute\" and so on. Again, high numbers may affect performance, so experiment accordingly. | This is the most common way to view time series data. |\n| Tumbling Time Period | This data window also uses ROWTIME, and lets you tell s-Dashboard \"give me data for an hour, then clear data, then give me data for the next hour,\" at, for example, 2:00 PM, 3:00 PM, 4:00 PM, and so on. |\n\n## Throttling the Input Stream\nYou can choose to *throttle* the input stream. Once you select *Throttled*, a text box appears that allows you to specify a number of rows per second. The default throttled rate is 100 rows per second.\n\nThrottling data for a panel is separate from throttling data in StreamLab. Dashboards pull data directly from s-Server, even if you have set them up through StreamLab. (This is why you can share dashboards independently of StreamLab.)\n\n## Working with Key Columns\nSome panels let you group data into categories, using a special column called the *key column*. A key column has a limited set of values that categorize the values in other columns, such as cities, departments, product lines, and so on. You can enter the name of this key column in Input Preferences. You need to generate this column as part of your data before using it in s-Dashboard. You could, for example, use the Categorize Analytic in StreamLab to set up a stream with multiple categories.\n\nThe panels in the View Rows Over a Key Column display one row for each category in the key column. For example, you can use the Bars Over Key panel to group a bar chart.\n\n### Forgetting s-Server Content\nThe first time you use the Select Input command, s-Dashboard caches the catalog for s-Server. That is, it identifies all schemas, streams, views, and tables. If your development team has added a new schema, stream, table, or view to s-Server, then these objects will not be available in s-Dashboard unless you use the Invalidate Cache command.\n\nThe Invalidate Cache command clears the cache of the currently-stored catalog and requests an updated version of the catalog from s-Server.\n\nTo do so:\n\n1. Click the s-Dashboard menu icon on the outermost frame.\n2. Choose Forget s-Server Contents.\n\nThe old catalog is discarded and an updated catalog is retrieved. When you select input, newly added schemas, streams, tables, and views will appear in the Select Input dialog box.\n\n### Treating Views as Tables\nBy default, s-Server assumes views are of streaming data, but they can refer to tables. If you know that your view refers to a table, you can use the Treat View as a Table command to ask s-Dashboard to treat the view as a table (and therefore check the server less frequently.\n\n### Using the SELECT Template Option\nBy default, the dashboard uses either _SELECT \\* FROM \\<input\\> SELECT_ (if Include ROWTIME is not selected) or _SELECT STREAM ROWTIME,* FROM \\<input\\>_ (if Include ROWTIME is selected). You can use the SELECT template field to create a custom SELECT statement. This is an advanced feature that requires knowledge of both SQL and JavaScript to use.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-bars-over-time.sql":{"value":"-- Bars Over Time Dashboard\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n    rose.localSet('suppressOptimizationIfModified', true);\n\n    rose.param({id: 'dataColumns', title: \"Data columns\", type: \"string\", defval: \"\", width: 'end'});\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Create a scrolling bar graph of the columns {{dataColumns}} over time\");\n\n    rose.focusMap({\n        column: [],\n        columnList: ['dataColumns'],\n        row: [],\n        start: [],\n        end: [],\n        text: []\n    });\n\n    rose.subscribe('suggestions', function(context) {\n        var dc = rose.param('dataColumns');\n        if(rose.validColumnList(dc))\n            rose.suggest(context, 110);     //-- suggest the current settings\n        else\n            rose.suggest(context, -100, 'Enter a comma-separated list of columns');\n    });\n\n    rose.dashboard('/dashboard-templates/chartjs-bars-over-time.json');\n\n    var dashName = rose.guideDash();\n    var dashStream = rose.obj2fqn(dashName);\n    var dashPump = rose.dash2pumpFQN(dashName);\n%>\n\n<%= rose.createSqlObj('STREAM', dashStream) %>(\n<%= rose.columnDefinitions('ROWTIME') %>);\n\n<%= rose.createPump(dashPump, dashStream) %>\nSELECT STREAM * FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideDashAdvance() %>\n","external":true,"binary":false,"title":"Bars Over Time","public":true,"doc":"## Bars Over Time\nThe Rows Over Time panels all use the rows' ROWTIMES (their timestamps) to display data as it streams. These panels use ROWTIME as the domain (usually, this is the x axis). All numerical columns, such as \"number of web logins\" or \"number of phone logins\" are displayed as the range (the y axis). They will be most useful if these columns are meaningful measurements (as opposed to account numbers or other non-measurement numbers). Sometimes you may need to create a new view on a stream, in order to see only those numerical columns that are meaningful. With the exception of the Time Series panel, you cannot disable individual columns for panels.\n\nFor more information on developing meaningful data, <a href=\"https://docs.sqlstream.com/s-dashboard/panels/panel-development-process/\" target=\"\\_blank\"> the topic Panel Development Process in the s-Dashboard guide</a>. For more information on views, <a href=\"https://docs.sqlstream.com/sql-reference-guide/create-statements/createview/\" target=\"\\_blank\">see the topic CREATE VIEW in the s-Server Streaming SQL Reference Guide</a>.\n\nFor example, the Time Series panel (shown as area) lets you see the values for multiple stream columns as they change over time. Time moves from right to left, with the latest rows appearing as the visualization moves left.\n\n![](/images/doc/sd_rows_over_time_line.png)\n\n### Bars Over Time\nThis panel is highly customizable with Panel Preferences. You can change the bars' orientation, color, width, as well as other options. Because this panel is built using Chart.js, you can also edit Chart.js options directly to customize the panel further. See the Chart.js documentation for all of the options that can be set this way.\n\nOnce the dashboard opens, you can modify it with *panel preferences* or by modifying the layout.\n\nYou can configure how data flows into the panel using [Panel Input Preferences](#configuring-panel-input-preferences)\n\n## Configuring Panel Input Preferences\nEach panel gets its input from one stream, view, or table. There are separate preferences for how the frame reads its input and for whatever panel is selected.\n\nTo set input preferences:\n\n1. Click the Configure Input Preferences Icon\n2. The Input Preferences dialog box opens.\n\nYou can configure input preferences in four main categories:\n\n - [Configuring Data Windows](#configuring-data-windows)\n - [Throttling the Input Stream](#throttling-the-input-stream)\n - [Using Key Columns](#working-with-key-columns)\n - [Treating Views as Tables](#treating-views-as-tables)\n - [Using a Custom Select Template](#using-the-select-template-option)\n\nOnce you configure preferences, click Update. You can change preferences at any time.\n\n### Configuring Data Windows\nThe nature of streaming data means that it continually updates. This means that dashboards always display a subset of the data emitted from your source, such as \"all failed logins from the last minute\" or \"all buses speeding over the past hour.\"\n\nWe use the term *data window* to refer to how s-Dashboard displays data in terms of time. (Some dashboards can only display one row at a time.) The data window can be a fixed number (\"20 rows\"), a fixed number per category (\"20 rows for each department\") a fixed time period (\"every hour on the hour\"), a sliding time period (\"all data from the last sixty minutes\").\n\nThe first thing you want to determine, then, is how you want to configure your data window. (You can always change this by returning to Input Preferences.)\n\nChoose one of the following four options:\n\n| Data Window | Description |\n| --- | --- |\n| N Rows | A specified number of rows. When you choose N Rows, a dialog box appears that lets you enter a number. Very high numbers may affect performance. |\n| N Rows Per Key | s-Dashboard lets you use a column to divide your data into categories. This column is called the key column, and can be a list of cities, departments, countries, regions, products, and so on--any category into which your data can be grouped. N Rows Per Key works the same as N Rows, but lets you enter a number per category. When you choose N Rows Per Key, a dialog box appears that lets you enter a number. Very high numbers may affect performance. |\n| Sliding Time Period | All streaming rows have a timestamp called ROWTIME. This means that you can tell s-Dashboard \"give me all the rows in the past hour\" or \"give me all the rows in the past minute\" and so on. Again, high numbers may affect performance, so experiment accordingly. | This is the most common way to view time series data. |\n| Tumbling Time Period | This data window also uses ROWTIME, and lets you tell s-Dashboard \"give me data for an hour, then clear data, then give me data for the next hour,\" at, for example, 2:00 PM, 3:00 PM, 4:00 PM, and so on. |\n\n## Throttling the Input Stream\nYou can choose to *throttle* the input stream. Once you select *Throttled*, a text box appears that allows you to specify a number of rows per second. The default throttled rate is 100 rows per second.\n\nThrottling data for a panel is separate from throttling data in StreamLab. Dashboards pull data directly from s-Server, even if you have set them up through StreamLab. (This is why you can share dashboards independently of StreamLab.)\n\n## Working with Key Columns\nSome panels let you group data into categories, using a special column called the *key column*. A key column has a limited set of values that categorize the values in other columns, such as cities, departments, product lines, and so on. You can enter the name of this key column in Input Preferences. You need to generate this column as part of your data before using it in s-Dashboard. You could, for example, use the Categorize Analytic in StreamLab to set up a stream with multiple categories.\n\nThe panels in the View Rows Over a Key Column display one row for each category in the key column. For example, you can use the Bars Over Key panel to group a bar chart.\n\n### Forgetting s-Server Content\nThe first time you use the Select Input command, s-Dashboard caches the catalog for s-Server. That is, it identifies all schemas, streams, views, and tables. If your development team has added a new schema, stream, table, or view to s-Server, then these objects will not be available in s-Dashboard unless you use the Invalidate Cache command.\n\nThe Invalidate Cache command clears the cache of the currently-stored catalog and requests an updated version of the catalog from s-Server.\n\nTo do so:\n\n1. Click the s-Dashboard menu icon on the outermost frame.\n2. Choose Forget s-Server Contents.\n\nThe old catalog is discarded and an updated catalog is retrieved. When you select input, newly added schemas, streams, tables, and views will appear in the Select Input dialog box.\n\n### Treating Views as Tables\nBy default, s-Server assumes views are of streaming data, but they can refer to tables. If you know that your view refers to a table, you can use the Treat View as a Table command to ask s-Dashboard to treat the view as a table (and therefore check the server less frequently.\n\n### Using the SELECT Template Option\nBy default, the dashboard uses either _SELECT \\* FROM \\<input\\> SELECT_ (if Include ROWTIME is not selected) or _SELECT STREAM ROWTIME,\\* FROM \\<input\\>_ (if Include ROWTIME is selected). You can use the SELECT template field to create a custom SELECT statement. This is an advanced feature that requires knowledge of both SQL and JavaScript to use.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-bars-over-key.sql":{"value":"-- Bars Over Key Dashboard\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n    rose.localSet('suppressOptimizationIfModified', true);\n\n    rose.param({id: 'key', title: \"Key column\", defval:\"\", type: \"choice\", width: 120,\n        valuesFunc: function() { return rose.columnList()},\n        values: [\"table not available\"]  });\n\n    rose.param({id: 'dataColumns', title: \"Data columns\", type: \"string\", defval: \"\", width: 'end'});\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Create a bar graph of the columns {{dataColumns}} grouped by the values in the key column {{key}}\");\n\n    rose.focusMap({\n        column: [],\n        columnList: ['dataColumns'],\n        row: [],\n        start: [],\n        end: [],\n        text: []\n    });\n\n    rose.subscribe('suggestions', function(context) {\n        var key = rose.param('key');\n        var dc = rose.param('dataColumns');\n        if(key && rose.validColumnList(dc))\n            rose.suggest(context, 110);     //-- suggest the current settings\n        else\n            rose.suggest(context, -100, 'Enter a comma-separated list of columns');\n    });\n\n    rose.dashboard('/dashboard-templates/chartjs-bars-over-key.json');\n\n    var dashName = rose.guideDash();\n    var dashStream = rose.obj2fqn(dashName);\n    var dashPump = rose.dash2pumpFQN(dashName);\n%>\n\n<%= rose.createSqlObj('STREAM', dashStream) %>(\n<%= rose.columnDefinitions('ROWTIME') %>);\n\n<%= rose.createPump(dashPump, dashStream) %>\nSELECT STREAM * FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideDashAdvance() %>\n","external":true,"binary":false,"title":"Bars Over Key","public":true,"doc":"## Bars Over Key Panels\n\nThe Rows Over Key panels use a monotonically increasing column to display data as it streams. Other numerical columns, such as \"number of web logins\" or \"number of phone logins\" are displayed as the range (the y axis). They will be most useful if these columns are meaningful measurements (as opposed to account numbers or other non-measurement numbers). Sometimes you may need to create a new view on a stream, in order to see only those numerical columns that are meaningful. With the exception of the Time Series panel, you cannot disable individual columns for panels.\n\nFor more information on developing meaningful data, <a href=\"https://docs.sqlstream.com/s-dashboard/panels/panel-development-process/\" target=\"\\_blank\"> the topic Panel Development Process in the s-Dashboard guide</a>.\n\n\nFor example, the Time Series panel (shown as area) lets you see the values for multiple stream columns as they change over they key column. Time moves from right to left, with the latest rows appearing as the visualization moves left.\n\n### Bars Over Key\nThis panel is highly customizable with Panel Preferences. You can change the bars' orientation, color, width, as well as other options. Because this panel is built using Chart.js, you can also edit Chart.js options directly to customize the panel further. See the Chart.js documentation for all of the options that can be set this way.\n\n## Configuring Panel Input Preferences\nEach panel gets its input from one stream, view, or table. There are separate preferences for how the frame reads its input and for whatever panel is selected.\n\nTo set input preferences:\n\n1. Click the Configure Input Preferences Icon\n2. The Input Preferences dialog box opens.\n\nYou can configure input preferences in four main categories:\n\n - [Configuring Data Windows](#configuring-data-windows)\n - [Throttling the Input Stream](#throttling-the-input-stream)\n - [Using Key Columns](#working-with-key-columns)\n - [Treating Views as Tables](#treating-views-as-tables)\n - [Using a Custom Select Template](#using-the-select-template-option)\n\nOnce you configure preferences, click Update. You can change preferences at any time.\n\n### Configuring Data Windows\nThe nature of streaming data means that it continually updates. This means that dashboards always display a subset of the data emitted from your source, such as \"all failed logins from the last minute\" or \"all buses speeding over the past hour.\"\n\nWe use the term *data window* to refer to how s-Dashboard displays data in terms of time. (Some dashboards can only display one row at a time.) The data window can be a fixed number (\"20 rows\"), a fixed number per category (\"20 rows for each department\") a fixed time period (\"every hour on the hour\"), a sliding time period (\"all data from the last sixty minutes\").\n\nThe first thing you want to determine, then, is how you want to configure your data window. (You can always change this by returning to Input Preferences.)\n\nChoose one of the following four options:\n\n| Data Window | Description |\n| --- | --- |\n| N Rows | A specified number of rows. When you choose N Rows, a dialog box appears that lets you enter a number. Very high numbers may affect performance. |\n| N Rows Per Key | s-Dashboard lets you use a column to divide your data into categories. This column is called the key column, and can be a list of cities, departments, countries, regions, products, and so on--any category into which your data can be grouped. N Rows Per Key works the same as N Rows, but lets you enter a number per category. When you choose N Rows Per Key, a dialog box appears that lets you enter a number. Very high numbers may affect performance. |\n| Sliding Time Period | All streaming rows have a timestamp called ROWTIME. This means that you can tell s-Dashboard \"give me all the rows in the past hour\" or \"give me all the rows in the past minute\" and so on. Again, high numbers may affect performance, so experiment accordingly. | This is the most common way to view time series data. |\n| Tumbling Time Period | This data window also uses ROWTIME, and lets you tell s-Dashboard \"give me data for an hour, then clear data, then give me data for the next hour,\" at, for example, 2:00 PM, 3:00 PM, 4:00 PM, and so on. |\n\n## Throttling the Input Stream\nYou can choose to *throttle* the input stream. Once you select *Throttled*, a text box appears that allows you to specify a number of rows per second. The default throttled rate is 100 rows per second.\n\nThrottling data for a panel is separate from throttling data in StreamLab. Dashboards pull data directly from s-Server, even if you have set them up through StreamLab. (This is why you can share dashboards independently of StreamLab.)\n\n## Working with Key Columns\nSome panels let you group data into categories, using a special column called the *key column*. A key column has a limited set of values that categorize the values in other columns, such as cities, departments, product lines, and so on. You can enter the name of this key column in Input Preferences. You need to generate this column as part of your data before using it in s-Dashboard. You could, for example, use the Categorize Analytic in StreamLab to set up a stream with multiple categories.\n\nThe panels in the View Rows Over a Key Column display one row for each category in the key column. For example, you can use the Bars Over Key panel to group a bar chart.\n\n### Forgetting s-Server Content\nThe first time you use the Select Input command, s-Dashboard caches the catalog for s-Server. That is, it identifies all schemas, streams, views, and tables. If your development team has added a new schema, stream, table, or view to s-Server, then these objects will not be available in s-Dashboard unless you use the Invalidate Cache command.\n\nThe Invalidate Cache command clears the cache of the currently-stored catalog and requests an updated version of the catalog from s-Server.\n\nTo do so:\n\n1. Click the s-Dashboard menu icon on the outermost frame.\n2. Choose Forget s-Server Contents.\n\nThe old catalog is discarded and an updated catalog is retrieved. When you select input, newly added schemas, streams, tables, and views will appear in the Select Input dialog box.\n\n### Treating Views as Tables\nBy default, s-Server assumes views are of streaming data, but they can refer to tables. If you know that your view refers to a table, you can use the Treat View as a Table command to ask s-Dashboard to treat the view as a table (and therefore check the server less frequently.\n\n### Using the SELECT Template Option\nBy default, the dashboard uses either _SELECT \\* FROM \\<input\\> SELECT_ (if Include ROWTIME is not selected) or _SELECT STREAM ROWTIME,* FROM \\<input\\>_ (if Include ROWTIME is selected). You can use the SELECT template field to create a custom SELECT statement. This is an advanced feature that requires knowledge of both SQL and JavaScript to use.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-bars-and-lines.sql":{"value":"-- Bars and Lines Dashboard\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n    rose.localSet('suppressOptimizationIfModified', true);\n\n    rose.param({id: 'barColumns', title: \"Bar graph columns\", type: \"string\", defval: \"\", width: 250});\n    rose.param({id: 'lineColumns',title: \"Line plot columns\", type: \"string\", defval: \"\", width: 250});\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Create a dashboard with a bar chart of {{barColumns}} and a line plot of {{lineColumns}}\");\n\n    rose.focusMap({\n        column: [],\n        columnList: ['barColumns', 'lineColumns'],\n        row: [],\n        start: [],\n        end: [],\n        text: []\n    });\n\n    rose.subscribe('suggestions', function(context) {\n        var bc = rose.param('barColumns');\n        var lc = rose.param('lineColumns');\n        if(rose.validColumnList(bc) || rose.validColumnList(lc))\n            rose.suggest(context, 110);     //-- suggest the current settings\n        else\n            rose.suggest(context, -100, 'Enter comma-separated lists of columns for the bar graph and line plot panels');\n    });\n\n    rose.dashboard('/dashboard-templates/bars_and_lines.json');\n\n    var dashName = rose.guideDash();\n    var dashStream = rose.obj2fqn(dashName);\n    var dashPump = rose.dash2pumpFQN(dashName);\n%>\n\n<%= rose.createSqlObj('STREAM', dashStream) %>(\n<%= rose.columnDefinitions('ROWTIME') %>);\n\n<%= rose.createPump(dashPump, dashStream) %>\nSELECT STREAM * FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideDashAdvance() %>\n","external":true,"binary":false,"title":"Bars and Lines","public":true,"doc":"## Bars and Lines Dashboard\n\nA bar and line dashboard shows two frames:\n\n - A bar graph using data from all numerical columns entered\n - A line graph that plots a numerical value against time. You need to enter at least one timestamp for in the Line Plot Column field or the dashboard will fail.\n\nYou can remove or add panels through the Dashboards menu, available by clicking the SQLstream icon in the upper right corner of the panel). You can also clone any of the panels.\n\n### Bars Over Time\nBars Over Time displays each key category (such as a city) as a group of bars (all the numerical columns in rows grouped by the key, such as all ATMs in San Francisco).\n\nThis panel is highly customizable with Panel Preferences. You can change the bars' orientation, color, width, as well as other options. Because this panel is built using Chart.js, you can also edit Chart.js options directly to customize the panel further.\n\nOnce the dashboard opens, you can modify it with *panel preferences* or by modifying the layout.\n\nYou can configure how data flows into the panel using [Panel Input Preferences](#configuring-panel-input-preferences)\n\n## Configuring Panel Input Preferences\nEach panel gets its input from one stream, view, or table. There are separate preferences for how the frame reads its input and for whatever panel is selected.\n\nTo set input preferences:\n\n1. Click the Configure Input Preferences Icon\n2. The Input Preferences dialog box opens.\n\nYou can configure input preferences in four main categories:\n\n - [Configuring Data Windows](#configuring-data-windows)\n - [Throttling the Input Stream](#throttling-the-input-stream)\n - [Using Key Columns](#working-with-key-columns)\n - [Treating Views as Tables](#treating-views-as-tables)\n - [Using a Custom Select Template](#using-the-select-template-option)\n\nOnce you configure preferences, click Update. You can change preferences at any time.\n\n### Configuring Data Windows\nThe nature of streaming data means that it continually updates. This means that dashboards always display a subset of the data emitted from your source, such as \"all failed logins from the last minute\" or \"all buses speeding over the past hour.\"\n\nWe use the term *data window* to refer to how s-Dashboard displays data in terms of time. (Some dashboards can only display one row at a time.) The data window can be a fixed number (\"20 rows\"), a fixed number per category (\"20 rows for each department\") a fixed time period (\"every hour on the hour\"), a sliding time period (\"all data from the last sixty minutes\").\n\nThe first thing you want to determine, then, is how you want to configure your data window. (You can always change this by returning to Input Preferences.)\n\nChoose one of the following four options:\n\n| Data Window | Description |\n| --- | --- |\n| N Rows | A specified number of rows. When you choose N Rows, a dialog box appears that lets you enter a number. Very high numbers may affect performance. |\n| N Rows Per Key | s-Dashboard lets you use a column to divide your data into categories. This column is called the key column, and can be a list of cities, departments, countries, regions, products, and so on--any category into which your data can be grouped. N Rows Per Key works the same as N Rows, but lets you enter a number per category. When you choose N Rows Per Key, a dialog box appears that lets you enter a number. Very high numbers may affect performance. |\n| Sliding Time Period | All streaming rows have a timestamp called ROWTIME. This means that you can tell s-Dashboard \"give me all the rows in the past hour\" or \"give me all the rows in the past minute\" and so on. Again, high numbers may affect performance, so experiment accordingly. | This is the most common way to view time series data. |\n| Tumbling Time Period | This data window also uses ROWTIME, and lets you tell s-Dashboard \"give me data for an hour, then clear data, then give me data for the next hour,\" at, for example, 2:00 PM, 3:00 PM, 4:00 PM, and so on. |\n\n## Throttling the Input Stream\nYou can choose to *throttle* the input stream. Once you select *Throttled*, a text box appears that allows you to specify a number of rows per second. The default throttled rate is 100 rows per second.\n\nThrottling data for a panel is separate from throttling data in StreamLab. Dashboards pull data directly from s-Server, even if you have set them up through StreamLab. (This is why you can share dashboards independently of StreamLab.)\n\n## Working with Key Columns\nSome panels let you group data into categories, using a special column called the *key column*. A key column has a limited set of values that categorize the values in other columns, such as cities, departments, product lines, and so on. You can enter the name of this key column in Input Preferences. You need to generate this column as part of your data before using it in s-Dashboard. You could, for example, use the Categorize Analytic in StreamLab to set up a stream with multiple categories.\n\nThe panels in the View Rows Over a Key Column display one row for each category in the key column. For example, you can use the Bars Over Key panel to group a bar chart.\n\n### Forgetting s-Server Content\nThe first time you use the Select Input command, s-Dashboard caches the catalog for s-Server. That is, it identifies all schemas, streams, views, and tables. If your development team has added a new schema, stream, table, or view to s-Server, then these objects will not be available in s-Dashboard unless you use the Invalidate Cache command.\n\nThe Invalidate Cache command clears the cache of the currently-stored catalog and requests an updated version of the catalog from s-Server.\n\nTo do so:\n\n1. Click the s-Dashboard menu icon on the outermost frame.\n2. Choose Forget s-Server Contents.\n\nThe old catalog is discarded and an updated catalog is retrieved. When you select input, newly added schemas, streams, tables, and views will appear in the Select Input dialog box.\n\n### Treating Views as Tables\nBy default, s-Server assumes views are of streaming data, but they can refer to tables. If you know that your view refers to a table, you can use the Treat View as a Table command to ask s-Dashboard to treat the view as a table (and therefore check the server less frequently.\n\n### Using the SELECT Template Option\nBy default, the dashboard uses either _SELECT \\* FROM \\<input\\> SELECT_ (if Include ROWTIME is not selected) or _SELECT STREAM ROWTIME,* FROM \\<input\\>_ (if Include ROWTIME is selected). You can use the SELECT template field to create a custom SELECT statement. This is an advanced feature that requires knowledge of both SQL and JavaScript to use.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-bollinger.sql":{"value":"-- Bollinger Band Dashboard\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n    rose.localSet('suppressOptimizationIfModified', true);\n\n    rose.param({id: 'avg', title: \"Running average\", defval:\"\", type: \"choice\", width: 180,\n        valuesFunc: function() { return rose.numericColumnList()},\n        values: [\"table not available\"]  });\n\n    rose.param({id: 'avg_upper', title: \"Inner band upper\", defval:\"\", type: \"choice\", width: 180,\n        valuesFunc: function() { return rose.numericColumnList()},\n        values: [\"table not available\"]  });\n\n    rose.param({id: 'avg_lower', title: \"Inner band lower\", defval:\"\", type: \"choice\", width: 180,\n        valuesFunc: function() { return rose.numericColumnList()},\n        values: [\"table not available\"]  });\n\n    rose.param({id: 'avg_upper2', title: \"Outer band upper\", defval:\"\", type: \"choice\", width: 180,\n        valuesFunc: function() { return rose.numericColumnList()},\n        values: [\"table not available\"]  });\n\n    rose.param({id: 'avg_lower2', title: \"Outer band lower\", defval:\"\", type: \"choice\", width: 180,\n        valuesFunc: function() { return rose.numericColumnList()},\n        values: [\"table not available\"]  });\n\n\n    //-- Note: we don't actually support not specifying upper2 and lower2\n    rose.summary(function(e) {\n        return e.getPath('params.upper2') !== '' && e.getPath('params.lower2') !== '';\n    }, \"Create a Bollinger Bands dashboard around the running average in {{avg}}, with two bands: an inner band using \" +\n       \"{{avg_upper}} and {{avg_lower}}, and an outer band using {{avg_upper2}} and {{avg_lower2}}\"\n    );\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Create a Bollinger Bands dashboard around the running average in {{avg}}, with one band using {{avg_upper}} and {{avg_lower}}\");\n\n    rose.focusMap({\n        //-- column: ['avg', 'avg_upper', 'avg_lower', 'avg_upper2', 'avg_lower2'],\n        column: [],\n        columnList: [],\n        row: [],\n        start: [],\n        end: [],\n        text: []\n    });\n\n    rose.subscribe('suggestions', function(context) {\n        //-- If there are no num columns, complain\n        var cols = rose.columnList(false, 'numeric');\n        if(cols.length == 0)\n            return rose.suggest(context, -10, \"This dashboard requires numeric data, and there are no numeric columns. Try using 'Cast' to convert a column to a numeric type. Then use the 'Bollinger Bands' analytic to compute the bands.\");\n\n        if(cols.length < 3)\n            return rose.suggest(context, -10, \"This dashbaord requires at least 3 numeric columns, a running average and its upper and lower bands. Use the 'Bollinger Bands' analytic to compute the bands.\");\n\n        var avg = rose.param('avg');\n        if(avg)\n            rose.suggest(context, 110);     //-- suggest the current settings\n    });\n\n    rose.dashboard('/dashboard-templates/bollinger.json');\n\n    var dashName = rose.guideDash();\n    var dashStream = rose.obj2fqn(dashName);\n    var dashPump = rose.dash2pumpFQN(dashName);\n%>\n\n<%= rose.createSqlObj('STREAM', dashStream) %>(\n<%= rose.columnDefinitions('ROWTIME') %>);\n\n<%= rose.createPump(dashPump, dashStream) %>\nSELECT STREAM * FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideDashAdvance() %>\n","external":true,"binary":false,"title":"Bollinger Bands","public":true,"doc":"## Bollinger Bands\n\nBollinger Bands are a volatility indicator, typically used for stock prices.\n\nBollinger Bands consist of:\n\n - an moving average (avg) over a given period T.\n - an upper band at K times an T-period standard deviation above the moving average (avg + Kσ)\n - a lower band at K times an T-period standard deviation below the moving average (avg − Kσ)\n\nStreamLab also lets you define inner and outer values for the upper and lower bands.\n\nSee http://en.wikipedia.org/wiki/Bollinger_Bands for more details.\n\nTo generate a Bollinger Bands dashboard:\n\n - Select the Bollinger Bands tab in the Custom Dashboard commands.\n - Select columns for Running Average, Inner Band Upper, Inner Band Lower, Outer Band Upper, and Outer Band Lower. If you have run the Bollinger Bands analytic, StreamLab automatically selects the columns resulting from that analytic.\n - Click the + icon to add the suggestion to the Script.\n - Click the Dashboard icon  in the script.\n    The Bollinger Bands dashboard opens.\n\nOnce the dashboard opens, you can modify it with *panel preferences* or by modifying the layout.\n\nYou can configure how data flows into the panel using [Panel Input Preferences](#configuring-panel-input-preferences)\n\n## Configuring Panel Input Preferences\nEach panel gets its input from one stream, view, or table. There are separate preferences for how the frame reads its input and for whatever panel is selected.\n\nTo set input preferences:\n\n1. Click the Configure Input Preferences Icon\n2. The Input Preferences dialog box opens.\n\nYou can configure input preferences in four main categories:\n\n - [Configuring Data Windows](#configuring-data-windows)\n - [Throttling the Input Stream](#throttling-the-input-stream)\n - [Using Key Columns](#working-with-key-columns)\n - [Treating Views as Tables](#treating-views-as-tables)\n - [Using a Custom Select Template](#using-the-select-template-option)\n\nOnce you configure preferences, click Update. You can change preferences at any time.\n\n### Configuring Data Windows\nThe nature of streaming data means that it continually updates. This means that dashboards always display a subset of the data emitted from your source, such as \"all failed logins from the last minute\" or \"all buses speeding over the past hour.\"\n\nWe use the term *data window* to refer to how s-Dashboard displays data in terms of time. (Some dashboards can only display one row at a time.) The data window can be a fixed number (\"20 rows\"), a fixed number per category (\"20 rows for each department\") a fixed time period (\"every hour on the hour\"), a sliding time period (\"all data from the last sixty minutes\").\n\nThe first thing you want to determine, then, is how you want to configure your data window. (You can always change this by returning to Input Preferences.)\n\nChoose one of the following four options:\n\n| Data Window | Description |\n| --- | --- |\n| N Rows | A specified number of rows. When you choose N Rows, a dialog box appears that lets you enter a number. Very high numbers may affect performance. |\n| N Rows Per Key | s-Dashboard lets you use a column to divide your data into categories. This column is called the key column, and can be a list of cities, departments, countries, regions, products, and so on--any category into which your data can be grouped. N Rows Per Key works the same as N Rows, but lets you enter a number per category. When you choose N Rows Per Key, a dialog box appears that lets you enter a number. Very high numbers may affect performance. |\n| Sliding Time Period | All streaming rows have a timestamp called ROWTIME. This means that you can tell s-Dashboard \"give me all the rows in the past hour\" or \"give me all the rows in the past minute\" and so on. Again, high numbers may affect performance, so experiment accordingly. | This is the most common way to view time series data. |\n| Tumbling Time Period | This data window also uses ROWTIME, and lets you tell s-Dashboard \"give me data for an hour, then clear data, then give me data for the next hour,\" at, for example, 2:00 PM, 3:00 PM, 4:00 PM, and so on. |\n\n## Throttling the Input Stream\nYou can choose to *throttle* the input stream. Once you select *Throttled*, a text box appears that allows you to specify a number of rows per second. The default throttled rate is 100 rows per second.\n\nThrottling data for a panel is separate from throttling data in StreamLab. Dashboards pull data directly from s-Server, even if you have set them up through StreamLab. (This is why you can share dashboards independently of StreamLab.)\n\n## Working with Key Columns\nSome panels let you group data into categories, using a special column called the *key column*. A key column has a limited set of values that categorize the values in other columns, such as cities, departments, product lines, and so on. You can enter the name of this key column in Input Preferences. You need to generate this column as part of your data before using it in s-Dashboard. You could, for example, use the Categorize Analytic in StreamLab to set up a stream with multiple categories.\n\nThe panels in the View Rows Over a Key Column display one row for each category in the key column. For example, you can use the Bars Over Key panel to group a bar chart.\n\n### Forgetting s-Server Content\nThe first time you use the Select Input command, s-Dashboard caches the catalog for s-Server. That is, it identifies all schemas, streams, views, and tables. If your development team has added a new schema, stream, table, or view to s-Server, then these objects will not be available in s-Dashboard unless you use the Invalidate Cache command.\n\nThe Invalidate Cache command clears the cache of the currently-stored catalog and requests an updated version of the catalog from s-Server.\n\nTo do so:\n\n1. Click the s-Dashboard menu icon on the outermost frame.\n2. Choose Forget s-Server Contents.\n\nThe old catalog is discarded and an updated catalog is retrieved. When you select input, newly added schemas, streams, tables, and views will appear in the Select Input dialog box.\n\n### Treating Views as Tables\nBy default, s-Server assumes views are of streaming data, but they can refer to tables. If you know that your view refers to a table, you can use the Treat View as a Table command to ask s-Dashboard to treat the view as a table (and therefore check the server less frequently.\n\n### Using the SELECT Template Option\nBy default, the dashboard uses either _SELECT \\* FROM \\<input\\> SELECT_ (if Include ROWTIME is not selected) or _SELECT STREAM ROWTIME,* FROM \\<input\\>_ (if Include ROWTIME is selected). You can use the SELECT template field to create a custom SELECT statement. This is an advanced feature that requires knowledge of both SQL and JavaScript to use.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-map-and-table.sql":{"value":"-- Map and Table Dashboard\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n    rose.localSet('suppressOptimizationIfModified', true);\n\n    rose.param({id: 'maptype', title: \"map type\", defval:\"events\", type: \"choice\", width: 120,\n        values: ['events', 'pan & zoom', 'choropleth']  });\n\n    rose.param({id: 'latitude', title: \"latitude\", defval:\"\", type: \"choice\", width: 180,\n        valuesFunc: () => rose.numericColumnList(),\n        values: [\"table not available\"]  });\n\n    rose.param({id: 'longitude', title: \"longitude\", defval:\"\", type: \"choice\", width: 180,\n        valuesFunc: () => rose.numericColumnList(),\n        values: [\"table not available\"]  });\n\n    rose.param({id: 'key', title: \"key\", defval:\"\", type: \"choice\", width: 180,\n        valuesFunc: () => rose.columnListPlusNone(),\n        values: [\"table not available\"],\n        visibleWhen: () => rose.param('maptype') !== 'events'\n    });\n\n    rose.param({id: 'value', title: \"value\", defval:\"\", type: \"choice\", width: 180,\n        valuesFunc: () => rose.numericColumnList(),\n        values: [\"table not available\"],\n        visibleWhen: () => rose.param('maptype') !== 'events'\n    });\n\n    rose.param({id: 'event_id', title: \"ID\", defval:\"\", type: \"choice\", width: 180,\n        valuesFunc: () => rose.columnListPlusNone(),\n        values: [\"table not available\"],\n        visibleWhen: () => rose.param('maptype') === 'pan & zoom'\n    });\n\n    rose.summary(function(e) {\n        return rose.param('maptype') === 'events';\n    }, 'Create an {{maptype}} map at latitude {{latitude}} and longitude {{longitude}}. The default map will show the whole world but you can choose to view a specific country or state.'\n    );\n\n    rose.summary(function(e) {\n        return rose.param('maptype') === 'choropleth';\n    }, 'Create a {{maptype}} map (a map with regions colored according to a value). You can select the map (whole world, continent, country or state) in the dashboard panel preferences. ' +\n        'The key column {{key}} must contain IDs for the regions in the selected map, <a target=\"_blank\" href=\"https://docs.sqlstream.com/s-dashboard/appendix-map-ids-for-cloroplet/\">see the list here</a>. ' +\n        'The value column {{value}} should be in the range 0..100. ' +\n        'The latitude {{latitude}} and longitude {{longitude}} will be used to display a marker when each row is received.'\n    );\n\n    rose.summary(function(e) {\n        return true;\n    }, 'Create a {{maptype}} map of events at latitude {{latitude}} and longitude {{longitude}}, ' +\n       'using {{key}} to select colors and markers and {{value}} as the size of the markers. ' +\n       'Related events can be shown as trails using the id in {{event_id}}. ' +\n       'This map uses OpenStreetMaps or Google Maps, so it requires network access to one of those services.'\n    );\n\n    rose.focusMap({\n        //-- column: ['latitude', 'longitude', 'value', 'key', 'event_id'],\n        column: [],\n        columnList: [],\n        row: [],\n        start: [],\n        end: [],\n        text: []\n    });\n\n    rose.subscribe('suggestions', function(context) {\n        //-- If this is not the selected op, suggest nothing\n        if(context.selOp !== rose.node) return;\n\n        //-- If there are not enough num columns, complain\n        var cols = rose.columnList(false, 'numeric');\n        if(cols.length < 2)\n            return rose.suggest(context, -10, \"This dashboard requires at least two numeric columns containing the latitude and longitude.\");\n\n        rose.suggest(context, 11);  //-- suggest the current settings\n\n        //-- Construct lists of all the possible lats and lons, using column names only\n        var lats = [];\n        var lons = [];\n\n        _.each(rose.columnList(), function(col) {\n            if(/^lat/i.test(col) && col !== rose.param('latitude')) lats.push(col);\n            if(/lat$/i.test(col) && col !== rose.param('latitude')) lats.push(col);\n            if(/^lon/i.test(col) && col !== rose.param('longitude')) lons.push(col);\n            if(/lon$/i.test(col) && col !== rose.param('longitude')) lons.push(col);\n        });\n\n        //-- if no lats and lons, we're done\n        if(lats.length < 1 || lons.length < 1) return;\n\n        _.each(lats, function(lat) {\n            _.each(lons, function(lon) {\n                if(lat == lon) return;\n\n                rose.suggest(context, 10, {latitude: lat, longitude: lon, key: rose.param('key'), value: rose.param('value'), event_id: rose.param('event_id')});\n            });\n        });\n    });\n\n    rose.dashboard('/dashboard-templates/map_and_table.json');\n\n    var dashName = rose.guideDash();\n    var dashStream = rose.obj2fqn(dashName);\n    var dashPump = rose.dash2pumpFQN(dashName);\n%>\n\n<%= rose.createSqlObj('STREAM', dashStream) %>(\n<%= rose.columnDefinitions('ROWTIME') %>);\n\n<%= rose.createPump(dashPump, dashStream) %>\nSELECT STREAM * FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideDashAdvance() %>\n","external":true,"binary":false,"title":"Map and Table","public":true,"doc":"## Map and Table\n\nThe Map and Table dashboard displays two frames:\n\n1. A table listing all data from the stream.\n1. A World Events map visualization panel displaying the locations of latitude-longitude pairs.\n\nYou can remove or add panels through the Dashboards menu, available by clicking the SQLstream icon in the upper right corner of the panel). You can also rearrange the panels' layout.\n\nFor more information on developing meaningful data see, <a href=\"https://docs.sqlstream.com/streamlab/dashboards/modifying-dashboard-layouts/\" target=\"\\_blank\"> Working with Dashboard Layouts in the s-Dashboard guide</a>.\n\nBy default, the Map panel is generated as an *World Events map visualization panel*.\n\nYou can also switch to the Pan and Zoom map, which offers a wider range of options than the World Events visualization panel.\n\nTo generate a Map and Table dashboard:\n\n1. Select the Map and Table tab in the Custom Dashboard commands.\n1. Select columns for Latitude and Longitude. In order for the map to work properly, you need to verify that these columns map to real-world locations (the person managing your data should be able to verify this for you).\n1. Select a column for Value. This text appears when you mouse over an event on the map.\n1. Select a column for ID. StreamLab uses the id column to group associated events.\n1. If desired, select a column for Key. You can use this to color-code events in the Pan and Zoom map.\n1. Click the + icon to add the suggestion to the Script.\n1. Click the Dashboard icon in the script. The icon appears red for custom dashboards.\n1. The Map and Table dashboard opens.\n\nOnce the dashboard opens, you can modify it with *panel preferences* or by modifying the layout.\n\nYou can configure how data flows into the panel using [Panel Input Preferences](#configuring-panel-input-preferences)\n\n## Switching to the Pan and Zoom Panel\nThe Pan & Zoom Map visualization panel offers a wider range of options than the World Events visualization panel.\n\nTo switch to the Pan & Zoom Map visualization pane:\n\n1. Click the title for the current visualization panel:\n    ![](/images/doc/sl_visualization_panel_title.png)\n2. In the Select Panel dialog box, select Geo > Pan & Zoom Map and click Select.\n    ![](/images/ba/sbur_select_pan_and_zoom.png)\n    The Pan & Zoom Map visualization panel opens. You can change preferences for the panel by clicking the Panel Preferences icon in the upper right corner of the panel.\n    ![](/images/sd/panel_preferences.png)\n\nPreferences include:\n\n- Maximum time\n- Maximum Events. Here, you select the maximum number of events to display at once\n- Whether or not to cluster events. If you deselect this option, all events appear individually.\n- Google Map Style. Here you can select from Roadmap, Satellite, Terrain, or hybrid.\n- Diameter Formula. Here you can use the name of a column, or use that column in a mathematical formula, such as v_alue10_.\n- Diameter Is. Here you choose pixels or meters for the Diameter Formula.\n- Display Mode. Choose from the following\n    1. Show all events displays all events up to the maximum defined in Maximum Events, no matter how old.\n    1. Show all events and trail displays all events, along with a line connecting an event to its previous location. This is useful for moving vehicles, for example.\n1. Show most recent event displays only events within the maximum time.\n1. Show most recent and trail displays only events within the maximum time, along with a line connecting an event to its previous location. This is useful for moving vehicles, for example.\n   1. Event Label lets you add a custom label to your map. To do so, enter the name of one of your columns enclosed in a _<%= %>_, such as _<%= title %>_.\n   1. Key Color Map lets you customize how events, markers, and trails appear.\n\nYou can configure how data flows into the panel using [Panel Input Preferences](#configuring-panel-input-preferences)\n\n## Using Google Maps and OpenStreetMaps Tiles with StreamLab\n\nTo use maps, you need to obtain and install either a Google Maps or MapBox api key before maps can be used.\n\nIf you are using the the Pan and Zoom map visualization, StreamLab and s-Dashboard require a Google Maps API key. To retrieve an API key, please visit the following link: https://developers.google.com/maps/documentation/javascript/tutorial#api_key.\n\nOnce you have a Google Maps API key, you need to restart StreamLab to incorporate it.\nTo do so when launching StreamLab from the command line, use a -m flag, as in:\n```\n-m google:AGzaSyrDBVfuWtaa40S1pM8U-0YED3ONjvq6-7mFZ\n```\n\nTo do so when launching StreamLab using the 'Start Streamlab Server' icon, right-click on the desktop 'Start Streamlab Server' icon, select Properties, and add the -m option to the end of the command.\n\nYou can now use the Pan and Zoom map visualization with full functionality.\n\n### Using StreamLab with OpenStreetMaps\nTo use OpenStreetMaps tiles, you need a Mapbox id. To design a map, go to https://www.mapbox.com/ and sign up and design the map they want.\n\nEach map has a map id. This gets used in the -m option preceded by 'mapbox:', as in:\n\n```\n   -m mapbox:myserver.jeo4y40c\n```   \n\nAll StreamLab maps will use the same tile set. In order to use a different tile set, you need to restart StreamLab with a different Mapbox id.\n\n### Setting Map Service in Environment\n\nYou can also set the map service in */etc/default/streamlabd*, by setting STREAMLAB_MAP_SERVICE to 'google:<key>' or 'mapbox:<key>'.\n\n## Configuring Panel Input Preferences\nEach panel gets its input from one stream, view, or table. There are separate preferences for how the frame reads its input and for whatever panel is selected.\n\nTo set input preferences:\n\n1. Click the Configure Input Preferences Icon\n2. The Input Preferences dialog box opens.\n\nYou can configure input preferences in four main categories:\n\n - [Configuring Data Windows](#configuring-data-windows)\n - [Throttling the Input Stream](#throttling-the-input-stream)\n - [Using Key Columns](#working-with-key-columns)\n - [Treating Views as Tables](#treating-views-as-tables)\n - [Using a Custom Select Template](#using-the-select-template-option)\n\nOnce you configure preferences, click Update. You can change preferences at any time.\n\n### Configuring Data Windows\nThe nature of streaming data means that it continually updates. This means that dashboards always display a subset of the data emitted from your source, such as \"all failed logins from the last minute\" or \"all buses speeding over the past hour.\"\n\nWe use the term *data window* to refer to how s-Dashboard displays data in terms of time. (Some dashboards can only display one row at a time.) The data window can be a fixed number (\"20 rows\"), a fixed number per category (\"20 rows for each department\") a fixed time period (\"every hour on the hour\"), a sliding time period (\"all data from the last sixty minutes\").\n\nThe first thing you want to determine, then, is how you want to configure your data window. (You can always change this by returning to Input Preferences.)\n\nChoose one of the following four options:\n\n| Data Window | Description |\n| --- | --- |\n| N Rows | A specified number of rows. When you choose N Rows, a dialog box appears that lets you enter a number. Very high numbers may affect performance. |\n| N Rows Per Key | s-Dashboard lets you use a column to divide your data into categories. This column is called the key column, and can be a list of cities, departments, countries, regions, products, and so on--any category into which your data can be grouped. N Rows Per Key works the same as N Rows, but lets you enter a number per category. When you choose N Rows Per Key, a dialog box appears that lets you enter a number. Very high numbers may affect performance. |\n| Sliding Time Period | All streaming rows have a timestamp called ROWTIME. This means that you can tell s-Dashboard \"give me all the rows in the past hour\" or \"give me all the rows in the past minute\" and so on. Again, high numbers may affect performance, so experiment accordingly. | This is the most common way to view time series data. |\n| Tumbling Time Period | This data window also uses ROWTIME, and lets you tell s-Dashboard \"give me data for an hour, then clear data, then give me data for the next hour,\" at, for example, 2:00 PM, 3:00 PM, 4:00 PM, and so on. |\n\n## Throttling the Input Stream\nYou can choose to *throttle* the input stream. Once you select *Throttled*, a text box appears that allows you to specify a number of rows per second. The default throttled rate is 100 rows per second.\n\nThrottling data for a panel is separate from throttling data in StreamLab. Dashboards pull data directly from s-Server, even if you have set them up through StreamLab. (This is why you can share dashboards independently of StreamLab.)\n\n## Working with Key Columns\nSome panels let you group data into categories, using a special column called the *key column*. A key column has a limited set of values that categorize the values in other columns, such as cities, departments, product lines, and so on. You can enter the name of this key column in Input Preferences. You need to generate this column as part of your data before using it in s-Dashboard. You could, for example, use the Categorize Analytic in StreamLab to set up a stream with multiple categories.\n\nThe panels in the View Rows Over a Key Column display one row for each category in the key column. For example, you can use the Bars Over Key panel to group a bar chart.\n\n### Forgetting s-Server Content\nThe first time you use the Select Input command, s-Dashboard caches the catalog for s-Server. That is, it identifies all schemas, streams, views, and tables. If your development team has added a new schema, stream, table, or view to s-Server, then these objects will not be available in s-Dashboard unless you use the Invalidate Cache command.\n\nThe Invalidate Cache command clears the cache of the currently-stored catalog and requests an updated version of the catalog from s-Server.\n\nTo do so:\n\n1. Click the s-Dashboard menu icon on the outermost frame.\n2. Choose Forget s-Server Contents.\n\nThe old catalog is discarded and an updated catalog is retrieved. When you select input, newly added schemas, streams, tables, and views will appear in the Select Input dialog box.\n\n### Treating Views as Tables\nBy default, s-Server assumes views are of streaming data, but they can refer to tables. If you know that your view refers to a table, you can use the Treat View as a Table command to ask s-Dashboard to treat the view as a table (and therefore check the server less frequently.\n\n### Using the SELECT Template Option\nBy default, the dashboard uses either _SELECT \\* FROM \\<input\\> SELECT_ (if Include ROWTIME is not selected) or _SELECT STREAM ROWTIME,* FROM \\<input\\>_ (if Include ROWTIME is selected). You can use the SELECT template field to create a custom SELECT statement. This is an advanced feature that requires knowledge of both SQL and JavaScript to use.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/operations/dash-timeseries.sql":{"value":"-- Time Series Dashboard\n<%= rose.panel('params') %>\n<%\n    rose.localSet('docsDismissed', true);\n    rose.localSet('suppressOptimizationIfModified', true);\n\n    rose.param({id: 'dataColumns', title: \"Data columns\", type: \"string\", defval: \"\", width: 'end'});\n\n    rose.summary(function(e) {\n        return true;\n    }, \"Create a time series plot of the columns {{dataColumns}}\");\n\n    rose.focusMap({\n        column: [],\n        columnList: ['dataColumns'],\n        row: [],\n        start: [],\n        end: [],\n        text: []\n    });\n\n    rose.subscribe('suggestions', function(context) {\n        //-- If there are no num columns, complain\n        var cols = rose.columnList(false, 'numeric');\n        if(cols.length == 0)\n            return rose.suggest(context, -10, \"This dashboard requires numeric data, and there are no numeric columns. Try using 'Cast' to convert a column to a numeric type.\");\n\n        var dc = rose.param('dataColumns');\n        if(rose.validColumnList(dc))\n            rose.suggest(context, 110);     //-- suggest the current settings\n    });\n\n    rose.dashboard('/dashboard-templates/timeseries.json');\n\n    var dashName = rose.guideDash();\n    var dashStream = rose.obj2fqn(dashName);\n    var dashPump = rose.dash2pumpFQN(dashName);\n%>\n\n<%= rose.createSqlObj('STREAM', dashStream) %>(\n<%= rose.columnDefinitions('ROWTIME') %>);\n\n<%= rose.createPump(dashPump, dashStream) %>\nSELECT STREAM * FROM <%= rose.guideInput() %> AS \"input\";\n\n<% rose.guideDashAdvance() %>\n","external":true,"binary":false,"title":"Time Series","public":true,"doc":"## Time Series\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/prototypes/dash_default.json":{"value":"<%= rose.panel('params') %>\n<%\n    //--  Dashboard template used for the default view in guide\n\n    rose.makeKnownAs('dash_default');\n\n    rose.param({id: 'test', order: 1, title: \"test\", type: \"string\", defval: \"test-default\"});\n%>\n{\n\t\"topframe\": {\n\t\t\"title\": \"\",\n\t\t\"showbar\": true,\n\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\"panelOptions\": {\n\t\t\t\"tables_v2-simple-html\": {\n\t\t\t\t\"maxrows\": 100,\n\t\t\t\t\"tabstyle\": \"Horizontal\",\n\t\t\t\t\"greenMax\": 0,\n\t\t\t\t\"redMin\": 0,\n\t\t\t\t\"sendChannel\": \"\",\n\t\t\t\t\"autoscroll\": false\n\t\t\t}\n\t\t},\n\t\t\"panelSettings\": {},\n\t\t\"input\": {\n\t\t\t\"db\": \"sqlstream\",\n\t\t\t\"schema\": \"<%= rose.dash('schema') %>\",\n\t\t\t\"name\": \"<%= rose.dash('object') %>\",\n\t\t\t\"type\": \"<%= rose.dash('type') %>\"\n\t\t},\n\t\t\"inputOptions\": {\n            \"dataWindow\": \"n rows\",\n            \"dwRows\": 20,\n            \"dwSliding\": \"60:1:minutes\",\n            \"dwTumbling\": \"1\",\n\t\t\t\"rowtime\": true,\n\t\t\t\"tableview\": <%= rose.dash('tableview') %>,\n\t\t\t\"updateSeconds\": 0,\n\t\t\t\"controlChannel\": \"\",\n\t\t\t\"selectTemplate\": \"\"\n\t\t},\n\t\t\"subframes\": {\n\t\t\t\"1\": null,\n\t\t\t\"layout\": null\n\t\t}\n\t},\n\t\"isProtected\": false\n}\n","external":true,"binary":false,"title":"Dashboard-Default","public":true,"doc":"Template for the default dashboard opened when the view dashboard button is selected in a guide script","destination":"dashboard","external_doc":false,"dont_render":true,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda.sql":{"value":"<%= rose.panel('include') %>\n<% \n    rose.makeKnownAs('ecda_manifest')\n\n    rose.include('ecda/ecda_file_reader.sql')\n    rose.include('ecda/ecda_http_reader.sql')\n    rose.include('ecda/ecda_websocket_reader.sql')\n    rose.include('ecda/ecda_socket_reader.sql')\n    rose.include('ecda/ecda_amqp_reader.sql')\n    rose.include('ecda/ecda_kafka_reader.sql')\n    rose.include('ecda/ecda_kinesis_reader.sql')\n    rose.include('ecda/ecda_mqtt_reader.sql')\n    rose.include('ecda/ecda_listener_reader.sql')\n\n    rose.include('ecda/ecda_file_writer.sql')\n    rose.include('ecda/ecda_http_writer.sql')\n    rose.include('ecda/ecda_mongodb_writer.sql')\n    rose.include('ecda/ecda_socket_writer.sql')\n    rose.include('ecda/ecda_amqp_writer.sql')\n    rose.include('ecda/ecda_kafka_writer.sql')\n    rose.include('ecda/ecda_kinesis_writer.sql')\n    rose.include('ecda/ecda_mqtt_writer.sql')\n    rose.include('ecda/ecda_snowflake_writer.sql')\n%>\n","external":true,"binary":false,"title":"_ECDA","public":false,"doc":"","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_file_reader.sql":{"value":"<%= rose.panel('params') %>\n\n<%\n    rose.localSet('docsDismissed', true)\n    rose.makeKnownAs('ecda_file_reader')\n\n    rose.param({\n        id: \"addin_ecda_file_directory\",\n        title: \"Directory\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Path to directory containing file(s)\",\n        valueIsRequired: true\n    })\n\n    rose.param({\n        id: \"addin_ecda_filename_pattern\",\n        title: \"Filename Pattern\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"A file name or a regular expression (to match multiple files). Note that we use a Java regular expression, not a wild-card pattern, to match filenames. For example, use '.*' to match a string of any length, not '*'.\",\n        valueIsRequired: true\n    })\n\n    const rm_native = 'Begin from the current file location and tail the file'\n    const rm_directStream = 'Start from the beginning of the file and tail it'\n    const rm_directTable = 'Start from the beginning of the file and do not tail it'\n\n    //-- Hidden parameter used to pass the renderMode to the main ecda form\n    rose.param({\n        id: \"addin_renderMode\",\n        type: 'choice',\n        values: ['native', 'directStream', 'directTable'],\n        defval: 'native',\n        visibleWhen: () => false\n    })\n\n    rose.param({\n        id: \"addin_ecda_file_renderMode\",\n        title: \"Subscription Mode\",\n        tooltip: \"Specifies how each pipeline that reads from this source will receive data\",\n        type: \"choice\",\n        values: [rm_native, rm_directStream, rm_directTable],\n        defval: rm_native,\n        allowNew: false,\n        sideEffect: value => {\n            if(value === rm_native) rose.paramSet('addin_renderMode', 'native')\n            else if(value === rm_directStream) rose.paramSet('addin_renderMode', 'directStream')\n            else rose.paramSet('addin_renderMode', 'directTable')\n        }\n    })\n\n\n    var pc_columns = {\n    none: \"do not include\",\n    before: \"include before other columns\",\n    after: \"include after other columns\"\n};\n\n    rose.param({\n        id: \"addin_ecda_file_provenance\",\n            title: \"Provenance Columns\",\n        type: 'choice',\n        values: [pc_columns.none, pc_columns.before, pc_columns.after],\n        defval: pc_columns.none,\n        tooltip: \"Provenance columns are additional columns associated with this input media. You can include them before or after the other columns, or not at all.\"\n\n    })\n%>\n\n<%  rose.defineECDAreader('file', { define: function(rose) { var __p = '';  %>\n<%      return __p; }, server: function(rose) { var __p = ''; %>\n\n    SERVER \"FILE_SERVER\"\n\n<%      return __p; }, options: function(rose) { var __p = ''; %>\n\n        \"DIRECTORY\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_file_directory\")) %>,\n        \"FILENAME_PATTERN\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_filename_pattern\")) %>\n\n<%      return __p; }, props: function(rose) {\n\n            rose.ecdaProp('DIRECTORY', rose.param(\"addin_ecda_file_directory\"))\n            rose.ecdaProp('FILENAME_PATTERN', rose.param(\"addin_ecda_filename_pattern\"))\n\n        }, provenanceColumns: function(rose) {\n\n            return [['SQLSTREAM_PROV_FILE_SOURCE_FILE','VARCHAR', 256]]\n\n        }\n}); %>\n","external":true,"binary":false,"title":"File","public":true,"doc":"ECDA File prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"input-menu-file","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_http_reader.sql":{"value":"<%= rose.panel('params') %>\n\n<%\n    rose.localSet('docsDismissed', true)\n    rose.makeKnownAs('ecda_http_reader')\n\n    rose.param({\n        id: \"addin_ecda_http_url\",\n        title: \"URL\",\n        type: \"string\",\n        defval: 'http://',\n        tooltip: \"URL for the streaming source\",\n        valueIsRequired: true\n    })\n\n    rose.param({\n        id: \"addin_ecda_http_poll\",\n        title: \"Polling interval\",\n        type: \"integer\",\n        defval: 1000,\n        tooltip: \"Polling interval in milliseconds\",\n        valueIsRequired: true\n    })\n\n    rose.param({\n        id: 'addin_ecda_http_headers',\n        title: 'HTTP Headers',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"Enter additional HTTP headers and their values\",\n        columns: ['header', 'value'],\n        columnTypes: [null, null],\n        columnDefs: ['', ''],\n    })\n%>\n\n<%  rose.defineECDAreader('http', { define: function(rose) {\n\n        rose.paramSet('addin_renderMode', 'native')\n\n}, server: function(rose) { var __p = ''; %>\n\n    SERVER \"HTTP_SERVER\"\n\n<%      return __p; }, options: function(rose) { var __p = ''; %>\n\n        \"URL\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_http_url\")) %>,\n        \"POLL_IN_MILLIS\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_http_poll\")) %>\n        <%= rose.tableParam(\"addin_ecda_http_headers\", \n            t => `,\\n     ${rose.sqlIdentifier('HEADER_' + t[0].toUpperCase())} ${rose.sqlLiteral(t[1])}`\n            ).join('')\n        %>\n\n\n<%      return __p; }, props: function(rose) {\n\n            rose.ecdaProp('URL', rose.param(\"addin_ecda_http_url\"))\n            rose.ecdaProp('POLL_IN_MILLIS', rose.param(\"addin_ecda_http_poll\"))\n            rose.tableParam(\"addin_ecda_http_headers\", function(t){\n                rose.ecdaProp('HEADER_' + t[0].toUpperCase(), t[1])\n            })\n\n} }) %>\n","external":true,"binary":false,"title":"HTTP","public":true,"doc":"ECDA HTTP prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"input-menu-http","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_websocket_reader.sql":{"value":"<%= rose.panel('params') %>\n\n<%\n    rose.localSet('docsDismissed', true);\n    rose.makeKnownAs('ecda_websocket_reader');\n\n    rose.param({\n        id: \"addin_ecda_websocket_url\",\n        title: \"URL\",\n        type: \"string\",\n        defval: 'ws://',\n        tooltip: \"URL for the websocket source\",\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: 'addin_ecda_websocket_headers',\n        title: 'HTTP Headers',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"Enter additional HTTP headers and their values\",\n        columns: ['header', 'value'],\n        columnTypes: [null, null],\n        columnDefs: ['', ''],\n    });\n\n%>\n\n<%  rose.defineECDAreader('websocket', { define: function(rose) {\n\n        rose.paramSet('addin_renderMode', 'native')\n\n}, server: function(rose) { var __p = ''; %>\n\n    SERVER \"WEBSOCKET_SERVER\"\n\n<%      return __p; }, options: function(rose) { var __p = ''; %>\n\n        \"URL\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_websocket_url\")) %>\n        <%= rose.tableParam(\"addin_ecda_websocket_headers\", function(t){\n            return ',\\n     ' + rose.sqlIdentifier('HEADER_' + t[0].toUpperCase()) + ' ' + rose.sqlLiteral(t[1]);\n            }).join('')\n        %>\n\n<%      return __p; }, props: function(rose) {\n\n            rose.ecdaProp('URL', rose.param(\"addin_ecda_websocket_url\"));\n            rose.tableParam(\"addin_ecda_websocket_headers\", function(t){\n                rose.ecdaProp(t[0], t[1]);\n            });\n\n} }); %>\n","external":true,"binary":false,"title":"WebSocket","public":true,"doc":"ECDA WebSocket prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"input-menu-websocket","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_socket_reader.sql":{"value":"<%= rose.panel('params') %>\n\n<%\n    rose.localSet('docsDismissed', true);\n    rose.makeKnownAs('ecda_socket_reader');\n\n    rose.param({\n        id: \"addin_ecda_socket_remote_hostport\",\n        title: \"Remote Host\",\n        type: \"doubleValue\",\n        defval: '|',\n        leftLabel: 'Name',\n        rightLabel: 'Port',\n        tooltip: \"The host and port for the socket from which we're receiving data.\"\n    });\n    rose.param({\n        id: \"addin_ecda_socket_is_ipv6\",\n        title: \"Socket uses IPV6?\",\n        type: \"boolean\",\n        defval: false\n    });\n    rose.param({\n        id: \"addin_ecda_socket_is_tcp\",\n        title: \"Socket uses TCP?\",\n        type: \"boolean\",\n        defval: false\n    });\n%>\n\n<%  rose.defineECDAreader('socket', { define: function(rose) {\n\n        rose.paramSet('addin_renderMode', 'native')\n\n}, server: function(rose) { var __p = ''; %>\n\n    SERVER \"NET_SERVER\"\n\n<%      return __p; }, options: function(rose) { var __p = ''; %>\n\n        \"REMOTE_HOST\" <%= rose.sqlLiteral(rose.ecda_socket_remote_host) %>,\n        \"REMOTE_PORT\" <%= rose.sqlLiteral(rose.ecda_socket_remote_port) %>,\n        \"IS_IPV6\" <%= rose.param(\"addin_ecda_socket_is_ipv6\") ? \"'true'\" : \"'false'\" %>,\n        \"IS_TCP\" <%= rose.param(\"addin_ecda_socket_is_tcp\") ? \"'true'\" : \"'false'\" %>\n\n<%      return __p; }, props: function(rose) {\n\n            rose.ecdaProp('REMOTE_HOST', rose.ecda_socket_remote_host);\n            rose.ecdaProp('REMOTE_PORT', rose.ecda_socket_remote_port);\n            rose.ecdaProp('IS_IPV6', rose.param(\"addin_ecda_socket_is_ipv6\") ? 'true' : 'false');\n            rose.ecdaProp('IS_TCP', rose.param(\"addin_ecda_socket_is_tcp\") ? 'true' : 'false');\n} }); %>\n","external":true,"binary":false,"title":"Socket","public":true,"doc":"ECDA Socket prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"input-menu-socket","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_amqp_reader.sql":{"value":"<%= rose.panel('params') %>\n\n<%\n    rose.localSet('docsDismissed', true);\n    rose.makeKnownAs('ecda_amqp_reader');\n\n    var defaultProtocol = 'AMQP 1.0';\n\n    rose.param({\n        id: \"addin_ecda_amqp_reader_url\",\n        title: \"AMQP URL\",\n        type: \"string\",\n        defval: 'amqp://',\n        tooltip: \"URL for the AMQP connection\",\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: \"addin_ecda_amqp_reader_destination\",\n        title: \"Destination\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Queue or topic indentifier. Can be either an absolute destination or of the form: <destination prefix>{PARTITION}<destination suffix>\",\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: \"addin_ecda_amqp_reader_partition_expression\",\n        title: \"Partition Expression\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Expression that's substituted for {PARTITION} in the Destination. This should be a dk.brics regular expression.\"\n    });\n\n    rose.param({\n        id: 'addin_ecda_amqp_reader_protocol',\n        title: 'Protocol',\n        type: 'choice',\n        values: [defaultProtocol, 'AMQP Legacy'],\n        defval: defaultProtocol\n    });\n\n    rose.param({\n        id: 'addin_ecda_amqp_reader_ack_mode',\n        title: 'Acknowledge Mode',\n        type: 'choice',\n        values: ['auto', 'client', 'dups_ok', 'transacted'],\n        defval: 'auto'\n    });\n\n    rose.param({\n        id: 'addin_ecda_amqp_reader_queue_size',\n        title: 'Parser Queue Size',\n        type: 'integer',\n        defval: 2,\n        tooltip: \"Queue size (minimum 2; you probably won't need to change this)\"\n    });\n\n    var pc_columns = {\n    none: \"do not include\",\n    before: \"include before other columns\",\n    after: \"include after other columns\"\n};\n\n    rose.param({\n        id: \"addin_ecda_amqp_provenance\",\n            title: \"Provenance Columns\",\n        type: 'choice',\n        values: [pc_columns.none, pc_columns.before, pc_columns.after],\n        defval: pc_columns.none,\n        tooltip: \"Provenance columns are additional columns associated with this input media. You can include them before or after the other columns, or not at all.\"\n\n    });\n\n    function protocol(rose) {\n        return rose.param('addin_ecda_amqp_reader_protocol') === defaultProtocol ? '\"AMQP10_SERVER\"' : '\"AMQP_LEGACY_SERVER\"';\n    }\n%>\n\n<%  rose.defineECDAreader('amqp', { define: function(rose) { \n\n        rose.paramSet('addin_renderMode', 'native')\n\n}, server: function(rose) { var __p = ''; %>\n\n    SERVER <%= protocol(rose) %>\n\n<%      return __p; }, options: function(rose) { var __p = ''; %>\n\n        \"CONNECTION_URL\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_amqp_reader_url\")) %>,\n        \"DESTINATION\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_amqp_reader_destination\")) %>,\n        \"PARTITION_EXPRESSION\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_amqp_reader_partition_expression\")) %>,\n        \"ACKNOWLEDGE_MODE\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_amqp_reader_ack_mode\")) %>,\n        \"PARSER_QUEUE_SIZE\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_amqp_reader_queue_size\")) %>\n\n<%      return __p; }, props: function(rose) {\n\n            rose.ecdaProp('CONNECTION_URL', rose.param(\"addin_ecda_amqp_reader_url\"));\n            rose.ecdaProp('DESTINATION', rose.param(\"addin_ecda_amqp_reader_destination\"));\n            rose.ecdaProp('PARTITION_EXPRESSION', rose.param(\"addin_ecda_amqp_reader_partition_expression\"));\n            rose.ecdaProp('ACKNOWLEDGE_MODE', rose.param(\"addin_ecda_amqp_reader_ack_mode\"));\n            rose.ecdaProp('PARSER_QUEUE_SIZE', rose.param(\"addin_ecda_amqp_reader_queue_size\"));\n\n        }, provenanceColumns: function(rose) {\n\n            if(rose.param('addin_ecda_amqp_reader_protocol') ===  defaultProtocol) {\n                return [\n                    ['SQLSTREAM_PROV_AMQP_PARTITION','INTEGER', null],\n                    ['SQLSTREAM_PROV_AMQP_CREATION_TIME','TIMESTAMP', null]\n                ];\n            } else {\n                return [];\n            }\n\n        },\n\n        shouldClone: function(rose, guideId) {\n            return false\n        }\n}); %>\n","external":true,"binary":false,"title":"AMQP","public":true,"doc":"ECDA AMQP prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"input-menu-amqp","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_kafka_reader.sql":{"value":"<%= rose.panel('params') %>\n\n<%\n    rose.localSet('docsDismissed', true);\n    rose.makeKnownAs('ecda_kafka_reader');\nvar oldAPI = 'SimpleConsumer API (>= v0.8.2)'\nvar newAPI = 'KafkaConsumer API (>= v0.10.2)'\n\nvar _provenanceColumns = function(which) {\n    if(which === newAPI) {\n        return [\n            ['SQLSTREAM_PROV_KAFKA_TOPIC', 'VARCHAR', 256],\n            ['SQLSTREAM_PROV_KAFKA_PARTITION', 'INTEGER', null],\n            ['SQLSTREAM_PROV_KAFKA_OFFSET', 'BIGINT', null],\n            ['SQLSTREAM_PROV_KAFKA_TIMESTAMP', 'TIMESTAMP', null],\n            ['SQLSTREAM_PROV_KAFKA_KEY', 'VARBINARY', 256],\n            ['SQLSTREAM_PROV_KAFKA_HEADERS', 'VARCHAR', 512]\n            //-- this should be OK, commented out because of server bug ['SQLSTREAM_PROV_KAFKA_PAYLOAD_PREFIX', 'BINARY', 32]\n        ]\n    } else {\n        return [\n            ['SQLSTREAM_PROV_KAFKA_OFFSET', 'BIGINT', null],\n            ['SQLSTREAM_PROV_KAFKA_PARTITION', 'INTEGER', null]\n        ]\n    }\n}\n\n//-- Add + to the end of each row in the given list\nvar _addFlags = function(list) {\n    return list\n    return _.map(list, function(x) { return x.push('+') })\n}\n\nrose.param({\n    id: \"addin_ecda_kafka_api\",\n    title: \"API Version\",\n    type: \"choice\",\n    values: [newAPI, oldAPI],\n    defval: newAPI,\n    tooltip: \"Select the API version that matches your Kafka server\"\n})\n\nrose.param({\n    id: \"addin_ecda_kafka_topic\",\n    title: \"Topic\",\n    type: \"string\",\n    defval: '',\n    tooltip: \"The name of the Kafka topic from which you are reading. If you are using '+newAPI+', this value can be a regular expression used as a 'topic wild card'.\",\n    valueIsRequired: true\n})\n\n//-- Backwards compatibility with single host spec\nvar dflt = []\nvar hp = rose.param(\"addin_ecda_kafka_hostport\") || \"\"\nif(hp) {\n    var x = hp.split('|')\n\n    if(x && x.length === 2)\n        dflt.push(x)\n} else\n    dflt.push(['localhost','9092'])\n\nrose.param({\n    id: \"addin_ecda_kafka_hostport_list\",\n    title: \"Kafka Hosts\",\n    type: \"tupleList\",\n    defval: JSON.stringify(dflt),\n    tooltip: \"The host(s) (seed_brokers) and port(s) for the Kafka servers\",\n    columns: ['host', 'port'],\n    columnTypes: [null, null],\n    columnDefs: ['', '9092']\n})\n\nconst _dupModeChoices = [\n        'Shared: Direct the entire topic to multiple SQL pipelines by piping it through a native stream',\n        'Distributed: Distributes the topic across multiple instances of a SQL pipeline (experimental)'\n    ] \n\nconst _isDup = () => rose.param('addin_ecda_kafka_api') === newAPI && \n                    rose.param('addin_ecda_kafka_duplication_mode') === _dupModeChoices[1]\n\n//-- Hidden parameter used to pass the renderMode to the main ecda form\nrose.param({\n    id: \"addin_renderMode\",\n    type: 'choice',\n    values: ['native', 'directStream', 'directTable'],\n    defval: 'native',\n    visibleWhen: () => false\n})\n\n// Duplicated pipelines in Kafka 10\nrose.param({\n    id: \"addin_ecda_kafka_duplication_mode\",\n    title: \"Subscription Mode\",\n    type: 'choice',\n    values: _dupModeChoices,\n    defval: _dupModeChoices[0],\n    tooltip: \"Determines the way in which the source is read and how its records are directed to SQL pipelines\",\n    visibleWhen: () => rose.param('addin_ecda_kafka_api') === newAPI,\n    sideEffect: value => { /* Set renderMode for use in ecda.sql */\n        if(value === _dupModeChoices[0]) rose.paramSet('addin_renderMode', 'native')\n        else rose.paramSet('addin_renderMode', 'directStream' )\n    }\n})\n\nrose.param({\n    id: \"addin_ecda_kafka_max_duplicates\",\n    title: \"Maximum Instances\",\n    type: \"integer\",\n    defval: 2,\n    tooltip: \"A hint to any pipeline reading this kafka source: limits the number of duplicate queries. Should be less than the number of kafka partitions, since the duplicates will share them.\",\n    visibleWhen: _isDup\n})\n\n\n/* KafkaConsumer */\nrose.param({\n    id: \"addin_ecda_kafka_KC_starting_time\",\n    title: \"Starting Time\",\n    type: 'choice',\n    values: ['EARLIEST', 'LATEST', 'Unspecified', 'Specific start time'],\n    tooltip: \"When to start reading from, either the earliest available data or the latest. You can also select a specific time to start reading from, or leave it unspecified.\",\n    defval: \"EARLIEST\",\n    visibleWhen: function() { return rose.param('addin_ecda_kafka_api') === newAPI }\n})\n\nvar hasSpecificTimeKC = function() { return /^Specific/.test(rose.param('addin_ecda_kafka_KC_starting_time')) }\n\nrose.param({\n    id: \"addin_ecda_kafka_KC_specific_time\",\n    title: \"Specific Start Time\",\n    tooltip: \"A timestamp in the format 'yyyy-MM-dd HH:mm:ss.SSS' (e.g. '2018-02-01 22:23:45:892')\",\n    type: \"string\",\n    defval: \"\",\n    visibleWhen: function() { return rose.param('addin_ecda_kafka_api') === newAPI && hasSpecificTimeKC() }\n})\n\n/* SimpleConsumer */\nrose.param({\n    id: \"addin_ecda_kafka_SC_starting_time\",\n    title: \"Starting Time\",\n    type: 'choice',\n    values: ['EARLIEST', 'LATEST'],\n    tooltip: \"When to start reading from, either the earliest available data or the latest\",\n    defval: \"EARLIEST\",\n    visibleWhen: function() { return rose.param('addin_ecda_kafka_api') === oldAPI }\n})\n\nvar _advOptsModeChoices = ['Hide advanced options', 'Show advanced options']\nvar _isAdvanced = () => rose.param('addin_ecda_kafka_reader_advanced') === _advOptsModeChoices[1]\n\nrose.param({\n    id: \"addin_ecda_kafka_reader_advanced\",\n    title: \"Advanced Options\",\n    type: 'choice',\n    values: _advOptsModeChoices,\n    defval: _advOptsModeChoices[0],\n    tooltip: \"Show or hide the advanced Kafka options\"\n})\n\nrose.param({\n    id: \"addin_ecda_kafka_starting_offset\",\n    title: \"Starting Offset\",\n    tooltip: \"When to start reading from (default is -1) as a long int representing a timestamp (milliseconds since epoch)\",\n    type: \"string\",\n    defval: \"-1\",\n    visibleWhen: _isAdvanced\n})\n\nrose.param({\n    id: \"addin_ecda_kafka_partition\",\n    title: \"Partition(s)\",\n    tooltip: 'Limits reading to a subset of the partitions of the topic. List desired partitions here, as single number or a range (such as \"0-3\"). Blank means read all partitions',\n    type: \"string\",\n    defval: '',\n    visibleWhen: _isAdvanced\n})\n\nrose.param({\n    id: \"addin_ecda_kafka_buffer_size\",\n    title: \"Buffer Size\",\n    tooltip: \"Buffer size to be used when creating SimpleConsumer\",\n    type: \"integer\",\n    defval: 1024*1024,\n    visibleWhen: _isAdvanced\n})\n\nrose.param({\n    id: \"addin_ecda_kafka_fetch_size\",\n    title: \"Fetch Size\",\n    tooltip: \"Fetch size in FetchRequest\",\n    type: \"integer\",\n    defval: 1000000,\n    visibleWhen: _isAdvanced\n})\n\nrose.param({\n    id: \"addin_ecda_kafka_max_poll\",\n    title: \"Max Poll Records\",\n    tooltip: \"Maximum number of records to be polled (fetched) through the KafkaConsumer.poll() API call\",\n    type: \"integer\",\n    defval: 100,\n    visibleWhen: _isAdvanced\n})\n\nrose.param({\n    id: \"addin_ecda_kafka_index_topic_name\",\n    title: \"Index Topic Name\",\n    tooltip: \"The name of the index topic to be used for mapping message offsets to timestamps\",\n    type: \"string\",\n    defval: '',\n    visibleWhen: () => _isAdvanced() && rose.param('addin_ecda_kafka_api') === newAPI\n})\n\n// set internally in the case of a duplicated source\nrose.param({\n    id: \"addin_ecda_kafka_client_id_reader\",\n    title: \"Client ID\",\n    type: \"string\",\n    defval: '',\n    tooltip: \"Identifies consumer-group. Also a tag in trace messages, and the client key for Yammer metrics\",\n    visibleWhen: () => _isAdvanced() && !_isDup()\n})\n\nrose.param({\n    id: \"addin_ecda_kafka_metrics_per_partition\",\n    title: \"Collect separate statistics for each partition?\",\n    tooltip: '',\n    type: \"boolean\",\n    defval: false,\n    visibleWhen: _isAdvanced\n})\n\nrose.param({\n    id: \"addin_ecda_kafka_partition_offset_query\",\n    title: \"Partition Offset Query\",\n    tooltip: 'This is a SQL query text that fetches starting offsets for all partitions of the topic. For example: SELECT \"TOPIC\", \"PARTITION\", \"OFFSET\" FROM stored_offsets;',\n    type: \"string\",\n    defval: '',\n    visibleWhen: () => _isAdvanced() && rose.param('addin_ecda_kafka_api') === newAPI\n})\n\nrose.param({\n    id: \"addin_ecda_kafka_options_query\",\n    title: \"Options Query\",\n    tooltip: 'This is a SQL query text used to query a table to update adapter options at runtime. You can use this, for example, to set the STARTING_OFFSET option from a table that contains the last offset, as in: SELECT lastOffset AS STARTING_OFFSET from TEST.committedOffset;',\n    type: \"string\",\n    defval: '',\n    visibleWhen: function() { return _isAdvanced() && rose.param('addin_ecda_kafka_api') === newAPI }\n})\n\nrose.param({\n    id: \"addin_ecda_kafka_isolation_level\",\n    title: \"Enable transaction semantics\",\n    tooltip: \"\",\n    type: \"boolean\",\n    defval: false,\n    visibleWhen: _isAdvanced\n})\n\nvar pc_columns = {\n    none: \"do not include\",\n    before: \"include before other columns\",\n    after: \"include after other columns\"\n};\n\n    rose.param({\n        id: \"addin_ecda_kafka_provenance\",\n            title: \"Provenance Columns\",\n        type: 'choice',\n        values: [pc_columns.none, pc_columns.before, pc_columns.after],\n        defval: pc_columns.none,\n        tooltip: \"Provenance columns are additional columns associated with this input media. You can include them before or after the other columns, or not at all.\"\n\n    })\n\nrose.param({\n    id: \"addin_ecda_kafka_provcols_newapi\",\n    title: \"Included Columns\",\n    type: \"tupleList\",\n    defval: JSON.stringify(_provenanceColumns(newAPI)),\n    tooltip: \"Select which provenance columns should be included. You may change the types and sizes of the varchar/varbinary columns.\",\n    columns: ['column', 'type','size'],\n    columnWidths: ['45%','30%','20%'],\n    columnTypes: ['=readonly=', '=vartype=', '=number?='],\n    fixedList: true,\n    visibleWhen: function() { return rose.param('addin_ecda_kafka_provenance') !== pc_columns.none && rose.param('addin_ecda_kafka_api') === newAPI }\n})\n\nrose.param({\n    id: \"addin_ecda_kafka_provcols_oldapi\",\n    title: \"Included Columns\",\n    type: \"tupleList\",\n    defval: JSON.stringify(_provenanceColumns(oldAPI)),\n    tooltip: \"Select which provenance columns should be included. You may change the types and sizes of the varchar/varbinary columns.\",\n    columns: ['column', 'type','size'],\n    columnWidths: ['45%','30%','20%'],\n    columnTypes: ['=readonly=', '=vartype=', '=number?='],\n    fixedList: true,\n    visibleWhen: function() { return rose.param('addin_ecda_kafka_provenance') !== pc_columns.none && rose.param('addin_ecda_kafka_api') === oldAPI }\n})\n\n%>\n\n<%  rose.defineECDAreader('kafka', { define: function(rose) { var __p = '';  %>\n\n<%      return __p; }, server: function(rose) { var __p = ''; %>\n\n    SERVER <%=  rose.param('addin_ecda_kafka_api') === oldAPI ? '\"KAFKA_SERVER\"' : '\"KAFKA10_SERVER\"' %>\n\n<%      return __p; }, options: function(rose) { var __p = ''; %>\n\n<% switch(rose.param('addin_ecda_kafka_api')) { case newAPI: %>\n        <%= rose.ecdaOpt(\"SEED_BROKERS\", rose.tableParam('addin_ecda_kafka_hostport_list', function(t) { return t[0] + ':' + t[1] }).join(',')) %>\n        <%= rose.ecdaOptMaybe(\"INDEX_TOPIC_NAME\", rose.param('addin_ecda_kafka_index_topic_name')) %>\n    <% if(hasSpecificTimeKC()) { %>\n        <%= rose.ecdaOpt(\"STARTING_TIME\", rose.param(\"addin_ecda_kafka_KC_specific_time\")) %>\n    <% } else if(!/^Unspecified/.test(rose.param(\"addin_ecda_kafka_KC_starting_time\"))) { %>\n        <%= rose.ecdaOpt(\"STARTING_TIME\", rose.param(\"addin_ecda_kafka_KC_starting_time\")) %>\n    <% } %>\n        <%= rose.ecdaOptMaybe(\"PARTITION_OFFSET_QUERY\", rose.param(\"addin_ecda_kafka_partition_offset_query\")) %>\n        <%= rose.ecdaOptMaybe(\"OPTIONS_QUERY\", rose.param(\"addin_ecda_kafka_options_query\")) %>\n<% break; case oldAPI: %>\n        <%= rose.ecdaOpt(\"SEED_BROKERS\", rose.tableParam('addin_ecda_kafka_hostport_list', function(t) { return t[0] }).join(',')) %>\n        <%= rose.ecdaOpt(\"PORT\", rose.tableParam('addin_ecda_kafka_hostport_list', function(t) { return t[1] }).join(',')) %>\n        <%= rose.ecdaOptMaybe(\"STARTING_TIME\", rose.param(\"addin_ecda_kafka_SC_starting_offset\")) %>\n<% break; } %>\n        <%= rose.ecdaOptMaybe(\"MAX_POLL_RECORDS\", rose.param('addin_ecda_kafka_max_poll')) %>\n        <%= rose.ecdaOptMaybe(\"STARTING_OFFSET\", rose.param(\"addin_ecda_kafka_starting_offset\")) %>\n        <%= rose.ecdaOptMaybe(\"PARTITION\", rose.param(\"addin_ecda_kafka_partition\")) %>\n        <%= rose.ecdaOptMaybe(\"BUFFER_SIZE\", rose.param(\"addin_ecda_kafka_buffer_size\")) %>\n        <%= rose.ecdaOptMaybe(\"FETCH_SIZE\", rose.param(\"addin_ecda_kafka_fetch_size\")) %>\n        <%= rose.ecdaOptMaybe(\"CLIENT_ID\", rose.param(\"addin_ecda_kafka_client_id_reader\")) %>\n        <%= rose.ecdaOptMaybe(\"METRICS_PER_PARTITION\", rose.param(\"addin_ecda_kafka_metrics_per_partition\")) %>\n        <%= rose.ecdaOpt(\"isolation.level\", rose.param(\"addin_ecda_kafka_isolation_level\") ? 'read_committed' : 'read_uncommitted') %>\n        <%= rose.ecdaOpt(\"TOPIC\", rose.param(\"addin_ecda_kafka_topic\"), true) %>\n\n<%      return __p; }, props: function(rose) {\n\n        switch(rose.param('addin_ecda_kafka_api')) {\n            case newAPI:\n                rose.ecdaPropMaybe('SEED_BROKERS', rose.tableParam('addin_ecda_kafka_hostport_list', function(t) { return t[0] + ':' + t[1] }).join(','));\n                rose.ecdaPropMaybe('INDEX_TOPIC_NAME', rose.param('addin_ecda_kafka_index_topic_name'));\n                if(hasSpecificTimeKC()) {\n                    rose.ecdaPropMaybe(\"STARTING_TIME\", rose.param(\"addin_ecda_kafka_KC_specific_time\"));\n                } else if(!/Unspecified/.test(rose.param(\"addin_ecda_kafka_KC_starting_time\"))) {\n                    rose.ecdaPropMaybe(\"STARTING_TIME\", rose.param(\"addin_ecda_kafka_KC_starting_time\"));\n                }\n                rose.ecdaPropMaybe(\"PARTITION_OFFSET_QUERY\", rose.param(\"addin_ecda_kafka_partition_offset_query\"));\n                rose.ecdaPropMaybe(\"OPTIONS_QUERY\", rose.param(\"addin_ecda_kafka_options_query\"));\n                break;\n\n            case oldAPI:\n                rose.ecdaPropMaybe('SEED_BROKERS', rose.tableParam('addin_ecda_kafka_hostport_list', function(t) { return t[0] }).join(','));\n                rose.ecdaPropMaybe('PORT', rose.tableParam('addin_ecda_kafka_hostport_list', function(t) { return t[1] }).join(','));\n                rose.ecdaPropMaybe('STARTING_TIME', rose.param(\"addin_ecda_kafka_SC_starting_time\"));\n                break;\n        }\n\n        rose.ecdaPropMaybe('MAX_POLL_RECORDS',  rose.param('addin_ecda_kafka_max_poll'));\n        rose.ecdaPropMaybe('STARTING_OFFSET', rose.param(\"addin_ecda_kafka_starting_offset\"));\n        rose.ecdaPropMaybe('PARTITION', rose.param(\"addin_ecda_kafka_partition\"));\n        rose.ecdaPropMaybe('BUFFER_SIZE', rose.param(\"addin_ecda_kafka_buffer_size\"));\n        rose.ecdaPropMaybe('FETCH_SIZE', rose.param(\"addin_ecda_kafka_fetch_size\"));\n        rose.ecdaPropMaybe('CLIENT_ID', rose.param(\"addin_ecda_kafka_client_id_reader\"));\n        rose.ecdaPropMaybe('METRICS_PER_PARTITION', rose.param(\"addin_ecda_kafka_metrics_per_partition\"));\n        rose.ecdaProp(\"isolation.level\", rose.param(\"addin_ecda_kafka_isolation_level\") ? 'read_committed' : 'read_uncommitted');\n        rose.ecdaPropMaybe('TOPIC', rose.param(\"addin_ecda_kafka_topic\"));\n        },\n\n        provenanceColumns: function(rose) {\n            var cols;\n            switch(rose.param('addin_ecda_kafka_api')) {\n                case newAPI:\n                    cols = rose.param('addin_ecda_kafka_provcols_newapi');\n                    break;\n                case oldAPI:\n                    cols = rose.param('addin_ecda_kafka_provcols_oldapi');\n                    break;\n            }\n            return rose.filterProvColumns(cols);\n        },\n\n        shouldClone: function(rose, guideId) {\n            if(!_isDup()) return false\n\n            const maxDuplicates = rose.param('addin_ecda_kafka_max_duplicates')\n            const g = guideId ? RoseLib.node(guideId) : null\n            const guideName = g ? g.getPath('locals.guideName') : null\n\n            return {\n                maxDuplicates: maxDuplicates,\n                addin_ecda_kafka_client_id_reader: guideName\n            }\n        }\n}); %>\n","external":true,"binary":false,"title":"Kafka","public":true,"doc":"ECDA Kafka prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"input-menu-kafka","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_kinesis_reader.sql":{"value":"<%= rose.panel('params') %>\n\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    rose.localSet('docsDismissed', true)\n    rose.makeKnownAs('ecda_kinesis_reader')\n\n    rose.param({\n        id: \"addin_ecda_kinesis_stream_name\",\n        title: \"Kinesis Stream Name\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Kinesis stream name\",\n        valueIsRequired: true\n    })\n\n    rose.param({\n        id: \"addin_ecda_kinesis_region\",\n        title: \"AWS Region\",\n        type: \"choice\",\n        defval: 'us-west-1',\n        values: [\"us-west-1\", \"us-west-2\", \"us-east-1\", \"us-east-2\", \"ap-south-1\", \"ap-northeast-2\", \"ap-northeast-1\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"eu-north-1\", \"eu-west-3\", \"eu-west-2\", \"eu-west-1\", \"eu-central-1\", \"sa-east-1\"],\n        tooltip: \"Region ID of region\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_kinesis_app_name\",\n        title: \"Kinesis Application Name\",\n        type: \"string\",\n        defval: 'sqlstream_1',\n        tooltip: \"Kinesis application name\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_kinesis_profile_path\",\n        title: \"AWS Profile Path\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"AWS path to credentials file (blank defaults to ~/.aws/credentials)\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_kinesis_profile_name\",\n        title: \"AWS Profile Name\",\n        type: \"string\",\n        defval: 'default',\n        tooltip: \"AWS profile name to use within credentials file\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_kinesis_fanout\",\n        title: \"Stream Fanout\",\n        type: \"integer\",\n        defval: 1,\n        tooltip: \"How many s-Server streams to create from this Kinesis stream\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_initial_position\",\n        title: \"Initial Position\",\n        type: \"choice\",\n        values: [\"earliest\", \"latest\"],\n        defval: 'earliest',\n        tooltip: \"Starting position in stream\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_kinesis_max_records\",\n        title: \"Max Records/Get\",\n        type: \"integer\",\n        defval: -1,\n        tooltip: \"Maximum number of records per GetRecords operation, -1 selects Kinesis default\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_kinesis_socket_timeout\",\n        title: \"Socket Timeout\",\n        type: \"integer\",\n        defval: -1,\n        tooltip: \"Socket timeout in milliseconds, -1 for no timeout\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_kinesis_idle_time\",\n        title: \"Idle Time Between Reads\",\n        type: \"integer\",\n        defval: -1,\n        tooltip: \"Idle time between reads, in milliseconds, -1 selects Kinesis default\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_kinesis_name\",\n        title: \"Agent Name\",\n        tooltip: \"Name\",\n        type: \"string\",\n        defval: \"kinesis_1\",\n        tooltip: \"s-Server's name for this Kinesis connection (any unique name is fine)\"\n    })\n\n    var pc_columns = {\n    none: \"do not include\",\n    before: \"include before other columns\",\n    after: \"include after other columns\"\n};\n\n    rose.param({\n        id: \"addin_ecda_kinesis_provenance\",\n            title: \"Provenance Columns\",\n        type: 'choice',\n        values: [pc_columns.none, pc_columns.before, pc_columns.after],\n        defval: pc_columns.none,\n        tooltip: \"Provenance columns are additional columns associated with this input media. You can include them before or after the other columns, or not at all.\"\n\n    })\n%>\n\n<%  rose.defineECDAreader('kinesis', { define: function(rose) {\n\n        rose.paramSet('addin_renderMode', 'native')\n\n}, server: function(rose) { var __p = ''; %>\n\n    SERVER \"KINESIS_SERVER\" \n\n<%      return __p; }, options: function(rose) { var __p = '';\nvar ipis = rose.param('addin_ecda_initial_position') === 'earliest' ? 'TRIM_HORIZON' : 'LATEST' %>\n\n        \"AWS_REGION\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_region\")) %>,\n        \"AWS_PROFILE_NAME\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_profile_name\")) %>,\n        \"AWS_PROFILE_PATH\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_profile_path\")) %>,\n        \"KINESIS_STREAM_NAME\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_stream_name\")) %>,\n        \"KINESIS_APPLICATION_NAME\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_app_name\")) %>,\n        \"STREAM_FANOUT\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_fanout\")) %>,\n        \"KINESIS_INITIAL_POSITION_IN_STREAM\" <%= rose.sqlLiteral(ipis) %>,\n        \"KINESIS_MAX_RECORDS_PER_GET_RECORDS\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_max_records\")) %>,\n        \"KINESIS_SOCKET_TIMEOUT\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_socket_timeout\")) %>,\n        \"KINESIS_IDLE_TIME_BETWEEN_READS\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_idle_time\")) %>\n\n<%      return __p; }, deactivate: function(rose) { var __p = ''; %>\n\n<% if(!rose.param('addin_ecda_remote')) {\n    rose.drop(\"call sys_boot.mgmt.stop_agent_hoster(\" + rose.sqlLiteral(rose.param('addin_ecda_kinesis_name')) + \")\", true)\n} %>\n\n<%      return __p; }, activate: function(rose, addedOptionsArray) { var __p = ''; %>\n\n<% if(!rose.param('addin_ecda_remote')) { %>\ncall sys_boot.mgmt.start_agent_hoster(<%= rose.sqlLiteral(rose.param('addin_ecda_kinesis_name')) %>,'kinesis',<%= rose.ecdaPropsString(addedOptionsArray) %>);\n<% } %>\n\n<%      return __p; }, props: function(rose) {\nvar ipis = rose.param('addin_ecda_initial_position') === 'earliest' ? 'TRIM_HORIZON' : 'LATEST'\n\n            rose.ecdaProp(\"AWS_REGION\", rose.param(\"addin_ecda_kinesis_region\"))\n            rose.ecdaProp(\"AWS_PROFILE_NAME\", rose.param(\"addin_ecda_kinesis_profile_name\"))\n            rose.ecdaProp(\"AWS_PROFILE_PATH\", rose.param(\"addin_ecda_kinesis_profile_path\"))\n            rose.ecdaProp(\"KINESIS_STREAM_NAME\", rose.param(\"addin_ecda_kinesis_stream_name\"))\n            rose.ecdaProp(\"KINESIS_APPLICATION_NAME\", rose.param(\"addin_ecda_kinesis_app_name\"))\n            rose.ecdaProp(\"STREAM_FANOUT\", rose.param(\"addin_ecda_kinesis_fanout\"))\n            rose.ecdaProp(\"KINESIS_INITIAL_POSITION_IN_STREAM\", ipis)\n            rose.ecdaProp(\"KINESIS_MAX_RECORDS_PER_GET_RECORDS\", rose.param(\"addin_ecda_kinesis_max_records\"))\n            rose.ecdaProp(\"KINESIS_SOCKET_TIMEOUT\", rose.param(\"addin_ecda_kinesis_socket_timeout\"))\n            rose.ecdaProp(\"KINESIS_IDLE_TIME_BETWEEN_READS\", rose.param(\"addin_ecda_kinesis_idle_time\"))\n\n        }, provenanceColumns: function(rose) {\n\n            return [\n                ['SQLSTREAM_PROV_KINESIS_PARTITION_ID','INTEGER', null],\n                ['SQLSTREAM_PROV_KINESIS_SEQUENCE_NUMBER','BIGINT', null],\n                ['SQLSTREAM_PROV_KINESIS_SHARD_ID','INTEGER', null]\n            ]\n\n        }\n}) %>\n","external":true,"binary":false,"title":"AWS Kinesis","public":true,"doc":"ECDA Kinesis prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"input-menu-kinesis","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_mqtt_reader.sql":{"value":"<%= rose.panel('params') %>\n\n<%\n    rose.localSet('docsDismissed', true)\n    rose.makeKnownAs('ecda_mqtt_reader')\n\n    var defaultProtocol = 'MQTT 1.0'\n\n    //-- QOS values / descriptions - we rely on the first char being 0,1,2\n    var mqtt_qos_options = ['0 - at most once' , '1 - at least once', '2 - exactly once']\n\n    rose.param({\n        id: \"addin_ecda_mqtt_reader_url\",\n        title: \"MQTT URL\",\n        type: \"string\",\n        defval: 'tcp://localhost:1883',\n        tooltip: \"URL for the MQTT connection\",\n        valueIsRequired: true\n    })\n\n    rose.param({\n        id: \"addin_ecda_mqtt_reader_topic\",\n        title: \"Topic\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Topic name\",\n        valueIsRequired: true\n    })\n\n    rose.param({\n        id: \"addin_ecda_mqtt_reader_qos\",\n        title: \"QoS\",\n        type: \"choice\",\n        values: mqtt_qos_options, \n        defval: mqtt_qos_options[0],\n        tooltip: \"Quality of Service\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_mqtt_reader_clientid\",\n        title: \"Client ID\",\n        type: \"string\",\n        tooltip: \"Identifies the client - should be different for each MQTT stream - defaults to a random value\",\n\tdefval: '',\n        valueIsRequired: false\n    })\n\n    rose.param({\n        id: \"addin_ecda_mqtt_reader_username\",\n        title: \"Username\",\n        type: \"string\",\n        tooltip: \"Username for MQTT connection\",\n\tdefval: '',\n        valueIsRequired: false\n    })\n\n    rose.param({\n        id: \"addin_ecda_mqtt_reader_password\",\n        title: \"Password\",\n        type: \"string\",\n        tooltip: \"Password for MQTT connection\",\n\tdefval: '',\n        valueIsRequired: false\n    })\n\n    rose.param({\n        id: \"addin_ecda_mqtt_reader_keepalive\",\n        title: \"Keep Alive Interval\",\n        type: \"integer\",\n\tfrom: 0,\n        defval: 60,\n\ttooltip: \"Time that broker and client persist without sending a message - default 60 secs\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_mqtt_reader_connectiontimeout\",\n        title: \"Connection Timeout\",\n        type: \"integer\",\n        tooltip: \"Connection Timeout - default 30 secs\",\n\tfrom: 0,\n\tdefval: 30\n    })\n\n    var pc_columns = {\n    none: \"do not include\",\n    before: \"include before other columns\",\n    after: \"include after other columns\"\n};\n\n    rose.param({\n        id: \"addin_ecda_mqtt_provenance\",\n            title: \"Provenance Columns\",\n        type: 'choice',\n        values: [pc_columns.none, pc_columns.before, pc_columns.after],\n        defval: pc_columns.none,\n        tooltip: \"Provenance columns are additional columns associated with this input media. You can include them before or after the other columns, or not at all.\"\n\n    })\n\n%>\n\n<%  rose.defineECDAreader('mqtt', { define: function(rose) { \n\n        rose.paramSet('addin_renderMode', 'native')\n\n}, server: function(rose) { var __p = ''; %>\n\n    SERVER \"MQTT_SERVER\"\n\n<%      return __p; }, options: function(rose) { var __p = ''; %>\n\n<%=        rose.ecdaOpt('CONNECTION_URL', rose.param(\"addin_ecda_mqtt_reader_url\")) %>\n<%=        rose.ecdaOptMaybe('QOS', rose.param(\"addin_ecda_mqtt_reader_qos\").substr(0,1)) %>\n<%=\t    rose.ecdaOptMaybe(\"CLIENT_ID\",rose.param(\"addin_ecda_mqtt_reader_clientid\")) %>\n<%=\t    rose.ecdaOptMaybe(\"USERNAME\",rose.param(\"addin_ecda_mqtt_reader_username\")) %>\n<%=\t    rose.ecdaOptMaybe(\"PASSWORD\",rose.param(\"addin_ecda_mqtt_reader_password\")) %>\n<%=\t    rose.ecdaOptMaybe(\"KEEP_ALIVE_INTERVAL\",rose.param(\"addin_ecda_mqtt_reader_keepalive\")) %>\n<%=\t    rose.ecdaOptMaybe(\"CONNECTION_TIMEOUT\",rose.param(\"addin_ecda_mqtt_reader_connectiontimeout\")) %>\n<%=        rose.ecdaOpt('TOPIC', rose.param(\"addin_ecda_mqtt_reader_topic\"),true) %>\n\n<%      return __p; }, props: function(rose) { \n\n            rose.ecdaProp('CONNECTION_URL', rose.param(\"addin_ecda_mqtt_reader_url\")) \n            rose.ecdaProp('TOPIC', rose.param(\"addin_ecda_mqtt_reader_topic\")) \n            rose.ecdaPropMaybe('QOS', rose.param(\"addin_ecda_mqtt_reader_qos\").substr(0,1)) \n\t    rose.ecdaPropMaybe(\"CLIENT_ID\",rose.param(\"addin_ecda_mqtt_reader_clientid\")) \n\t    rose.ecdaPropMaybe(\"USERNAME\",rose.param(\"addin_ecda_mqtt_reader_username\")) \n\t    rose.ecdaPropMaybe(\"PASSWORD\",rose.param(\"addin_ecda_mqtt_reader_password\")) \n\t    rose.ecdaPropMaybe(\"KEEP_ALIVE_INTERVAL\",rose.param(\"addin_ecda_mqtt_reader_keepalive\")) \n\t    rose.ecdaPropMaybe(\"CONNECTION_TIMEOUT\",rose.param(\"addin_ecda_mqtt_reader_connectiontimeout\")) \n\n        }, provenanceColumns: function(rose) {\n\n            return [\n                    ['SQLSTREAM_PROV_MQTT_MESSAGE_ID','INTEGER', null],\n                    ['SQLSTREAM_PROV_MQTT_TOPIC','VARCHAR', 256]\n                ]\n\n        },\n\n        shouldClone: function(rose, guideId) {\n            return false\n        }\n}); %>\n","external":true,"binary":false,"title":"MQTT","public":true,"doc":"ECDA MQTT prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"input-menu-mqtt","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_listener_reader.sql":{"value":"<%= rose.panel('params') %>\n\n<%\n    rose.localSet('docsDismissed', true);\n    rose.makeKnownAs('ecda_listener_reader');\n\n    rose.param({\n        id: \"addin_ecda_listener_url\",\n        title: \"URL\",\n        type: \"string\",\n        defval: 'ws://',\n        tooltip: \"URL for the Teradata Listener source\",\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: \"addin_ecda_listener_auth\",\n        title: \"Authorization\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Authorization token for the Teradata Listener source\",\n        valueIsRequired: true\n    });\n\n%>\n\n<%  rose.defineECDAreader('listener', { define: function(rose) {\n\n        rose.paramSet('addin_renderMode', 'native')\n\n}, server: function(rose) { var __p = ''; %>\n\n    SERVER \"WEBSOCKET_SERVER\"\n\n<%      return __p; }, options: function(rose) { var __p = ''; %>\n\n        \"URL\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_listener_url\")) %>,\n        \"HEADER_AUTHORIZATION\" <%= rose.sqlLiteral('token ' + rose.param(\"addin_ecda_listener_auth\")) %>\n\n<%      return __p; }, props: function(rose) {\n\n            rose.ecdaProp('URL', rose.param(\"addin_ecda_websocket_url\"));\n            rose.ecdaProp('HEADER_AUTHORIZATION', 'token ' + rose.param(\"addin_ecda_websocket_auth\"));\n\n} }); %>\n","external":true,"binary":false,"title":"Teradata Listener","public":true,"doc":"ECDA Teradata Listener prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"input-menu-teradata","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_file_writer.sql":{"value":"<%= rose.panel('params') %>\n\n<%\n    rose.localSet('docsDismissed', true)\n    rose.makeKnownAs('ecda_file_writer')\n\n    const MODE_HIVE = 'hive'\n    const MODE_HDFS = 'hdfs'\n    const MODE_LOCAL = 'local'\n    \n    rose.param({\n        id: \"addin_ecda_file_delivery_mode\",\n        title: \"Delivery mode\",\n        type: \"choice\",\n        defval: MODE_LOCAL,\n        values: [MODE_LOCAL, MODE_HDFS, MODE_HIVE],\n        tooltip: 'File delivery mode - will the file be delivered locally or to some remote target',\n        valueIsRequired: true\n    })\n    \n    rose.param({\n        id: \"addin_ecda_file_directory\",\n        title: \"Local Directory\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Path to local output directory\",\n        valueIsRequired: true,\n    })\n\n    rose.param({\n        id: \"addin_ecda_file_prefix_suffix\",\n        title: \"Filename\",\n        type: \"doubleValue\",\n        defval: 'output-|.log',\n        leftLabel: 'Prefix',\n        rightLabel: 'Suffix',\n        tooltip: \"Filename prefix and suffix\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_file_original_filename\",\n        title: \"Temp File Name\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Temporary file name to use while data is being written. It will be moved to <prefix><date><suffix> when file rotation happens.\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_file_watermark_column\",\n        title: \"Watermark Column\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Name of a column whose contents will be used to further distinguish files in the series\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_file_filename_date_format\",\n        title: \"Filename Date Format\",\n        type: \"string\",\n        defval: 'yyyy-MM-dd-HH:mm:ss',\n        tooltip: \"Date format used when generating file names\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_file_include_rowtime\",\n        title: \"Include ROWTIME?\",\n        type: \"boolean\",\n        defval: true,\n        tooltip: \"Whether or not to include the ROWTIME column in the output file(s)\",\n        sideEffect: value => {if(value === false) rose.paramSet('addin_ecda_file_respect_rowtime', 'ignore ROWTIME')}\n    })\n\n    rose.param({\n        id: \"addin_ecda_file_respect_rowtime\",\n        title: \"Respect ROWTIME\",\n        type: 'choice',\n        defval: 'always respect ROWTIME',\n        values: ['always respect ROWTIME', 'ignore ROWTIME'],\n        tooltip: 'When ROWTIME is respected, rows with the same ROWTIME will not be split between two files. This may cause files to exceed the rotation size. If there is no ROWTIME column, this must be set to \"ignore\".'\n    })\n\n    rose.param({\n        id: \"addin_ecda_file_rotation_mode\",\n        title: \"File Rotation Mode\",\n        type: 'choice',\n        defval: 'limit by time',\n        values: ['limit by time', 'limit by size', 'limit by both time and size'],\n        tooltip: \"Specifies which criteria are used to trigger file rotation: time, size, or both\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_file_rotation_time\",\n        title: \"Maximum Time per File\",\n        type: 'valueChoice',\n        defval: '1|h',\n        choiceItems: [\n            {title: 'milliseconds', name: 'milliseconds', value: 'ms'},\n            {title: 'seconds', name: 'seconds', value: 's'},\n            {title: 'minutes', name: 'minutes', value: 'm'},\n            {title: 'hours', name: 'hours', value: 'h'},\n            {title: 'days', name: 'days', value: 'd'}\n        ],\n        tooltip: \"Specifies the time limit for file rotation\",\n        visibleWhen: () => /time/.test(rose.param('addin_ecda_file_rotation_mode'))\n    })\n\n    rose.param({\n        id: \"addin_ecda_file_rotation_size\",\n        title: \"Maximum Size per File\",\n        type: 'valueChoice',\n        defval: '1|m',\n        choiceItems: [\n            {title: 'kilobytes', name: 'kilobytes', value: 'k'},\n            {title: 'megabytes', name: 'megabytes', value: 'm'},\n            {title: 'gigabytes', name: 'gigabytes', value: 'g'}\n        ],\n        tooltip: \"Specifies the size limit for file rotation\",\n        visibleWhen: () => /size/.test(rose.param('addin_ecda_file_rotation_mode'))\n    })\n\n    rose.param({\n        id: \"addin_ecda_file_postprocess_cmd\",\n        title: \"Postprocess Command\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Path to a script (on the server) to invoke on each file after it is written. Use '<input>' to insert the filename into the command line.\"\n    })\n\n    const AUTH_NONE = ''\n    const AUTH_KERBEROS = 'kerberos'\n\n    var _isLocal = () => rose.param('addin_ecda_file_delivery_mode') === MODE_LOCAL\n    var _isRemote = () => !_isLocal()\n    var _isHive = () => rose.param('addin_ecda_file_delivery_mode') === MODE_HIVE\n    var _isKerberos = () => _isRemote() && rose.param('addin_ecda_file_remote_auth') === AUTH_KERBEROS\n\n\n    rose.param({\n        id: \"addin_ecda_file_remote_dir\",\n        title: \"Remote Directory\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Path to remote directory\",\n        visibleWhen: _isRemote,\n        //valueIsRequired: true,\n   })\n\n    rose.param({\n        id: \"addin_ecda_file_config_path\",\n        title: \"Configuration Path\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Configuration path - option CONFIG_PATH\",\n        visibleWhen:  _isRemote,\n        //valueIsRequired: true,\n    })\n\n    rose.param({\n        id: \"addin_ecda_file_hive_schema\",\n        title: \"Hive Schema Name\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Hive Schema Name\",\n        visibleWhen: _isHive,\n        valueIsRequired: true,\n   })\n\n    rose.param({\n        id: \"addin_ecda_file_hive_table\",\n        title: \"Hive Table Name\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Hive Table Name\",\n        visibleWhen: _isHive,\n        valueIsRequired: true,\n   })\n\n    rose.param({\n        id: \"addin_ecda_file_hive_uri\",\n        title: \"Hive JDBC URI\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"JDBC URL for accessing the Hive server. Must be specified if HIVE_TABLE_NAME is specified\",\n        visibleWhen: _isHive,\n        valueIsRequired: true,\n   })\n\n    rose.param({\n        id: \"addin_ecda_file_hive_metastore_uris\",\n        title: \"Hive Metastore URIs\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Location of the Hive metastore. Comma-separated list of URIs. Required if HIVE_TABLE_NAME is specified\",\n        visibleWhen: _isHive,\n        valueIsRequired: true,\n   })\n\n\n    rose.param({\n        id: \"addin_ecda_file_remote_auth\",\n        title: \"Authentication Method\",\n        type: \"choice\",\n        defval: AUTH_NONE,\n        values: [AUTH_NONE, AUTH_KERBEROS],\n        tooltip: \"Authentication method to use - option AUTH_METHOD\",\n        visibleWhen: _isRemote,\n        valueIsRequired: true,\n    })\n\n    rose.param({\n        id: \"addin_ecda_file_auth_user\",\n        title: \"Remote Username\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Remote username - option AUTH_USERNAME\",\n        visibleWhen: _isKerberos,\n        valueIsRequired: true,\n    })\n\n    rose.param({\n        id: \"addin_ecda_file_auth_keytab\",\n        title: \"Authentication Keytab\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Authentication Keytab - option AUTH_KEYTAB\",\n        visibleWhen:  _isKerberos,\n        valueIsRequired: true,\n    })\n\n    rose.param({\n        id: \"addin_ecda_file_auth_metastore_principal\",\n        title: \"Hive Metastore Principal\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Hive Metastore Principal - option AUTH_METASTORE_PRINCIPAL. 3-part name of the Kerberos principal which can read the Hive metastore. This is the value of the hive.metastore.kerberos.principal property set in the Hive installation's hive-site.xml descriptor file\",\n        visibleWhen: () =>  _isKerberos() && _isHive(),\n        valueIsRequired: true,\n    })\n\n    rose.param({\n        id: \"addin_ecda_file_escape_columns\",\n        title: \"Escape Strings in\",\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"A list of the columns in which strings should be escaped when output\",\n        columns: ['column', 'write text'],\n        columnTypes: [null, 'escaped|as is'],\n        columnDefs: ['', 'escaped']\n    })\n\n\n%>\n\n<%  rose.defineECDAwriter('file', { define: function(rose) { var __p = ''  %>\n\n<%      return __p }, server: function(rose) { var __p = '' %>\n\n  SERVER <%=  rose.param('addin_ecda_file_delivery_mode') === MODE_LOCAL ? '\"FILE_SERVER\"' : '\"HDFS_SERVER\"' %>\n\n<%      return __p }, options: function(rose) { var __p = '' %>\n\n        <% const x = rose.param(\"addin_ecda_file_prefix_suffix\").split('|') %>\n        <% const rm = rose.param(\"addin_ecda_file_rotation_mode\") %>\n        <% const rt = rose.param(\"addin_ecda_file_rotation_time\").split('|').join('') %>\n        <% const rs = rose.param(\"addin_ecda_file_rotation_size\").split('|').join('') %>\n\n        \"DIRECTORY\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_file_directory\")) %>,\n        \"FILENAME_PREFIX\" <%= rose.sqlLiteral(x[0]) %>,\n        \"FILENAME_SUFFIX\" <%= rose.sqlLiteral(x[1]) %>,\n        \"FILENAME_DATE_FORMAT\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_file_filename_date_format\")) %>,\n        <%= rose.ecdaOptMaybe(\"FILE_ROTATION_TIME\", rt, false, /time/.test(rm)) %>\n        <%= rose.ecdaOptMaybe(\"FILE_ROTATION_SIZE\", rs, false, /size/.test(rm)) %>\n        <%= rose.ecdaOptMaybe(\"ORIGINAL_FILENAME\", rose.param('addin_ecda_file_original_filename')) %>\n        <%= rose.ecdaOptMaybe(\"FILE_ROTATION_WATERMARK_COLUMN\", rose.param('addin_ecda_file_watermark_column')) %>\n        <%= rose.ecdaOptMaybe(\"POSTPROCESS_CMD\", rose.param('addin_ecda_file_postprocess_cmd')) %>\n\n        <%= rose.ecdaOptMaybe(\"HDFS_OUTPUT_DIR\", rose.param('addin_ecda_file_remote_dir')) %>\n        <%= rose.ecdaOptMaybe(\"CONFIG_PATH\", rose.param('addin_ecda_file_config_path')) %>\n        <%= rose.ecdaOptMaybe(\"HIVE_SCHEMA_NAME\", rose.param('addin_ecda_file_hive_schema')) %>\n        <%= rose.ecdaOptMaybe(\"HIVE_TABLE_NAME\", rose.param('addin_ecda_file_hive_table')) %>\n        <%= rose.ecdaOptMaybe(\"HIVE_URI\", rose.param('addin_ecda_file_hive_uri')) %>\n        <%= rose.ecdaOptMaybe(\"HIVE_METASTORE_URIS\", rose.param('addin_ecda_file_hive_metastore_uris')) %>\n        <%= rose.ecdaOptMaybe(\"AUTH_METHOD\", rose.param('addin_ecda_file_remote_auth')) %>\n        <%= rose.ecdaOptMaybe(\"AUTH_USERNAME\", rose.param('addin_ecda_file_auth_user')) %>\n        <%= rose.ecdaOptMaybe(\"AUTH_KEYTAB\", rose.param('addin_ecda_file_auth_keytab')) %>\n        <%= rose.ecdaOptMaybe(\"AUTH_METASTORE_PRINCIPAL\", rose.param('addin_ecda_file_auth_metastore_principal')) %>\n        \n        <%= \n            rose.tableParam('addin_ecda_file_escape_columns', \n                t => `\"ESCAPE_${t[0].trim()}\" 'true',\\n`, \n                t => t[0].trim() && /^escape/.test(t[1])).join('')\n        %>\n        \"FORMATTER_INCLUDE_ROWTIME\" <%= rose.param(\"addin_ecda_file_include_rowtime\") ? \"'true'\" : \"'false'\" %>,\n        \"FILE_ROTATION_RESPECT_ROWTIME\" <%= /^always/.test(rose.param(\"addin_ecda_file_respect_rowtime\")) ? \"'true'\" : \"'false'\" %>\n\n<%      return __p }, props: function(rose) {\n\n            const x = rose.param(\"addin_ecda_file_prefix_suffix\").split('|')\n            const rm = rose.param(\"addin_ecda_file_rotation_mode\")\n            const rt = rose.param(\"addin_ecda_file_rotation_time\").split('|').join('')\n            const rs = rose.param(\"addin_ecda_file_rotation_size\").split('|').join('')\n\n            rose.ecdaProp('DIRECTORY', rose.param(\"addin_ecda_file_directory\"))\n            rose.ecdaProp('FILENAME_PREFIX', x[0])\n            rose.ecdaProp('FILENAME_SUFFIX', x[1])\n            rose.ecdaProp('FILENAME_DATE_FORMAT', rose.param(\"addin_ecda_file_filename_date_format\"))\n            rose.ecdaPropMaybe('FILE_ROTATION_TIME', rt, /time/.test(rm))\n            rose.ecdaPropMaybe('FILE_ROTATION_SIZE', rs, /size/.test(rm))\n            rose.ecdaPropMaybe(\"ORIGINAL_FILENAME\", rose.param('addin_ecda_file_original_filename'))\n            rose.ecdaPropMaybe(\"FILE_ROTATION_WATERMARK_COLUMN\", rose.param('addin_ecda_file_watermark_column')) \n            rose.ecdaPropMaybe(\"POSTPROCESS_CMD\", rose.param('addin_ecda_file_postprocess_cmd'))\n\n            rose.ecdaPropMaybe(\"HDFS_OUTPUT_DIR\", rose.param('addin_ecda_file_remote_dir')) \n            rose.ecdaPropMaybe(\"CONFIG_PATH\", rose.param('addin_ecda_file_config_path'))\n            rose.ecdaPropMaybe(\"HIVE_SCHEMA_NAME\", rose.param('addin_ecda_file_hive_schema'))\n            rose.ecdaPropMaybe(\"HIVE_TABLE_NAME\", rose.param('addin_ecda_file_hive_table')) \n            rose.ecdaPropMaybe(\"HIVE_URI\", rose.param('addin_ecda_file_hive_uri'))\n            rose.ecdaPropMaybe(\"HIVE_METASTORE_URIS\", rose.param('addin_ecda_file_hive_metastore_uris'))\n            rose.ecdaPropMaybe(\"AUTH_METHOD\", rose.param('addin_ecda_file_remote_auth'))\n            rose.ecdaPropMaybe(\"AUTH_USERNAME\", rose.param('addin_ecda_file_auth_user'))\n            rose.ecdaPropMaybe(\"AUTH_KEYTAB\", rose.param('addin_ecda_file_auth_keytab'))\n            rose.ecdaPropMaybe(\"AUTH_METASTORE_PRINCIPAL\", rose.param('addin_ecda_file_auth_metastore_principal'))\n\n            rose.tableParam('addin_ecda_file_escape_columns', \n                t => rose.ecdaProp(`ESCAPE_${t[0].trim()}`, 'true'), \n                t => t[0].trim() && /^escape/.test(t[1]))\n            rose.ecdaProp('FORMATTER_INCLUDE_ROWTIME', rose.param(\"addin_ecda_file_include_rowtime\") ? \"true\" : \"false\")\n            rose.ecdaProp(\"FILE_ROTATION_RESPECT_ROWTIME\", /^always/.test(rose.param(\"addin_ecda_file_respect_rowtime\")) ? \"true\" : \"false\")\n\n            rose._ecdaDesc = 'file(s) at ' + rose.param(\"addin_ecda_file_directory\") + '/' + x[0] + '*' + x[1]\n\n} }) %>\n","external":true,"binary":false,"title":"File","public":true,"doc":"ECDA File prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"output-menu-file","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_http_writer.sql":{"value":"<%= rose.panel('params') %>\n\n<%\n    rose.localSet('docsDismissed', true);\n    rose.makeKnownAs('ecda_http_writer');\n\n    rose.param({\n        id: \"addin_ecda_http_url\",\n        title: \"URL\",\n        type: \"string\",\n        defval: 'http://',\n        tooltip: \"URL for the streaming source\",\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: 'addin_ecda_http_headers',\n        title: 'HTTP Headers',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"Enter additional HTTP headers and their values\",\n        columns: ['header', 'value'],\n        columnTypes: [null, null],\n        columnDefs: ['', ''],\n    });\n%>\n\n<%  rose.defineECDAwriter('http', { define: function(rose) { var __p = '';  %>\n\n<%      return __p; }, server: function(rose) { var __p = ''; %>\n\n    SERVER \"HTTP_SERVER\"\n\n<%      return __p; }, options: function(rose) { var __p = ''; %>\n\n        \"URL\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_http_url\")) %>\n        <%= rose.tableParam(\"addin_ecda_http_headers\", function(t){\n            return ',\\n     ' + rose.sqlIdentifier('HEADER_' + t[0].toUpperCase()) + ' ' + rose.sqlLiteral(t[1]);\n            }).join('')\n        %>\n\n\n<%      return __p; }, props: function(rose) {\n\n            rose.ecdaProp('URL', rose.param(\"addin_ecda_http_url\"));\n            rose.tableParam(\"addin_ecda_http_headers\", function(t){\n                rose.ecdaProp('HEADER_' + t[0].toUpperCase(), t[1]);\n            });\n\n            rose._ecdaDesc = \"HTTP at \" + rose.param(\"addin_ecda_http_url\");\n\n} }); %>\n","external":true,"binary":false,"title":"HTTP","public":true,"doc":"ECDA HTTP prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"input-menu-http","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_mongodb_writer.sql":{"value":"<%= rose.panel('params') %>\n\n<%\n    rose.localSet('docsDismissed', true);\n    rose.makeKnownAs('ecda_mongodb_writer');\n\n    rose.param({\n        id: \"addin_ecda_mongodb_writer_host\",\n        title: \"Hostname\",\n        type: \"string\",\n        defval: 'localhost'\n    });\n\n    rose.param({\n        id: \"addin_ecda_mongodb_writer_port\",\n        title: \"Port\",\n        type: \"string\",\n        defval: '27017'\n    });\n\n    rose.param({\n        id: \"addin_ecda_mongodb_writer_path\",\n        title: \"Database\",\n        type: \"string\",\n        tooltip: \"Name of an existing Mongodb Database\",\n        defval: ''\n    });\n\n    rose.param({\n        id: \"addin_ecda_mongodb_writer_user\",\n        title: \"Username\",\n        type: \"string\",\n        defval: ''\n    });\n\n    rose.param({\n        id: \"addin_ecda_mongodb_writer_password\",\n        title: \"Password\",\n        type: \"string\",\n        defval: ''\n    });\n\n    rose.param({\n        id: \"addin_ecda_mongodb_writer_collection\",\n        title: \"Collection\",\n        type: \"string\",\n        tooltip: \"Name of an existing Mongodb Collection\",\n        defval: ''\n    });\n\n    rose.param({\n        id: \"addin_ecda_mongodb_writer_transaction_rowtime_limit\",\n        title: \"Transaction rowtime limit\",\n        tooltip: \"Row time limit before committing transaction, in milliseconds. If 0, only the row limit applies.\",\n        type: \"integer\",\n        defval: 1000\n    });\n\n    rose.param({\n        id: \"addin_ecda_mongodb_writer_transaction_row_limit\",\n        title: \"Transaction row limit\",\n        tooltip: \"Number of rows sent before committing transaction. If 0,only the time limit applies.\",\n        type: \"integer\",\n        defval: 0\n    });\n\n%>\n\n<%  rose.defineECDAwriter('mongodb', { define: function(rose) { var __p = '';  %>\n\n<%      return __p; }, server: function(rose) { var __p = ''; %>\n\n    SERVER \"MONGODB_SERVER\"\n\n<%      return __p; }, options: function(rose) { var __p = ''; %>\n\n        \"URL\" <%= rose.sqlLiteral('mongodb://' +rose.param('addin_ecda_mongodb_writer_user') + ':' + rose.param('addin_ecda_mongodb_writer_password') + '@' + rose.param('addin_ecda_mongodb_writer_host') + ':' + rose.param('addin_ecda_mongodb_writer_port') + '/' + rose.param('addin_ecda_mongodb_writer_path')) %>,\n        \"COLLECTION\" <%= rose.sqlLiteral(rose.param('addin_ecda_mongodb_writer_collection')) %>,\n        \"TRANSACTION_ROWTIME_LIMIT\" <%= rose.sqlLiteral(rose.param('addin_ecda_mongodb_writer_transaction_rowtime_limit')) %>,\n        \"TRANSACTION_ROW_LIMIT\" <%= rose.sqlLiteral(rose.param('addin_ecda_mongodb_writer_transaction_row_limit')) %>,\n        \"DATE_FORMAT\" 'mm/dd/yyyy'\n\n<%      return __p; }, props: function(rose) {\n\n        rose.ecdaProp('URL', '//mongodb://' + rose.param('addin_ecda_mongodb_writer_user') + ':' + rose.param('addin_ecda_mongodb_writer_password') + '@' + rose.param('addin_ecda_mongodb_writer_host') + ':' + rose.param('addin_ecda_mongodb_writer_port') + '/' + rose.param('addin_ecda_mongodb_writer_path'));\n        rose.ecdaProp('COLLECTION', rose.param('addin_ecda_mongodb_writer_collection'));\n        rose.ecdaProp('TRANSACTION_ROWTIME_LIMIT', rose.param('addin_ecda_mongodb_writer_transaction_rowtime_limit'));\n        rose.ecdaProp('TRANSACTION_ROW_LIMIT', rose.param('addin_ecda_mongodb_writer_transaction_row_limit'));\n        rose.ecdaProp('DATE_FORMAT', 'mm/dd/yyyy');\n\n        rose._ecdaDesc = 'Mongodb at ' + rose.param('addin_ecda_mongodb_writer_host') + ':' + rose.param('addin_ecda_mongodb_writer_port') + '/' + rose.param('addin_ecda_mongodb_writer_path');\n\n} }); %>\n","external":true,"binary":false,"title":"MongoDB","public":true,"doc":"ECDA Mongodb","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"output-menu-mongo","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_socket_writer.sql":{"value":"<%= rose.panel('params') %>\n\n<%\n    rose.localSet('docsDismissed', true);\n    rose.makeKnownAs('ecda_socket_writer');\n\n    rose.param({\n        id: \"addin_ecda_socket_server_hostport\",\n        title: \"Server Host\",\n        type: \"doubleValue\",\n        defval: '0.0.0.0|',\n        leftLabel: 'Name',\n        rightLabel: 'Port',\n        tooltip: \"The host and port for the socket from which we're transmitting data. The host can be used to select the network interface, the default (0.0.0.0) uses all interfaces.\"\n    });\n    rose.param({\n        id: \"addin_ecda_socket_is_ipv6\",\n        title: \"Socket uses IPV6?\",\n        type: \"boolean\",\n        defval: false\n    });\n    rose.param({\n        id: \"addin_ecda_socket_is_tcp\",\n        title: \"Socket uses TCP?\",\n        type: \"boolean\",\n        defval: false\n    });\n%>\n\n<%  rose.defineECDAwriter('socket', { define: function(rose) { var __p = '';  %>\n\n<%      return __p; }, server: function(rose) { var __p = ''; %>\n\n    SERVER \"NET_SERVER\"\n\n<%      return __p; }, options: function(rose) { var __p = ''; %>\n\n        \"SERVER_HOST\" <%= rose.sqlLiteral(rose.ecda_socket_server_host) %>,\n        \"SERVER_PORT\" <%= rose.sqlLiteral(rose.ecda_socket_server_port) %>,\n        \"IS_IPV6\" <%= rose.param(\"addin_ecda_socket_is_ipv6\") ? \"'true'\" : \"'false'\" %>,\n        \"IS_TCP\" <%= rose.param(\"addin_ecda_socket_is_tcp\") ? \"'true'\" : \"'false'\" %>\n\n\n<%      return __p; }, props: function(rose) {\n\n            rose.ecdaProp('SERVER_HOST', rose.ecda_socket_server_host);\n            rose.ecdaProp('SERVER_PORT', rose.ecda_socket_server_port);\n            rose.ecdaProp('IS_IPV6', rose.param(\"addin_ecda_socket_is_ipv6\") ? 'true' : 'false');\n            rose.ecdaProp('IS_TCP', rose.param(\"addin_ecda_socket_is_tcp\") ? 'true' : 'false');\n\n            rose._ecdaDesc = 'socket at ' + rose.ecda_socket_server_host + ':' + rose.ecda_socket_server_port;\n\n} }); %>\n","external":true,"binary":false,"title":"Socket","public":true,"doc":"ECDA Socket prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"output-menu-socket","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_amqp_writer.sql":{"value":"<%= rose.panel('params') %>\n\n<%\n    rose.localSet('docsDismissed', true);\n    rose.makeKnownAs('ecda_amqp_writer');\n\n    var defaultProtocol = 'AMQP 1.0';\n\n    rose.param({\n        id: \"addin_ecda_amqp_writer_url\",\n        title: \"AMQP URL\",\n        type: \"string\",\n        defval: 'amqp://',\n        tooltip: \"URL for the AMQP connection\",\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: \"addin_ecda_amqp_writer_destination\",\n        title: \"Destination\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Queue or topic indentifier\",\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: 'addin_ecda_amqp_writer_protocol',\n        title: 'Protocol',\n        type: 'choice',\n        values: [defaultProtocol, 'AMQP Legacy'],\n        defval: defaultProtocol\n    });\n\n    rose.param({\n        id: 'addin_ecda_amqp_writer_ack_mode',\n        title: 'Acknowledge Mode',\n        type: 'choice',\n        values: ['auto', 'client', 'dups_ok', 'transacted'],\n        defval: 'auto'\n    });\n\n    rose.param({\n        id: 'addin_ecda_amqp_writer_delivery_mode',\n        title: 'Delivery Mode',\n        type: 'choice',\n        values: ['non_persistent', 'persistent'],\n        defval: 'non_persistent'\n    });\n\n    function protocol(rose) {\n        return rose.param('addin_ecda_amqp_writer_protocol') === defaultProtocol ? '\"AMQP10_SERVER\"' : '\"AMQP_LEGACY_SERVER\"';\n    }\n%>\n\n<%  rose.defineECDAwriter('amqp', { define: function(rose) { var __p = '';  %>\n\n<%      return __p; }, server: function(rose) { var __p = ''; %>\n\n    SERVER <%= protocol(rose) %>\n\n<%      return __p; }, options: function(rose) { var __p = ''; %>\n\n        \"CONNECTION_URL\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_amqp_writer_url\")) %>,\n        \"DESTINATION\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_amqp_writer_destination\")) %>,\n        \"ACKNOWLEDGE_MODE\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_amqp_writer_ack_mode\")) %>,\n        \"DELIVERY_MODE\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_amqp_writer_delivery_mode\")) %>\n\n<%      return __p; }, props: function(rose) {\n\n            rose.ecdaProp('CONNECTION_URL', rose.param(\"addin_ecda_amqp_writer_url\"));\n            rose.ecdaProp('DESTINATION', rose.param(\"addin_ecda_amqp_writer_destination\"));\n            rose.ecdaProp('ACKNOWLEDGE_MODE', rose.param(\"addin_ecda_amqp_writer_ack_mode\"));\n            rose.ecdaProp('DELIVERY_MODE', rose.param(\"addin_ecda_amqp_writer_delivery_mode\"));\n\n            rose._ecdaDesc = 'AMQP at ' + rose.param(\"url\");\n\n} }); %>\n","external":true,"binary":false,"title":"AMQP","public":true,"doc":"ECDA AMQP prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"output-menu-amqp","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_kafka_writer.sql":{"value":"<%= rose.panel('params') %>\n\n<%\n    rose.localSet('docsDismissed', true);\n    rose.makeKnownAs('ecda_kafka_writer');\nvar oldAPI = 'SimpleConsumer API (>= v0.8.2)';\nvar newAPI = 'KafkaConsumer API (>= v0.10.2)';\n\nrose.param({\n    id: \"addin_ecda_kafka_api\",\n    title: \"API Version\",\n    type: \"choice\",\n    values: [newAPI, oldAPI],\n    defval: newAPI,\n    tooltip: \"Select the API version that matches your Kafka server\"\n});\n\n\nvar dflt = [];\nvar hp = rose.param(\"addin_ecda_kafka_hostport\") || \"\";\nif(hp) {\n    var x = hp.split('|');\n\n    if(x && x.length === 2)\n        dflt.push(x);\n} else\n    dflt.push(['localhost','9092']);\n\nrose.param({\n    id: \"addin_ecda_kafka_metadata_broker_list\",\n    title: \"Kafka Brokers\",\n    type: \"tupleList\",\n    defval: JSON.stringify(dflt),\n    tooltip: \"Kafka brokers used for getting metadata (topics, partitions, and replicas)\",\n    columns: ['host', 'port'],\n    columnTypes: [null, null],\n    columnDefs: ['', '9092']\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_topic\",\n    title: \"Topic\",\n    type: \"string\",\n    defval: '',\n    tooltip: \"The name of the Kafka topic to which you are writing\",\n    valueIsRequired: true\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_client_id\",\n    title: \"Client ID\",\n    type: \"string\",\n    defval: '',\n    tooltip: \"A user-specified string sent in each request to help trace calls\"\n});\n\n\n\nvar _advOptsModeChoices = ['Hide advanced options', 'Show advanced options'];\nvar _isAdvanced = function() { return rose.param('addin_ecda_kafka_writer_advanced') === _advOptsModeChoices[1] };\nvar _isNewAdvanced = function() { return _isAdvanced() && rose.param('addin_ecda_kafka_api') === newAPI }\nvar _isOldAdvanced = function() { return _isAdvanced() && rose.param('addin_ecda_kafka_api') === oldAPI }\nvar _isOldAsync = function() { return _isOldAdvanced() && rose.param('addin_ecda_kafka_producer_type') == 'async' }\nvar _isAsync = function() { return _isAdvanced() && (rose.param('addin_ecda_kafka_api') === newAPI || rose.param('addin_ecda_kafka_producer_type') == 'async') };\n\nrose.param({\n    id: \"addin_ecda_kafka_writer_advanced\",\n    title: \"Advanced Options\",\n    type: 'choice',\n    values: _advOptsModeChoices,\n    defval: _advOptsModeChoices[0],\n    tooltip: \"Show or hide the advanced Kafka options\"\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_partitioner_class\",\n    title: \"Partitioner\",\n    type: \"string\",\n    defval: '',\n    tooltip: \"The fully qualified Java classname of the the Kafka partitioner (e.g. org.apache.kafka.clients.producer.internals.DefaultPartitioner)\",\n    visibleWhen: _isAdvanced\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_serializer_class\",\n    title: \"Value Serializer\",\n    type: \"string\",\n    defval: '',\n    tooltip: \"The fully qualified Java classname of the the Kafka serializer for values (e.g. kafka.serializer.DefaultEncoder)\",\n    visibleWhen: _isAdvanced\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_key_serializer_class\",\n    title: \"Key Serializer\",\n    type: \"string\",\n    defval: '',\n    tooltip: \"The fully qualified Java classname of the the Kafka serializer for keys (e.g. kafka.serializer.DefaultEncoder)\",\n    visibleWhen: _isAdvanced\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_headers_column_list\",\n    title: \"Header Columns\",\n    type: \"string\",\n    defval: '',\n    tooltip: \"Comma-separated list of columns to include into the Kafka header (as newline-separated key=value)\",\n    visibleWhen: _isAdvanced\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_producer_type\",\n    title: \"Producer\",\n    type: \"choice\",\n    defval: 'async',\n    values: [\"async\", \"sync\"],\n    tooltip: \"Specifies whether messages are sent asynchronously in a background thread\",\n    visibleWhen: function() { return rose.param('addin_ecda_kafka_api') === oldAPI && _isAdvanced()}\n});\n\nrose.param({  \n    id: \"addin_ecda_kafka_compression_codec\",\n    title: \"Compression\",\n    type: \"choice\",\n    defval: 'none',\n    values: [\"none\", \"gzip\", \"snappy\"],\n    tooltip: \"Specifies the compression codec for generated data\",\n    visibleWhen: _isOldAdvanced\n});\n\nrose.param({  \n    id: \"addin_ecda_kafka_compression_type\",\n    title: \"Compression\",\n    type: \"choice\",\n    defval: 'none',\n    values: [\"none\", \"gzip\", \"snappy\", \"lz4\", \"zstd\"],\n    tooltip: \"Specifies the compression type for generated data\",\n    visibleWhen: _isNewAdvanced\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_compressed_topics\",\n    title: \"Compressed Topics\",\n    type: \"string\",\n    defval: '',\n    tooltip: \"Limits compression to only the listed topics\",\n    visibleWhen: function() { return _isOldAdvanced && rose.param('addin_ecda_kafka_compression_codec') != 'none' }\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_message_send_max_retries\",\n    title: \"Msg Send Retries\",\n    tooltip: \"Maximum number of retries for failed send requests\",\n    type: \"integer\",\n    defval: 3,\n    visibleWhen: _isOldAdvanced\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_message_retry_backoff_ms\",\n    title: \"Retry Backoff\",\n    tooltip: \"Backoff time for each retry, in milliseconds\",\n    type: \"integer\",\n    defval: 100,\n    visibleWhen: _isAdvanced\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_message_request_required_acks\",\n    title: \"Request Required ACKs\",\n    tooltip: \"If async is selected, this sets a max time for buffering data in milliseconds\",\n    type: \"integer\",\n    defval: 0,\n    visibleWhen: _isOldAsync\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_message_request_timeout_ms\",\n    title: \"Request Timeout\",\n    tooltip: \"How long the broker will wait before sending an error back to the client, in milliseconds\",\n    type: \"integer\",\n    defval: 10000,\n    visibleWhen: _isAdvanced\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_topic_metadata_refresh_interval_ms\",\n    title: \"Topic Metadata Refresh\",\n    tooltip: \"Refresh interval for topic metadata, in milliseconds\",\n    type: \"integer\",\n    defval: 600 * 1000,\n    visibleWhen: _isOldAdvanced\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_queue_buffering_max_ms\",\n    title: \"Queue Buffering Max Time\",\n    tooltip: \"Maximum time to buffer data when using async mode, in milliseconds\",\n    type: \"integer\",\n    defval: 5000,\n    visibleWhen: _isOldAsync\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_queue_buffering_max_messages\",\n    title: \"Queue Buffering Max Messages\",\n    tooltip: \"Maximum number of messages to buffer when using async mode\",\n    type: \"integer\",\n    defval: 1000,\n    visibleWhen: _isOldAsync\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_queue_enqueue_timeout_ms\",\n    title: \"Queue Enqueue Timeout\",\n    tooltip: \"How long to block before dropping messages in async mode. If set to -1 the producer will block indefinitely and never willingly drop a send.\",\n    type: \"integer\",\n    defval: -1,\n    visibleWhen: _isOldAsync\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_batch_num_messages\",\n    title: \"Batch Messages\",\n    tooltip: \"Number of messages to send in one batch when using async mode\",\n    type: \"integer\",\n    defval: 200,\n    visibleWhen: _isOldAsync\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_batch_size\",\n    title: \"Batch Size\",\n    tooltip: \"Maximum size of messages to send in one batch\",\n    type: \"integer\",\n    defval: 16384,\n    visibleWhen: _isNewAdvanced\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_linger_ms\",\n    title: \"Linger Time\",\n    tooltip: \"Wait up to this many millisecs before despatching a partial batch\",\n    type: \"integer\",\n    defval: 100,\n    visibleWhen: _isNewAdvanced\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_send_buffer_bytes\",\n    title: \"Send Buffer Size\",\n    tooltip: \"Number of bytes in the socket write buffer\",\n    type: \"integer\",\n    defval: 100 * 1024,\n    visibleWhen: _isAdvanced\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_transaction_rowtime_limit\",\n    title: \"Transaction Rowtime Limit\",\n    tooltip: \"Time period in milliseconds. Allows all rows received from the input query that have ROWTIME values within the specified range to be committed in a single transaction to the Kafka broker.\",\n    type: \"integer\",\n    defval: 1000,\n    visibleWhen: _isNewAdvanced\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_transaction_id\",\n    title: \"Transaction ID\",\n    tooltip: \"The transaction ID used by the KafkaWriter instance for the given foreign stream\",\n    type: \"string\",\n    defval: '',\n    visibleWhen: _isNewAdvanced\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_ha_rollover_timeout\",\n    title: \"HA Rollover Timeout\",\n    tooltip: 'Time in milliseconds (must be greater than 0). When the pump is configured to run in High Availability mode, and the pump is running as a \"Follower\", it waits for this amount of time for a lack of commits from the \"Leader\".',\n    type: \"integer\",\n    defval: 5000,\n    visibleWhen: _isNewAdvanced\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_poll_timeout_ms\",\n    title: \"Poll Timeout\",\n    tooltip: \"The timeout value in milliseconds to be passed as a parameter to the KafkaConsumer.poll() API call\",\n    type: \"integer\",\n    defval: 100,\n    visibleWhen: _isAdvanced\n});\n\nrose.param({\n    id: \"addin_ecda_kafka_commit_metadata_column\",\n    title: \"Commit Metadata Column\",\n    tooltip: \"Using this option, you can commit a stringified value of the specified column along with its ROWTIME in a CSV format, along with the offset of the last published message for each partition in a transaction.\",\n    type: \"string\",\n    defval: '',\n    visibleWhen: _isAdvanced\n});\n\n%>\n\n<%  rose.defineECDAwriter('kafka', { define: function(rose) { var __p = '';  %>\n\n<%      return __p; }, server: function(rose) { var __p = ''; %>\n\n    SERVER <%=  rose.param('addin_ecda_kafka_api') === oldAPI ? '\"KAFKA_SERVER\"' : '\"KAFKA10_SERVER\"' %>\n\n<%      return __p; }, options: function(rose) { var __p = ''; %>\n\n<% switch(rose.param('addin_ecda_kafka_api')) { case newAPI: %>\n        <%= rose.ecdaOpt(\"TRANSACTION_ROWTIME_LIMIT\", rose.param('addin_ecda_kafka_transaction_rowtime_limit')) %>\n        <%= rose.ecdaOptMaybe(\"transactional.id\", rose.param('addin_ecda_kafka_transaction_id')) %>\n        <%= rose.ecdaOptMaybe(\"HEADERS_COLUMN_LIST\", rose.param('addin_ecda_kafka_headers_column_list')) %>\n        <%= rose.ecdaOpt(\"pump.name\", rose.epPumpFQN) %>\n        <%= rose.ecdaOpt(\"HA_ROLLOVER_TIMEOUT\", rose.param('addin_ecda_kafka_ha_rollover_timeout')) %>\n        <%= rose.ecdaOptMaybe(\"bootstrap.servers\", rose.tableParam('addin_ecda_kafka_metadata_broker_list', function(t) { return t[0] + ':' + t[1] }).join(',')) %>\n        <%= rose.ecdaOptMaybe(\"compression.type\", rose.param(\"addin_ecda_kafka_compression_type\")) %>\n         <%= rose.ecdaOptMaybe(\"batch.size\", rose.param(\"addin_ecda_kafka_batch_size\")) %>\n        <%= rose.ecdaOptMaybe(\"linger.ms\", rose.param(\"addin_ecda_kafka_linger_ms\")) %>\n        <%= rose.ecdaOptMaybe(\"value.serializer\", rose.param(\"addin_ecda_kafka_serializer_class\")) %>\n        <%= rose.ecdaOptMaybe(\"key.serializer\", rose.param(\"addin_ecda_kafka_key_serializer_class\")) %>\n<% break; case oldAPI: %>\n        <%= rose.ecdaOptMaybe(\"metadata.broker.list\", rose.tableParam('addin_ecda_kafka_metadata_broker_list', function(t) { return t[0] + ':' + t[1] }).join(',')) %>\n        <%= rose.ecdaOptMaybe(\"producer.type\", rose.param(\"addin_ecda_kafka_producer_type\")) %>\n        <%= rose.ecdaOptMaybe(\"compression.codec\", rose.param(\"addin_ecda_kafka_compression_type\")) %>\n<% if(rose.param('addin_ecda_kafka_compression_codec') != 'none') { %>\n        <%= rose.ecdaOptMaybe(\"compressed.topics\", rose.param(\"addin_ecda_kafka_compressed_topics\")) %>\n<% } %>\n       <%= rose.ecdaOpt(\"message.send.max.retries\", rose.param(\"addin_ecda_kafka_message_send_max_retries\")) %>\n<%   if(rose.param(\"addin_ecda_kafka_producer_type\") == 'async') { %>\n        <%= rose.ecdaOptMaybe(\"request.required.acks\", rose.param(\"addin_ecda_kafka_message_request_required_acks\")) %>\n        <%= rose.ecdaOpt(\"queue.buffering.max.ms\", rose.param(\"addin_ecda_kafka_queue_buffering_max_ms\")) %>\n        <%= rose.ecdaOpt(\"queue.buffering.max.messages\", rose.param(\"addin_ecda_kafka_queue_buffering_max_messages\")) %>\n        <%= rose.ecdaOpt(\"queue.enqueue.timeout.ms\", rose.param(\"addin_ecda_kafka_queue_enqueue_timeout_ms\")) %>\n        <%= rose.ecdaOpt(\"batch.num.messages\", rose.param(\"addin_ecda_kafka_batch_num_messages\")) %>\n<%   } %>\n<% } %>\n        <%= rose.ecdaOptMaybe(\"partitioner.class\", rose.param(\"addin_ecda_kafka_partitioner_class\")) %>\n        <%= rose.ecdaOpt(\"retry.backoff.ms\", rose.param(\"addin_ecda_kafka_message_retry_backoff_ms\")) %>\n        <%= rose.ecdaOpt(\"request.timeout.ms\", rose.param(\"addin_ecda_kafka_message_request_timeout_ms\")) %>\n        <%= rose.ecdaOpt(\"send.buffer.bytes\", rose.param(\"addin_ecda_kafka_send_buffer_bytes\")) %>\n        <%= rose.ecdaOptMaybe(\"client.id\", rose.param(\"addin_ecda_kafka_client_id\")) %>\n        <%= rose.ecdaOpt(\"POLL_TIMEOUT\", rose.param(\"addin_ecda_kafka_poll_timeout_ms\")) %>\n        <%= rose.ecdaOptMaybe(\"COMMIT_METADATA_COLUMN_NAME\", rose.param(\"addin_ecda_kafka_commit_metadata_column\")) %>\n        <%= rose.ecdaOptMaybe(\"TOPIC\", rose.param(\"addin_ecda_kafka_topic\"), true) %>\n\n<%      return __p; }, props: function(rose) {\n\n    switch(rose.param('addin_ecda_kafka_api')) { \n        case newAPI:\n            rose.ecdaProp(\"TRANSACTION_ROWTIME_LIMIT\", rose.param('addin_ecda_kafka_transaction_rowtime_limit'));\n            rose.ecdaPropMaybe(\"transactional.id\", rose.param('addin_ecda_kafka_transaction_id'));\n            rose.ecdaPropMaybe(\"HEADERS_COLUMN_LIST\", rose.param('addin_ecda_kafka_headers_column_list'));\n            rose.ecdaProp(\"pump.name\", rose.epPumpFQN);\n            rose.ecdaProp(\"HA_ROLLOVER_TIMEOUT\", rose.param('addin_ecda_kafka_ha_rollover_timeout'));\n            rose.ecdaPropMaybe(\"bootstrap.servers\", rose.tableParam('addin_ecda_kafka_metadata_broker_list', function(t) { return t[0] + ':' + t[1] }).join(','));\n            rose.ecdaPropMaybe(\"compression.type\", rose.param(\"addin_ecda_kafka_compression_type\"));\n            rose.ecdaProp(\"batch.size\", rose.param(\"addin_ecda_kafka_batch_size\"));\n            rose.ecdaProp(\"linger.ms\", rose.param(\"addin_ecda_kafka_linger_ms\"));\n            rose.ecdaPropMaybe(\"value.serializer\", rose.param(\"addin_ecda_kafka_serializer_class\"));\n            rose.ecdaPropMaybe(\"key.serializer\", rose.param(\"addin_ecda_kafka_key_serializer_class\"));\n            break; \n\n        case oldAPI:\n            rose.ecdaPropMaybe(\"metadata.broker.list\", rose.tableParam('addin_ecda_kafka_metadata_broker_list', function(t) { return t[0] + ':' + t[1] }).join(','));\n            rose.ecdaPropMaybe(\"producer.type\", rose.param(\"addin_ecda_kafka_producer_type\"));\n            rose.ecdaPropMaybe(\"compression.codec\", rose.param(\"addin_ecda_kafka_compression_codec\"));\n            if(rose.param('addin_ecda_kafka_compression_codec') != 'none') {\n                rose.ecdaPropMaybe(\"compressed.topics\", rose.param(\"addin_ecda_kafka_compressed_topics\"));\n            }\n            rose.ecdaProp(\"message.send.max.retries\", rose.param(\"addin_ecda_kafka_message_send_max_retries\"));\n            if(rose.param(\"addin_ecda_kafka_producer_type\") == 'async') {\n                rose.ecdaPropMaybe(\"request.required.acks\", rose.param(\"addin_ecda_kafka_message_request_required_acks\"));\n                rose.ecdaProp(\"queue.buffering.max.ms\", rose.param(\"addin_ecda_kafka_queue_buffering_max_ms\"));\n                rose.ecdaProp(\"queue.buffering.max.messages\", rose.param(\"addin_ecda_kafka_queue_buffering_max_messages\"));\n                rose.ecdaProp(\"queue.enqueue.timeout.ms\", rose.param(\"addin_ecda_kafka_queue_enqueue_timeout_ms\"));\n                rose.ecdaProp(\"batch.num.messages\", rose.param(\"addin_ecda_kafka_batch_num_messages\"));\n            }\n            rose.ecdaProp(\"topic.metadata.refresh.interval.ms\", rose.param(\"addin_ecda_kafka_topic_metadata_refresh_interval_ms\"));\n            rose.ecdaPropMaybe(\"serializer.class\", rose.param(\"addin_ecda_kafka_serializer_class\"));\n            rose.ecdaPropMaybe(\"key.serializer.class\", rose.param(\"addin_ecda_kafka_key_serializer_class\"));\n            break; \n    }\n    rose.ecdaPropMaybe(\"partitioner.class\", rose.param(\"addin_ecda_kafka_partitioner_class\"));\n    rose.ecdaProp(\"retry.backoff.ms\", rose.param(\"addin_ecda_kafka_message_retry_backoff_ms\"));\n    rose.ecdaProp(\"request.timeout.ms\", rose.param(\"addin_ecda_kafka_message_request_timeout_ms\"));\n    rose.ecdaProp(\"send.buffer.bytes\", rose.param(\"addin_ecda_kafka_send_buffer_bytes\"));\n    rose.ecdaPropMaybe(\"client.id\", rose.param(\"addin_ecda_kafka_client_id\"));\n    rose.ecdaProp(\"POLL_TIMEOUT\", rose.param(\"addin_ecda_kafka_poll_timeout_ms\"));\n    rose.ecdaPropMaybe(\"COMMIT_METADATA_COLUMN_NAME\", rose.param(\"addin_ecda_kafka_commit_metadata_column\"));\n    rose.ecdaPropMaybe(\"TOPIC\", rose.param(\"addin_ecda_kafka_topic\"));\n\n    rose._ecdaDesc = 'Kafka at ' + rose.tableParam('addin_ecda_kafka_metadata_broker_list', function(t) { return t[0] + ':' + t[1] }).join(',');\n\n} }); %>\n","external":true,"binary":false,"title":"Kafka","public":true,"doc":"ECDA Kafka prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"output-menu-kafka","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_kinesis_writer.sql":{"value":"<%= rose.panel('params') %>\n\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    rose.localSet('docsDismissed', true);\n    rose.makeKnownAs('ecda_kinesis_writer');\n\n    rose.param({\n        id: \"addin_ecda_kinesis_stream_name\",\n        title: \"Kinesis Stream Name\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Name of the Kinesis stream to write to\",\n        valueIsRequired: true\n    });\n\n/* now a menu, below\n    rose.param({\n        id: \"addin_ecda_kinesis_region\",\n        title: \"Kinesis Region\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Region ID of region.\",\n        valueIsRequired: true\n    });\n*/\n\n    rose.param({\n        id: \"addin_ecda_kinesis_region\",\n        title: \"Kinesis Region\",\n        type: \"choice\",\n        defval: 'us-west-1',\n        values: [\"us-west-1\", \"us-west-2\", \"us-east-1\", \"us-east-2\", \"ap-south-1\", \"ap-northeast-2\", \"ap-northeast-1\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"eu-north-1\", \"eu-west-3\", \"eu-west-2\", \"eu-west-1\", \"eu-central-1\", \"sa-east-1\"],\n        tooltip: \"Region ID of region.\"\n    });\n\n    rose.param({\n        id: \"addin_ecda_kinesis_partition_id\",\n        title: \"Partition ID\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Partition ID of the shard to write to. Can be overridden by a column named PARTITION_ID.\"\n    });\n\n    rose.param({\n        id: \"addin_ecda_kinesis_buffer_size\",\n        title: \"Buffer Size\",\n        type: \"integer\",\n        defval: 4194304,\n        tooltip: \"Maximumn number of bytes per update request\"\n    });\n\n    rose.param({\n        id: \"addin_ecda_kinesis_max_retries\",\n        title: \"Max Retries\",\n        type: \"integer\",\n        defval: 10,\n        tooltip: \"How many attempts to retry should be made when an insert fails due to throttling. The backoff is doubled each retry.\"\n    });\n\n    rose.param({\n        id: \"addin_ecda_kinesis_initial_backoff\",\n        title: \"Initial Backoff\",\n        type: \"integer\",\n        defval: 20,\n        tooltip: \"How many milliseconds to back off when an insert fails due to throttling\"\n    });\n\n    rose.param({\n        id: \"addin_ecda_kinesis_max_backoff\",\n        title: \"Max Backoff\",\n        type: \"integer\",\n        defval: 20480,\n        tooltip: \"Maximum milliseconds to back off when an insert fails due to throttling\"\n    });\n\n    rose.param({\n        id: \"addin_ecda_kinesis_max_records_per_request\",\n        title: \"Max Records per Request\",\n        type: \"integer\",\n        defval: 500,\n        tooltip: \"Maximum number of records per update request\"\n    });\n\n    rose.param({\n        id: \"addin_ecda_kinesis_profile_path\",\n        title: \"AWS Profile Path\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"AWS path to credentials file (blank defaults to ~sqlstream/.aws/credentials)\"\n    });\n\n    rose.param({\n        id: \"addin_ecda_kinesis_profile_name\",\n        title: \"AWS Profile Name\",\n        type: \"string\",\n        defval: 'default',\n        tooltip: \"AWS profile name to use within credentials file\"\n    });\n\n    rose.param({\n        id: \"addin_ecda_kinesis_report_frequency\",\n        title: \"Report Frequency\",\n        type: \"integer\",\n        defval: 0,\n        tooltip: \"How often (in milliseconds) to log statistics. A value of 0 means no statistics will be logged.\"\n    });\n\n%>\n\n<%  rose.defineECDAwriter('kinesis', { define: function(rose) { var __p = '';  %>\n\n<%      return __p; }, server: function(rose) { var __p = ''; %>\n\n    SERVER \"KINESIS_SERVER\"\n\n<%      return __p; }, options: function(rose) { var __p = ''; %>\n\n        \"KINESIS_STREAM_NAME\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_stream_name\")) %>,\n        \"AWS_REGION\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_region\")) %>,\n        \"KINESIS_DEFAULT_PARTITION_ID\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_partition_id\")) %>,\n        \"BUFFER_SIZE\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_buffer_size\")) %>,\n        \"MAX_RETRIES\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_max_retries\")) %>,\n        \"INITIAL_BACKOFF\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_initial_backoff\")) %>,\n        \"MAX_BACKOFF\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_max_backoff\")) %>,\n        \"MAX_RECORDS_PER_REQUEST\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_max_records_per_request\")) %>,\n        \"AWS_PROFILE_NAME\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_profile_name\")) %>,\n        \"AWS_PROFILE_PATH\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_profile_path\")) %>,\n        \"REPORT_FREQUENCY\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_kinesis_report_frequency\")) %>\n\n<%      return __p; }, props: function(rose) {\n\n            rose.ecdaProp('KINESIS_STREAM_NAME', rose.param(\"addin_ecda_kinesis_stream_name\"));\n            rose.ecdaProp('AWS_REGION', rose.param(\"addin_ecda_kinesis_region\"));\n            rose.ecdaProp('KINESIS_DEFAULT_PARTITION_ID', rose.param(\"addin_ecda_kinesis_partition_id\"));\n            rose.ecdaProp('BUFFER_SIZE', rose.param(\"addin_ecda_kinesis_buffer_size\"));\n            rose.ecdaProp('MAX_RETRIES', rose.param(\"addin_ecda_kinesis_max_retries\"));\n            rose.ecdaProp('INITIAL_BACKOFF', rose.param(\"addin_ecda_kinesis_initial_backoff\"));\n            rose.ecdaProp('MAX_BACKOFF', rose.param(\"addin_ecda_kinesis_max_backoff\"));\n            rose.ecdaProp('MAX_RECORDS_PER_REQUEST', rose.param(\"addin_ecda_kinesis_max_records_per_request\"));\n            rose.ecdaProp('AWS_PROFILE_NAME', rose.param(\"addin_ecda_kinesis_profile_name\"));\n            rose.ecdaProp('AWS_PROFILE_PATH', rose.param(\"addin_ecda_kinesis_profile_path\"));\n            rose.ecdaProp('REPORT_FREQUENCY', rose.param(\"addin_ecda_kinesis_report_frequency\"));\n\n            rose._ecdaDesc = 'Kinesis stream: ' + rose.param(\"addin_ecda_kinesis_stream_name\");\n\n            if(rose.param(\"addin_ecda_kinesis_region\"))\n                rose._ecdaDesc += ' region: ' + rose.param(\"addin_ecda_kinesis_region\");\n} }); %>\n","external":true,"binary":false,"title":"AWS Kinesis","public":true,"doc":"ECDA Kinesis prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"output-menu-kinesis","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_mqtt_writer.sql":{"value":"<%= rose.panel('params') %>\n\n<%\n    rose.localSet('docsDismissed', true)\n    rose.makeKnownAs('ecda_mqtt_writer')\n\n    //-- QOS values / descriptions - we rely on the first char being 0,1,2\n    var mqtt_qos_options = ['0 - at most once' , '1 - at least once', '2 - exactly once']\n\n    rose.param({\n        id: \"addin_ecda_mqtt_writer_url\",\n        title: \"MQTT URL\",\n        type: \"string\",\n        defval: 'tcp://localhost:1883',\n        tooltip: \"URL for the MQTT connection\",\n        valueIsRequired: true\n    })\n\n    rose.param({\n        id: \"addin_ecda_mqtt_writer_topic\",\n        title: \"Topic\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Topic name\",\n        valueIsRequired: true\n    })\n\n    rose.param({\n        id: \"addin_ecda_mqtt_writer_qos\",\n        title: \"QoS\",\n        type: \"choice\",\n        values: mqtt_qos_options, \n        defval: mqtt_qos_options[0],\n        tooltip: \"Quality of Service\",\n    })\n\n    rose.param({\n        id: \"addin_ecda_mqtt_writer_clientid\",\n        title: \"Client ID\",\n        type: \"string\",\n        tooltip: \"Identifies the client - should be different for each MQTT stream - defaults to a random value\",\n        defval: '',\n        valueIsRequired: false\n    })\n\n    rose.param({\n        id: \"addin_ecda_mqtt_writer_username\",\n        title: \"Username\",\n        type: \"string\",\n        tooltip: \"Username for MQTT connection\",\n        defval: '',\n        valueIsRequired: false\n    })\n\n    rose.param({\n        id: \"addin_ecda_mqtt_writer_password\",\n        title: \"Password\",\n        type: \"string\",\n        tooltip: \"Password for MQTT connection\",\n        defval: '',\n        valueIsRequired: false\n    })\n\n    rose.param({\n        id: \"addin_ecda_mqtt_writer_keepalive\",\n        title: \"Keep Alive Interval\",\n        type: \"integer\",\n        from: 0,\n        defval: 60,\n        tooltip: \"Time that broker and client persist without sending a message - default 60 secs\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_mqtt_writer_connectiontimeout\",\n        title: \"Connection Timeout\",\n        type: \"integer\",\n        from: 0,\n        defval: 30,\n        tooltip: \"Connection Timeout - default 30 secs\"\n    })\n\n    rose.param({\n        id: \"addin_ecda_mqtt_writer_max_in_flight\",\n        title: \"Max in flight\",\n        type: \"integer\",\n\tfrom: 1,\n        defval: 10,\n        tooltip: \"How many messages before commit? (default 10)\"\n  })\n\n    rose.param({\n        id: \"addin_ecda_mqtt_writer_retained\",\n        title: \"Retained\",\n        type: \"choice\",\n\tvalues: ['true','false'],\n        defval: 'false',\n\ttooltip: \"Retain message in broker?\"\n\t})\n\n%>\n\n<%  rose.defineECDAwriter('mqtt', { define: function(rose) { var __p = '';  %>\n\n<%      return __p; }, server: function(rose) { var __p = ''; %>\n\n    SERVER \"MQTT_SERVER\"\n\n<%      return __p; }, options: function(rose) { var __p = ''; %>\n\n<%=        rose.ecdaOpt('CONNECTION_URL', rose.param(\"addin_ecda_mqtt_writer_url\")) %>\n<%=        rose.ecdaOptMaybe('QOS', rose.param(\"addin_ecda_mqtt_writer_qos\").substr(0,1)) %>\n<%=         rose.ecdaOptMaybe(\"CLIENT_ID\",rose.param(\"addin_ecda_mqtt_writer_clientid\")) %>\n<%=         rose.ecdaOptMaybe(\"USERNAME\",rose.param(\"addin_ecda_mqtt_writer_username\")) %>\n<%=         rose.ecdaOptMaybe(\"PASSWORD\",rose.param(\"addin_ecda_mqtt_writer_password\")) %>\n<%=         rose.ecdaOptMaybe(\"KEEP_ALIVE_INTERVAL\",rose.param(\"addin_ecda_mqtt_writer_keepalive\")) %>\n<%=         rose.ecdaOptMaybe(\"CONNECTION_TIMEOUT\",rose.param(\"addin_ecda_mqtt_writer_connectiontimeout\")) %>\n<%=         rose.ecdaOptMaybe(\"MAX_IN_FLIGHT\",rose.param(\"addin_ecda_mqtt_writer_max_in_flight\")) %>\n<%=         rose.ecdaOptMaybe(\"RETAINED\",rose.param(\"addin_ecda_mqtt_writer_retained\")) %>\n<%=        rose.ecdaOpt('TOPIC', rose.param(\"addin_ecda_mqtt_writer_topic\"),true) %>\n\n<%      return __p; }, props: function(rose) {\n\n        rose.ecdaProp('CONNECTION_URL', rose.param(\"addin_ecda_mqtt_writer_url\")) \n        rose.ecdaPropMaybe('QOS', rose.param(\"addin_ecda_mqtt_writer_qos\").substr(0,1)) \n         rose.ecdaPropMaybe(\"CLIENT_ID\",rose.param(\"addin_ecda_mqtt_writer_clientid\")) \n         rose.ecdaPropMaybe(\"USERNAME\",rose.param(\"addin_ecda_mqtt_writer_username\")) \n         rose.ecdaPropMaybe(\"PASSWORD\",rose.param(\"addin_ecda_mqtt_writer_password\")) \n         rose.ecdaPropMaybe(\"KEEP_ALIVE_INTERVAL\",rose.param(\"addin_ecda_mqtt_writer_keepalive\")) \n         rose.ecdaPropMaybe(\"CONNECTION_TIMEOUT\",rose.param(\"addin_ecda_mqtt_writer_connectiontimeout\")) \n         rose.ecdaPropMaybe(\"MAX_IN_FLIGHT\",rose.param(\"addin_ecda_mqtt_writer_max_in_flight\")) \n         rose.ecdaPropMaybe(\"RETAINED\",rose.param(\"addin_ecda_mqtt_writer_retained\")) \n        rose.ecdaProp('TOPIC', rose.param(\"addin_ecda_mqtt_writer_topic\"),true) \n\n            rose._ecdaDesc = 'MQTT at ' + rose.param(\"addin_ecda_mqtt_writer_url\")\n\n} }) %>\n","external":true,"binary":false,"title":"MQTT","public":true,"doc":"ECDA MQTT prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"output-menu-mqtt","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/ecda/ecda_snowflake_writer.sql":{"value":"<%= rose.panel('params') %>\n\n<%\n    rose.localSet('docsDismissed', true);\n    rose.makeKnownAs('ecda_snowflake_writer');\n\n    rose.param({\n        id: \"addin_ecda_snowflake_username\",\n        title: \"Username\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"username\",\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: \"addin_ecda_snowflake_password\",\n        title: \"Password\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"password\",\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: \"addin_ecda_snowflake_account\",\n        title: \"Account\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"account\",\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: \"addin_ecda_snowflake_warehouse\",\n        title: \"Warehouse\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Warehouse\",\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: \"addin_ecda_snowflake_database\",\n        title: \"Database\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Database\",\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: \"addin_ecda_snowflake_schema\",\n        title: \"Schema\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Schema\",\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: \"addin_ecda_snowflake_dtable\",\n        title: \"Dtable\",\n        type: \"string\",\n        defval: '',\n        tooltip: \"Dtable\",\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: \"addin_ecda_snowflake_max_bytes\",\n        title: \"Maximum Bytes per File\",\n        type: \"integer\",\n        defval: 1024*1024*1024,\n        tooltip: \"Size limit in bytes for each output file\"\n    });\n\n    rose.param({\n        id: \"addin_ecda_snowflake_max_time\",\n        title: \"Maximum Time per File\",\n        type: \"timePeriod\",\n        defval: 0,\n        tooltip: \"Size limit in time for each output file\"\n    });\n\n%>\n\n<%  rose.defineECDAwriter('snowflake', { define: function(rose) { var __p = '';  %>\n\n<%      return __p; }, server: function(rose) { var __p = ''; %>\n\n    SERVER \"SNOWFLAKE_SERVER\" \n\n<%      return __p; }, options: function(rose) { var __p = ''; %>\n\n\n        \"USER\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_snowflake_username\")) %>,\n        \"PASSWORD\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_snowflake_password\")) %>,\n        \"ACCOUNT\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_snowflake_account\")) %>,\n        \"WAREHOUSE\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_snowflake_warehouse\")) %>,\n        \"DB\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_snowflake_database\")) %>,\n        \"SCHEMA\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_snowflake_schema\")) %>,\n        \"DTABLE\" <%= rose.sqlLiteral(rose.param(\"addin_ecda_snowflake_dtable\")) %>,\n        \"DIRECTORY\" '/tmp',\n        \"FILENAME_PREFIX\" 'output-',\n        \"FILENAME_SUFFIX\" '.log',\n        \"FILENAME_DATE_FORMAT\" 'yyyy-MM-dd-HH:mm:ss',\n        <%\n            var result;\n            var max = rose.param(\"addin_ecda_snowflake_max_time\");\n\n            if(max) {\n                max = max ? parseInt(max.split(':')[0]) * 1000 : 0;\n                result = '\"MAX_TIME_DELTA_PER_FILE\" ' + rose.sqlLiteral(max);\n            } else {\n                max = rose.param(\"addin_ecda_snowflake_max_bytes\");\n                if(!max) max = 0;\n                result = '\"MAX_BYTES_PER_FILE\" ' + rose.sqlLiteral(max);\n            }\n        %>\n        <%= result %>,\n        \"FORMATTER_INCLUDE_ROWTIME\" 'false'\n\n<%      return __p; }, props: function(rose) {\n\n            rose.ecdaProp('USER', rose.param(\"addin_ecda_snowflake_username\"));\n            rose.ecdaProp('PASSWORD', rose.param(\"addin_ecda_snowflake_password\"));\n            rose.ecdaProp('ACCOUNT', rose.param(\"addin_ecda_snowflake_account\"));\n            rose.ecdaProp('WAREHOUSE', rose.param(\"addin_ecda_snowflake_warehouse\"));\n            rose.ecdaProp('DB', rose.param(\"addin_ecda_snowflake_database\"));\n            rose.ecdaProp('SCHEMA', rose.param(\"addin_ecda_snowflake_schema\"));\n            rose.ecdaProp('DTABLE', rose.param(\"addin_ecda_snowflake_dtable\"));\n            rose.ecdaProp('DIRECTORY', '/tmp');\n            rose.ecdaProp('FILENAME_PREFIX', 'output-');\n            rose.ecdaProp('FILENAME_SUFFIX', '.log');\n            rose.ecdaProp('FILENAME_DATE_FORMAT', 'yyyy-MM-dd-HH:mm:ss');\n            var max = rose.param(\"addin_ecda_snowflake_max_time\");\n            max = max ? parseInt(max.split(':')[0]) * 1000 : 0;\n            rose.ecdaProp('MAX_BYTES_PER_FILE', rose.param(\"addin_ecda_snowflake_max_bytes\"));\n\n\n            rose._ecdaDesc = 'Snowflake table: ' + rose.param(\"addin_ecda_snowflake_dtable\");\n\n} }); %>\n","external":true,"binary":false,"title":"Snowflake","public":true,"doc":"ECDA Snowflake prototype","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"output-menu-snowflake","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/servers.sql":{"value":"<%= rose.panel('include_multiple') %>\n<%\n    rose.localSet('docsDismissed', true);\n    rose.localSet('subview', 'names');\n    rose.global('servers', 'chosen');\n\n    rose.include('servers/mysql.sql');\n    rose.include('servers/oracle.sql');\n    //--rose.include('servers/paraccel.sql');\n    rose.include('servers/postgres.sql');\n    rose.include('servers/sqlserver.sql');\n    rose.include('servers/teradata.sql');\n    //--rose.include('servers/vectorwise.sql');\n    rose.include('servers/generic.sql');\n%>\n","external":true,"binary":false,"title":"External Connections","public":true,"doc":"##External Connections\n\nThis page is where you configure connections to external databases used\nwhen creating external table sources or sinks. If you're working only with\ndata in s-Server, you won't have to configure anything here.\n\nTo add a connection, drag it from the left-hand column onto the page. Then click on the new connection to go to that page and fill it in.\n\nYou can use a single connection definition for multiple sources and sinks in the same database server. \n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"paraccel","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/servers/mysql.sql":{"value":"-- MySQL server\n<%= rose.panel('params') %>\n\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    rose.localSet('docsDismissed', true);\n    rose.localSet('showRunBtn', true);\n    rose.localSet('runBtnState', 'untried');\n\n\n    rose.param({id: \"name\", title: \"Name\", type: \"string\", defval: 'MySQL_DB_1',\n        tooltip: 'Enter a unique name for this server connection. The name of the project will be added to the end.'});\n\n    rose.param({id: \"urlSource\", title: \"Edit the connection\", type: \"choice\",\n        values: [\"as separate components\", \"as a URL\"],\n        defval: \"as separate components\"\n    });\n    rose.param({id: \"host\", title: \"Hostname\", type: \"string\", defval: 'localhost',\n        visibleWhen: function() { return !/URL/.test(rose.param('urlSource')) }\n    });\n    rose.param({id: \"path\", title: \"Database\", type: \"string\", defval: 'mysql',\n        visibleWhen: function() { return !/URL/.test(rose.param('urlSource')) }\n    });\n    rose.param({id: \"url\", title: \"URL\", type: \"string\", defval: 'jdbc:mysql://host/path?useCursorFetch=true',\n        visibleWhen: function() { return /URL/.test(rose.param('urlSource')) }\n    });\n\n    rose.param({id: \"user\", title: \"Username\", type: \"string\", defval: 'mysql'});\n    rose.param({id: \"password\", title: \"Password\", type: \"password\", defval: ''});\n    rose.param({id: \"pollingInterval\", title: \"Polling Interval\", type: \"integer\", defval: 1000});\n    rose.param({id: \"txInterval\", title: \"Transmission Interval\", type: \"integer\", defval: 1000});\n        /*\n     * Adds a table field of add-on options and defines xtras\n     */\n    rose.param({\n        id: 'xtras',\n        title: 'Additional Options',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"Insert additional options not yet supported by StreamLab\",\n        columns: ['option', 'value'],\n        columnTypes: [null, null],\n        columnDefs: ['', ''],\n    });\n\n    var xtras = rose.tableParam('xtras', function(t) {\n        return '        ' + rose.sqlInColumn(t[0]) + ' ' + rose.sqlLiteral(t[1]) +',' }).join('\\n');\n\n\n    if(/URL/.test(rose.param('urlSource'))) {\n        rose.url = rose.param('url');\n        var x = /^jdbc:mysql:\\/\\/(.*)\\/(.*)\\?useCursorFetch=true$/.exec(rose.url);\n        if(x) {\n            rose.paramSet('host', x[1]);\n            rose.paramSet('path', x[2]);\n        }\n    } else {    //-- using components\n        rose.url = 'jdbc:mysql://' + rose.param('host') + '/' + rose.param('path') + '?useCursorFetch=true';\n        rose.paramSet('url', rose.url);\n    }\n\n    rose.goal(function(e) {\n        var rbs = rose.local('runBtnState');\n        return rbs === 'success';\n    }, \"Execute this page and get a successful result\");\n\n    rose.whenCloned(function(e) { rose.makeNameUniqueWithin(e, 'servers', 'MySQL_DB') });\n%>\n\n<%= rose.createSqlObj('SERVER', rose.sqlIdentifier(rose.plusProjectName(rose.param('name'))), {wasCoR: true}) %>\n    FOREIGN DATA WRAPPER \"SYS_JDBC\"\n    OPTIONS (\n        \"URL\" <%= rose.literal(rose.url) %>,\n        \"USER_NAME\" <%= rose.literal(rose.param('user')) %>,\n        \"PASSWORD\" <%= rose.literal(rose.param('password')) %>,\n        \"DIALECT\" 'MySQL',\n        \"JNDI_WRITEBACK\" 'true',\n        \"pollingInterval\" <%= rose.sqlLiteral(rose.param('pollingInterval')) %>,\n        \"txInterval\" <%= rose.sqlLiteral(rose.param('txInterval')) %>,\n<%= xtras %>\n        \"DRIVER_CLASS\" 'com.mysql.jdbc.Driver'\n    );\n","external":true,"binary":false,"title":"MySQL","public":true,"doc":"# MySQL \n\nEnter the parameters needed to connect to your MySQL server, then test out the connection using the *Execute* button.\nDon't leave this page until you've successfully connected to your server.\n\nYou can use one external connection specification to access multiple tables as sources and/or sinks. If you\nconfigure multiple MySQL connections, make sure to give each one a unique name.\n\nFor more information on configuring external connections, see <a href=\"https://docs.sqlstream.com/integrating-sqlstream/rdbms/\" target=\"_blank\">our docs</a>.","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"mysql","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/servers/oracle.sql":{"value":"-- Oracle server\n<%= rose.panel('params') %>\n\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    rose.localSet('docsDismissed', true);\n    rose.localSet('showRunBtn', true);\n    rose.localSet('runBtnState', 'untried');\n\n\n    rose.param({id: \"name\", title: \"Name\", type: \"string\", defval: 'Oracle_DB_1',\n        tooltip: 'Enter a unique name for this server connection. The name of the project will be added to the end.'});\n\n    rose.param({id: \"urlSource\", title: \"Edit the connection\", type: \"choice\",\n        values: [\"as separate components\", \"as a URL\"],\n        defval: \"as separate components\"\n    });\n    rose.param({id: \"host\", title: \"Hostname\", type: \"string\", defval: 'localhost',\n        visibleWhen: function() { return !/URL/.test(rose.param('urlSource')) }\n    });\n    rose.param({id: \"port\", title: \"Port\", type: \"string\", defval: '1521',\n        visibleWhen: function() { return !/URL/.test(rose.param('urlSource')) }\n    });\n    rose.param({id: \"conparams\", title: \"Conenction Parameters\", type: \"string\", defval: 'XE',\n        visibleWhen: function() { return !/URL/.test(rose.param('urlSource')) }\n    });\n    rose.param({id: \"url\", title: \"URL\", type: \"string\", defval: 'jdbc:oracle:thin:@host:params',\n        visibleWhen: function() { return /URL/.test(rose.param('urlSource')) }\n    });\n\n    rose.param({id: \"user\", title: \"Username\", type: \"string\", defval: 'sqlserver'});\n    rose.param({id: \"password\", title: \"Password\", type: \"password\", defval: ''});\n    rose.param({id: \"pollingInterval\", title: \"Polling Interval\", type: \"integer\", defval: 1000});\n    rose.param({id: \"txInterval\", title: \"Transmission Interval\", type: \"integer\", defval: 1000});\n        /*\n     * Adds a table field of add-on options and defines xtras\n     */\n    rose.param({\n        id: 'xtras',\n        title: 'Additional Options',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"Insert additional options not yet supported by StreamLab\",\n        columns: ['option', 'value'],\n        columnTypes: [null, null],\n        columnDefs: ['', ''],\n    });\n\n    var xtras = rose.tableParam('xtras', function(t) {\n        return '        ' + rose.sqlInColumn(t[0]) + ' ' + rose.sqlLiteral(t[1]) +',' }).join('\\n');\n\n\n    if(/URL/.test(rose.param('urlSource'))) {\n        rose.url = rose.param('url');\n        var x = /^jdbc:oracle:thin:@(.*):(.*):(.*)$/.exec(rose.url);\n        if(x) {\n            rose.paramSet('host', x[1]);\n            rose.paramSet('port', x[2]);\n            rose.paramSet('conparams', x[3]);\n        }\n    } else {    //-- using components\n        rose.url = 'jdbc:oracle:thin:@' + rose.param('host') + ':' + rose.param('port') + ':' + rose.param('conparams');\n        rose.paramSet('url', rose.url);\n    }\n\n    rose.goal(function(e) {\n        var rbs = rose.local('runBtnState');\n        return rbs === 'success';\n    }, \"Execute this page and get a successful result\");\n\n    rose.whenCloned(function(e) { rose.makeNameUniqueWithin(e, 'servers', 'Oracle_DB') });\n%>\n\n<%= rose.createSqlObj('SERVER', rose.sqlIdentifier(rose.plusProjectName(rose.param('name'))), {wasCoR: true}) %>\n    FOREIGN DATA WRAPPER \"SYS_JDBC\"\n    OPTIONS (\n        \"URL\" <%= rose.literal(rose.url) %>,\n        \"USER_NAME\" <%= rose.literal(rose.param('user')) %>,\n        \"PASSWORD\" <%= rose.literal(rose.param('password')) %>,\n        \"DIALECT\" 'Oracle',\n        \"JNDI_WRITEBACK\" 'true',\n        \"pollingInterval\" <%= rose.sqlLiteral(rose.param('pollingInterval')) %>,\n        \"txInterval\" <%= rose.sqlLiteral(rose.param('txInterval')) %>,\n<%= xtras %>\n        \"DRIVER_CLASS\" 'oracle.jdbc.OracleDriver'\n    );\n","external":true,"binary":false,"title":"Oracle","public":true,"doc":"# Oracle\n\nEnter the parameters needed to connect to your Oracle server, then test out the connection using the *Execute* button.\nDon't leave this page until you've successfully connected to your server.\n\nYou can use one external connection specification to access multiple tables as sources and/or sinks. If you\nconfigure multiple Oracle connections, make sure to give each one a unique name.\n\nFor more information on configuring external connections, see <a href=\"https://docs.sqlstream.com/integrating-sqlstream/rdbms/\" target=\"_blank\">our docs</a>.","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"oracle","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/servers/postgres.sql":{"value":"-- PostgreSQL server\n<%= rose.panel('params') %>\n\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    rose.localSet('docsDismissed', true)\n    rose.localSet('showRunBtn', true)\n    rose.localSet('runBtnState', 'untried')\n\n\n    rose.param({id: \"name\", title: \"Name\", type: \"string\", defval: 'PostgreSQL_DB_1',\n        tooltip: 'Enter a unique name for this server connection. The name of the project will be added to the end.'\n    })\n\n    rose.param({id: \"urlSource\", title: \"Edit the connection\", type: \"choice\",\n        values: [\"as separate components\", \"as a URL\"],\n        defval: \"as separate components\"\n    })\n    rose.param({id: \"host\", title: \"Hostname\", type: \"string\", defval: 'localhost',\n        tooltip: 'Enter the name of the host were PostgreSQL is running, as seen from the SQLstream server host',\n        visibleWhen: () => !/URL/.test(rose.param('urlSource'))\n    })\n    rose.param({id: \"path\", title: \"Database\", type: \"string\", defval: 'postgres',\n        tooltip: 'Enter the name of the PostgreSQL database',\n        visibleWhen: () => !/URL/.test(rose.param('urlSource'))\n    })\n    rose.param({id: \"url\", title: \"URL\", type: \"string\", defval: 'jdbc:postgresql://host/database',\n        tooltip: 'Enter the URL to access the PostgreSQL server, it will probably look like \"jdbc:postgresql://<host>/<database>\"',\n        visibleWhen: () => /URL/.test(rose.param('urlSource'))\n    })\n\n\n    rose.param({id: \"schema\", title: \"Schema\", type: \"string\", defval: 'public'})\n    rose.param({id: \"user\", title: \"Username\", type: \"string\", defval: '', valueIsRequired: true})\n    rose.param({id: \"password\", title: \"Password\", type: \"password\", defval: '', valueIsRequired: true})\n    rose.param({id: \"pollingInterval\", title: \"Polling Interval\", type: \"integer\", defval: 1000})\n    rose.param({id: \"txInterval\", title: \"Transmission Interval\", type: \"integer\", defval: 1000})\n        /*\n     * Adds a table field of add-on options and defines xtras\n     */\n    rose.param({\n        id: 'xtras',\n        title: 'Additional Options',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"Insert additional options not yet supported by StreamLab\",\n        columns: ['option', 'value'],\n        columnTypes: [null, null],\n        columnDefs: ['', ''],\n    });\n\n    var xtras = rose.tableParam('xtras', function(t) {\n        return '        ' + rose.sqlInColumn(t[0]) + ' ' + rose.sqlLiteral(t[1]) +',' }).join('\\n');\n\n\n    if(/URL/.test(rose.param('urlSource'))) {\n        rose.url = rose.param('url')\n        /* This is causing an exception deep in Ember\n        var x = /^jdbc:postgresql:\\/\\/(.*)\\/(.*)$/.exec(rose.url)\n        if(x) {\n            rose.paramSet('host', x[1])\n            rose.paramSet('path', x[2])\n        }\n        */\n    } else {    //-- using components\n        rose.url = 'jdbc:postgresql://' + rose.param('host') + '/' + rose.param('path')\n        /*\n        rose.paramSet('url', rose.url)\n        */\n    }\n\n    rose.goal(function(e) {\n        var rbs = rose.local('runBtnState')\n        return rbs === 'success'\n    }, \"Execute this page and get a successful result\")\n\n    rose.whenCloned(function(e) { rose.makeNameUniqueWithin(e, 'servers', 'PostgreSQL_DB') })\n%>\n\n<%= rose.createSqlObj('SERVER', rose.sqlIdentifier(rose.plusProjectName(rose.param('name'))), {wasCoR: true}) %>\n    FOREIGN DATA WRAPPER \"SYS_JDBC\"\n    OPTIONS (\n        \"URL\" <%= rose.literal(rose.url) %>,\n        \"USER_NAME\" <%= rose.literal(rose.param('user')) %>,\n        \"PASSWORD\" <%= rose.literal(rose.param('password')) %>,\n        \"SCHEMA_NAME\" <%= rose.literal(rose.param('schema')) %>,\n        \"DIALECT\" 'PostgreSQL',\n        \"JNDI_WRITEBACK\" 'true',\n        \"pollingInterval\" <%= rose.sqlLiteral(rose.param('pollingInterval')) %>,\n        \"txInterval\" <%= rose.sqlLiteral(rose.param('txInterval')) %>,\n<%= xtras %>\n        \"DRIVER_CLASS\" 'org.postgresql.Driver'\n    );","external":true,"binary":false,"title":"PostgreSQL","public":true,"doc":"# PostgreSQL\n\nEnter the parameters needed to connect to your PostgreSQL server, then test out the connection using the *Execute* button.\nDon't leave this page until you've successfully connected to your server.\n\nYou can use one external connection specification to access multiple tables as sources and/or sinks. If you\nconfigure multiple PostgreSQL connections, make sure to give each one a unique name.\n\nFor more information on configuring external connections, see <a href=\"https://docs.sqlstream.com/integrating-sqlstream/rdbms/\" target=\"_blank\">our docs</a>.","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"postgres","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/servers/sqlserver.sql":{"value":"-- SQLserver server\n<%= rose.panel('params') %>\n\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    rose.localSet('docsDismissed', true);\n    rose.localSet('showRunBtn', true);\n    rose.localSet('runBtnState', 'untried');\n\n\n    rose.param({id: \"name\", title: \"Name\", type: \"string\", defval: 'SQLserver_DB_1',\n        tooltip: 'Enter a unique name for this server connection. The name of the project will be added to the end.'});\n\n    rose.param({id: \"urlSource\", title: \"Edit the connection\", type: \"choice\",\n        values: [\"as separate components\", \"as a URL\"],\n        defval: \"as separate components\"\n    });\n    rose.param({id: \"host\", title: \"Hostname\", type: \"string\", defval: 'localhost',\n        visibleWhen: function() { return !/URL/.test(rose.param('urlSource')) }\n    });\n    rose.param({id: \"database\", title: \"Database\", type: \"string\", defval: 'test',\n        visibleWhen: function() { return !/URL/.test(rose.param('urlSource')) }\n    });\n    rose.param({id: \"conparams\", title: \"Connection Parameters\", type: \"string\", defval: '',\n        visibleWhen: function() { return !/URL/.test(rose.param('urlSource')) }\n    });\n    rose.param({id: \"url\", title: \"URL\", type: \"string\", defval: 'jdbc:postgresql://host/path',\n        visibleWhen: function() { return /URL/.test(rose.param('urlSource')) }\n    });\n\n    rose.param({id: \"user\", title: \"Username\", type: \"string\", defval: 'sqlserver'});\n    rose.param({id: \"password\", title: \"Password\", type: \"password\", defval: ''});\n    rose.param({id: \"pollingInterval\", title: \"Polling Interval\", type: \"integer\", defval: 1000});\n    rose.param({id: \"txInterval\", title: \"Transmission Interval\", type: \"integer\", defval: 1000});\n        /*\n     * Adds a table field of add-on options and defines xtras\n     */\n    rose.param({\n        id: 'xtras',\n        title: 'Additional Options',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"Insert additional options not yet supported by StreamLab\",\n        columns: ['option', 'value'],\n        columnTypes: [null, null],\n        columnDefs: ['', ''],\n    });\n\n    var xtras = rose.tableParam('xtras', function(t) {\n        return '        ' + rose.sqlInColumn(t[0]) + ' ' + rose.sqlLiteral(t[1]) +',' }).join('\\n');\n\n\n    if(/URL/.test(rose.param('urlSource'))) {\n        rose.url = rose.param('url');\n        var x = /^jdbc:sqlserver:\\/\\/(.*);databaseName=(.*);(.*)$/.exec(rose.url);\n        if(x) {\n            rose.paramSet('host', x[1]);\n            rose.paramSet('database', x[2]);\n            rose.paramSet('conparams', x[3]);\n        }\n    } else {    //-- using components\n        rose.url = 'jdbc:sqlserver://' + rose.param('host') + ';databaseName=' + rose.param('database') + ';' + rose.param('conparams');\n        rose.paramSet('url', rose.url);\n    }\n\n    rose.goal(function(e) {\n        var rbs = rose.local('runBtnState');\n        return rbs === 'success';\n    }, \"Execute this page and get a successful result\");\n\n    rose.whenCloned(function(e) { rose.makeNameUniqueWithin(e, 'servers', 'SQLserver_DB') });\n%>\n\n<%= rose.createSqlObj('SERVER', rose.sqlIdentifier(rose.plusProjectName(rose.param('name'))), {wasCoR: true}) %>\n    FOREIGN DATA WRAPPER \"SYS_JDBC\"\n    OPTIONS (\n        \"URL\" <%= rose.literal(rose.url) %>,\n        \"USER_NAME\" <%= rose.literal(rose.param('user')) %>,\n        \"PASSWORD\" <%= rose.literal(rose.param('password')) %>,\n        \"DIALECT\" 'Microsoft SQL Server',\n        \"JNDI_WRITEBACK\" 'true',\n        \"pollingInterval\" <%= rose.sqlLiteral(rose.param('pollingInterval')) %>,\n        \"txInterval\" <%= rose.sqlLiteral(rose.param('txInterval')) %>,\n<%= xtras %>\n        \"DRIVER_CLASS\" 'com.microsoft.sqlserver.jdbc.SQLServerDriver'\n    );\n","external":true,"binary":false,"title":"SQL Server","public":true,"doc":"# Microsoft SQL Server\n\nEnter the parameters needed to connect to your SQL Server server, then test out the connection using the *Execute* button.\nDon't leave this page until you've successfully connected to your server.\n\nYou can use one external connection specification to access multiple tables as sources and/or sinks. If you\nconfigure multiple SQL Server connections, make sure to give each one a unique name.\n\nFor more information on configuring external connections, see <a href=\"https://docs.sqlstream.com/integrating-sqlstream/rdbms/\" target=\"_blank\">our docs</a>.","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"sqlserver","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/servers/teradata.sql":{"value":"-- Teradata server\n<%= rose.panel('params') %>\n\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    rose.localSet('docsDismissed', true);\n    rose.localSet('showRunBtn', true);\n    rose.localSet('runBtnState', 'untried');\n\n    rose.param({id: \"name\", title: \"Name\", type: \"string\", defval: 'Teradata_DB_1',\n        tooltip: 'Enter a unique name for this server connection. The name of the project will be added to the end.'});\n\n    rose.param({id: \"urlSource\", title: \"Edit the connection\", type: \"choice\",\n        values: [\"as separate components\", \"as a URL\"],\n        defval: \"as separate components\"\n    });\n    rose.param({id: \"host\", title: \"Hostname\", type: \"string\", defval: 'localhost',\n        visibleWhen: function() { return !/URL/.test(rose.param('urlSource')) }\n    });\n    rose.param({id: \"conparams\", title: \"Connection Parameters\", type: \"string\", defval: '',\n        visibleWhen: function() { return !/URL/.test(rose.param('urlSource')) }\n    });\n    rose.param({id: \"url\", title: \"URL\", type: \"string\", defval: 'jdbc:teradata://host/params',\n        visibleWhen: function() { return /URL/.test(rose.param('urlSource')) }\n    });\n    rose.param({id: \"user\", title: \"Username\", type: \"string\", defval: 'sqlstream'});\n    rose.param({id: \"password\", title: \"Password\", type: \"password\", defval: ''});\n    rose.param({id: \"pollingInterval\", title: \"Polling Interval\", type: \"integer\", defval: 1000});\n    rose.param({id: \"txInterval\", title: \"Transmission Interval\", type: \"integer\", defval: 1000});\n\n    rose.param({\n        id: 'qbands',\n        title: 'Query Bands',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"List of query bands to associate with this connection\",\n        columns: ['name', 'value'],\n        columnTypes: [null, null],\n        columnDefs: ['', ''],\n    });\n\n        /*\n     * Adds a table field of add-on options and defines xtras\n     */\n    rose.param({\n        id: 'xtras',\n        title: 'Additional Options',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"Insert additional options not yet supported by StreamLab\",\n        columns: ['option', 'value'],\n        columnTypes: [null, null],\n        columnDefs: ['', ''],\n    });\n\n    var xtras = rose.tableParam('xtras', function(t) {\n        return '        ' + rose.sqlInColumn(t[0]) + ' ' + rose.sqlLiteral(t[1]) +',' }).join('\\n');\n\n\n    if(/URL/.test(rose.param('urlSource'))) {\n        rose.url = rose.param('url');\n        var x = /^jdbc:teradata:\\/\\/(.*)\\/(.*)$/.exec(rose.url);\n        if(x) {\n            rose.paramSet('host', x[1]);\n            rose.paramSet('conparams', x[2]);\n        }\n    } else {    //-- using components\n        rose.url = 'jdbc:teradata://' + rose.param('host') + '/' + rose.param('conparams');\n        rose.paramSet('url', rose.url);\n    }\n\n\n    var qb = rose.tableParam('qbands', function(t) { return t[0] + '=' + t[1] +';' }).join('');\n\n    rose.goal(function(e) {\n        var rbs = rose.local('runBtnState');\n        return rbs === 'success';\n    }, \"Execute this page and get a successful result\");\n\n    rose.whenCloned(function(e) { rose.makeNameUniqueWithin(e, 'servers', 'Teradata_DB') });\n%>\n\n<%= rose.createSqlObj('SERVER', rose.sqlIdentifier(rose.plusProjectName(rose.param('name'))), {wasCoR: true}) %>\n    FOREIGN DATA WRAPPER \"SYS_JDBC\"\n    OPTIONS (\n        \"URL\" <%= rose.literal(rose.url) %>,\n        \"USER_NAME\" <%= rose.literal(rose.param('user')) %>,\n        \"PASSWORD\" <%= rose.literal(rose.param('password')) %>,\n        \"DIALECT\" 'Teradata',\n        \"JNDI_WRITEBACK\" 'true',\n        \"pollingInterval\" <%= rose.sqlLiteral(rose.param('pollingInterval')) %>,\n        \"txInterval\" <%= rose.sqlLiteral(rose.param('txInterval')) %>,\n        \"TERADATA_QUERY_BAND\" <%= rose.literal(qb) %>,\n<%= xtras %>\n        \"DRIVER_CLASS\" 'com.teradata.jdbc.TeraDriver'\n    );\n","external":true,"binary":false,"title":"Teradata","public":true,"doc":"# Teradata\n\nEnter the parameters needed to connect to your Teradata server, then test out the connection using the *Execute* button.\nDon't leave this page until you've successfully connected to your server.\n\nYou can use one external connection specification to access multiple tables as sources and/or sinks. If you\nconfigure multiple Teradata connections, make sure to give each one a unique name.\n\nFor more information on configuring external connections, see <a href=\"https://docs.sqlstream.com/integrating-sqlstream/rdbms/\" target=\"_blank\">our docs</a>.","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"teradata","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/servers/generic.sql":{"value":"-- Generic server\n<%= rose.panel('params') %>\n\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    rose.localSet('docsDismissed', true);\n    rose.localSet('showRunBtn', true);\n    rose.localSet('runBtnState', 'untried');\n\n    rose.param({id: \"name\", title: \"Name\", type: \"string\", defval: 'Generic_DB_1',\n        tooltip: 'Enter a unique name for this server connection. The name of the project will be added to the end.'});\n    rose.param({id: \"driver\", title: \"Driver Class\", type: \"string\", defval: 'com.generic.jdbc.Driver'});\n    rose.param({id: \"dialect\", title: \"SQL Dialect\", type: \"string\", defval: 'PostgreSQL'});\n\n    rose.param({id: \"urlSource\", title: \"Edit the connection\", type: \"choice\",\n        values: [\"as separate components\", \"as a URL\"],\n        defval: \"as separate components\"\n    });\n    rose.param({id: \"prefix\", title: \"URL Prefix\", type: \"string\", defval: 'jdbc:generic:',\n        visibleWhen: function() { return !/URL/.test(rose.param('urlSource')) }\n    });\n    rose.param({id: \"host\", title: \"Hostname\", type: \"string\", defval: 'localhost',\n        visibleWhen: function() { return !/URL/.test(rose.param('urlSource')) }\n    });\n    rose.param({id: \"path\", title: \"Path\", type: \"string\", defval: '',\n        visibleWhen: function() { return !/URL/.test(rose.param('urlSource')) }\n    });\n    rose.param({id: \"url\", title: \"URL\", type: \"string\", defval: 'jdbc:generic://host/path',\n        visibleWhen: function() { return /URL/.test(rose.param('urlSource')) }\n    });\n\n    rose.param({id: \"user\", title: \"Username\", type: \"string\", defval: 'sqlstream'});\n    rose.param({id: \"password\", title: \"Password\", type: \"password\", defval: ''});\n        /*\n     * Adds a table field of add-on options and defines xtras\n     */\n    rose.param({\n        id: 'xtras',\n        title: 'Additional Options',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"Insert additional options not yet supported by StreamLab\",\n        columns: ['option', 'value'],\n        columnTypes: [null, null],\n        columnDefs: ['', ''],\n    });\n\n    var xtras = rose.tableParam('xtras', function(t) {\n        return '        ' + rose.sqlInColumn(t[0]) + ' ' + rose.sqlLiteral(t[1]) +',' }).join('\\n');\n\n\n    var url = rose.param('prefix') + rose.param('host') + rose.param('path');\n\n    if(/URL/.test(rose.param('urlSource'))) {\n        rose.url = rose.param('url');\n        var x = /^(.*)\\/\\/(.*)\\/(.*)$/.exec(rose.url);\n        if(x) {\n            rose.paramSet('prefix', x[1]);\n            rose.paramSet('host', x[2]);\n            rose.paramSet('path', x[3]);\n        }\n    } else {    //-- using components\n        rose.url = rose.param('prefix') + '//' + rose.param('host') + '/' + rose.param('path');\n        rose.paramSet('url', rose.url);\n    }\n\n    rose.goal(function(e) {\n        var rbs = rose.local('runBtnState');\n        return rbs === 'success';\n    }, \"Execute this page and get a successful result\");\n\n    rose.whenCloned(function(e) { rose.makeNameUniqueWithin(e, 'servers', 'Generic_DB') });\n%>\n\n<%= rose.createSqlObj('SERVER', rose.sqlIdentifier(rose.plusProjectName(rose.param('name'))), {wasCoR: true}) %>\n    FOREIGN DATA WRAPPER \"SYS_JDBC\"\n    OPTIONS (\n        \"DRIVER_CLASS\" <%= rose.sqlLiteral(rose.param('driver')) %>,\n        \"URL\" <%= rose.literal(rose.url) %>,\n        \"USER_NAME\" <%= rose.literal(rose.param('user')) %>,\n        \"PASSWORD\" <%= rose.literal(rose.param('password')) %>,\n        \"DIALECT\" <%= rose.literal(rose.param('dialect')) %>,\n<%= xtras %>\n        \"JNDI_WRITEBACK\" 'true'\n    );\n","external":true,"binary":false,"title":"Generic","public":true,"doc":"# Generic\n\nThis server lets you connect to any JDBC database by specifying all the parameters, including the Java class for the \ndriver. Use one of the specific external connections instead, if that fits your needs.\n\nEnter the parameters needed to connect to the database server, then test out the connection using the *Execute* button.\nDon't leave this page until you've successfully connected to your server.\n\nYou can use one external connection specification to access multiple tables as sources and/or sinks. If you\nconfigure multiple generic connections, make sure to give each one a unique name.\n\nFor more information on configuring external connections, see <a href=\"https://docs.sqlstream.com/integrating-sqlstream/rdbms/\" target=\"_blank\">our docs</a>.","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/sources.sql":{"value":"<%= rose.panel('include_multiple') %>\n<%\n    rose.localSet('docsDismissed', true);\n    rose.localSet('showThrottles', true);\n    rose.localSet('showTelemetry', true);\n    rose.localSet('deferRender', 'looseEndsMode');\n\n    rose.local('subview', 'endpoints');\n    rose.local('localMenu', ['sources-import-schema', 'sources-throttle-on', 'sources-throttle-off']);\n\n    rose.global('sources', 'chosen');\n\n    rose.goal(function(e) {\n        var c = e.getPath('chosen');\n        return c && c.length > 0;\n    }, \"Select one or more sources for log data\");\n\n    rose.include('sources/ecda.sql');\n    rose.include('sources/foreignTable.sql');\n    rose.include('sources/stream.sql');\n    rose.include('sources/new_stream.sql');\n//--    rose.include('sources/table.sql');\n    rose.include('sources/publicData.sql');\n//--    rose.include('sources/webfeedadapter.sql');\n//--    rose.include('sources/view.sql');\n%>\n","external":true,"binary":false,"title":"Sources","public":true,"doc":"##StreamLab Sources\nStreamLab supports streaming and table sources. Use this page to add sources to your project, then go up to the top\nand down to Guides to create a guide using these sources.\n\nTo add a source, drag it from the left-hand column onto the page. Then click on the new source to go to that page and fill it in.\n\n* **External Stream** reads data from a number of media (files, sockets, Kafka, etc.) in many formats. This is most likely where you\nwant to start to get data into StreamLab.\n* **External Table** accesses a non-streaming table from an external database server. To enter the credentials to access an external\nserver, go up to *External Connections* and define a new server connection. Then come back here to configure each of the tables\nyou want to access on that server.\n* **SQLstream Stream** reads from a stream that has already been created in SQLstream s-Server, perhaps in s-Studio or another StreamLab project\n* **SQLstream Table** reads from a table that has already been created in SQLstream s-Server\n* **Public Data** allows you to select from a menu of pre-configured public data sources\n* **RSS/Atom** streams in data from an RSS or Atom feed\n\nYou can also import all of the streams, tables, and views in a schema using the *Import SQLstream schema* button in the lower left.\nFor more information on configuring these sources in SQLstream s-Server, please see the s-Server Enterprise Integration Guide.\n\nSome of the sources can be throttled to a fixed number of rows per second (see the individual sources). The *Throttle all* and *Unthrottle all* \nbuttons can be used to change the throttling on all of the sources at once.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/sources/ecda.sql":{"value":"-- ECDA reading adapter/agent with Discovery support\n<%= rose.panel('params_ecda_source') %>\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    rose.localSet('docsDismissed', true)\n    rose.localSet('runBtnState', 'untried')\n    rose.localSet('showDiscoveryBtn', true)\n    rose.localSet('trackExecution', true)\n    rose.transientSet('trackExecutionStatus', 'none')\n\n    var df =  \"'Discover format'\"\n    var dattempt =  df + \" will attempt to fill this in\"\n    var dmanual = dattempt + \", or you can select it manually.\"\n    var dfail =  dattempt + \", if it fails try increasing the Sample Bytes or Timeout.\"\n\n    rose.param({\n        id: \"ecda_reader_server\",\n        title: \"Server Name\",\n        type: \"string\",\n        defval: rose.plusProjectName('ECDAReaderServer') + '_1',\n        visibleWhen: function() { return false }\n    })\n\n    rose.param({\n        id: \"endpoint\",\n        title: \"Schema.Stream\",\n        tooltip: \"Foreign Stream schema and object name.\",\n        type: \"stream\",\n        defval: rose.autoSchemaMarker()+\"::data_1::stream\",\n    })\n\n    //-- the 'Discover' format is not provided as a choice, but will be used in the code\n    rose.param({\n        id: \"format\",\n        title: \"Format\",\n        tooltip: \"The format of the input. \" + dmanual,\n        type: \"choice\",\n        //--values: ['Discover','Line','CSV','JSON','XML'],\n        values: ['Line','CSV','JSON','XML','CPER','BINARY'],\n        defval: 'Line',\n        allowNew: false\n    })\n\n    rose.param({\n        id: 'columns',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"List of columns to create. Each entry consists of a column name, the JSON/XML path used to extract the value, and its SQL type. \" + dfail,\n        columns: ['column', 'path', 'type'],\n        columnTypes: [null, null, '=sqltype='],\n        columnDefs: ['', '', 'VARCHAR(1024)'],\n        columnInits: [null, '#0', 'r'],\n        columnWidths: ['25%', '50%', '25%'],\n        invisibleDefault: true,\n        valueIsRequired: true,\n        visibleWhen: () => rose.param('format') === 'JSON' || rose.param('format') === 'XML'\n    })\n\n    rose.param({\n        id: 'columnsCSV',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"List of columns to create. \" + dfail,\n        columns: ['column', 'type'],\n        columnTypes: [null, '=sqltype='],\n        columnDefs: ['', 'VARCHAR(1024)'],\n        columnInits: [null, 'r'],\n        columnWidths: ['75%', '25%'],\n        invisibleDefault: true,\n        valueIsRequired: true,\n        visibleWhen: () => rose.param('format') === 'CSV' || rose.param('format') === 'CPER'\n    })\n\n    rose.param({\n        id: \"line_buf_size\",\n        title: \"Line Buffer Size\",\n        tooltip: \"The size in bytes of the largest line in your input\",\n        type: \"integer\",\n        defval: 4096,\n        invisibleDefault: true,\n        visibleWhen: () => rose.param('format') === 'Line'\n    })\n\n    rose.param({\n        id: \"rowSeparator\",\n        title: \"Row Separator\",\n        tooltip: \"Defines the Unicode character used to delimit the rows in your data. You may enter a single ASCII character, an escape sequence like \\\\n or \\\\r, or a hexidecimal character code. \" + dmanual,\n        type: \"string\",\n        defval: \"\",\n        invisibleDefault: true,\n        visibleWhen: () => rose.param('format') === 'CSV' || rose.param('format') === 'Line'\n    })\n\n    rose.param({\n        id: \"separator\",\n        title: \"Column Separator(s)\",\n        tooltip: \"Defines the characters used to delimit the columns in your data. Each character in the list will be used as a delimiter. \" + dmanual,\n        type: \"string\",\n        defval: \"\",\n        invisibleDefault: true,\n        visibleWhen: () => rose.param('format') === 'CSV'\n    })\n\n    rose.param({\n        id: \"quoteChar\",\n        title: \"Quote Character\",\n        tooltip: \"Specifies the character used to quote text that contains the separator character. \" + dmanual,\n        type: \"string\",\n        defval: '',\n        invisibleDefault: true,\n        visibleWhen: () => rose.param('format') === 'CSV'\n    })\n\n    rose.param({\n        id: 'encoding',\n        title: 'Character Encoding',\n        tooltip: 'Any encoding supported by Java',\n        type: 'choice',\n        values: ['IBM00858',\n'IBM437',\n'IBM775',\n'IBM850',\n'IBM852',\n'IBM855',\n'IBM857',\n'IBM862',\n'IBM866',\n'ISO-8859-1',\n'ISO-8859-2',\n'ISO-8859-4',\n'ISO-8859-5',\n'ISO-8859-7',\n'ISO-8859-9',\n'ISO-8859-13',\n'ISO-8859-15',\n'KOI8-R',\n'KOI8-U',\n'US-ASCII',\n'UTF-8',\n'UTF-16',\n'UTF-16BE',\n'UTF-16LE',\n'UTF-32',\n'UTF-32BE',\n'UTF-32LE',\n'x-UTF-32BE-BOM',\n'x-UTF-32LE-BOM',\n'windows-1250',\n'windows-1251',\n'windows-1252',\n'windows-1253',\n'windows-1254',\n'windows-1257',\n'x-IBM737',\n'x-IBM874',\n'x-UTF-16LE-BOM']\n,\n        defval: 'UTF-8',\n        allowNew: true,\n        visibleWhen: () => {\n            const f = rose.param('format')\n            return f === 'Line' || f === 'CSV' || f === 'JSON' || f === 'XML'\n        }\n    })\n\n    rose.param({\n        id: \"skip_header\",\n        title: \"Skip CSV Header?\",\n        type: \"boolean\",\n        defval: false,\n        invisibleDefault: true,\n        visibleWhen: () => rose.param('format') === 'CSV'\n    })\n\n    rose.param({\n        id: \"rowpath\",\n        title: \"Row Path\",\n        tooltip: \"An absolute JSONPath query that selects the object that becomes one row. \" + dmanual,\n        type: \"string\",\n        defval: \"$\",\n        invisibleDefault: true,\n        visibleWhen: () => rose.param('format') === 'JSON' || (rose.param('format') === 'BINARY' && rose.param('formatBin') === 'AVRO')\n    })\n\n    rose.param({\n        id: \"parser_xml_row_tags\",\n        title: \"XPath Prefix\",\n        tooltip: \"An absolute XPath query that selects the XML element that becomes one row. \" + dmanual,\n        type: \"string\",\n        defval: \"/stream/row\",\n        invisibleDefault: true,\n        visibleWhen: () => rose.param('format') === 'XML'\n    })\n\n    rose.param({\n        id: \"parser_xml_use_attributes\",\n        title: \"Assign each attribute to a row? (If false, assign each XML tag to a row)\",\n        type: \"boolean\",\n        defval: false,\n        invisibleDefault: true,\n        visibleWhen: () => rose.param('format') === 'XML'\n    })\n\n    rose.param({\n        id: \"formatBin\",\n        title: \"Binary Format\",\n        tooltip: \"Select the format for the binary data stream. \" + df + \" can determine that a data stream is binary but may not know which binary format is in use.\",\n        type: 'choice',\n        values: ['AVRO', 'PROTOBUF'],\n        defval: 'AVRO',\n        invisibleDefault: true,\n        visibleWhen: () => rose.param('format') === 'BINARY'\n    })\n\n    rose.param({\n        id: \"schemaHeader\",\n        title: 'The payload has a schema string as a prefix',\n        tooltip: '',\n        type: \"boolean\",\n        defval: true,\n        //-- valueIsRequired: true,\n        invisibleDefault: true,\n        visibleWhen: () => rose.param('format') === 'BINARY' && rose.param('formatBin') === 'AVRO'\n    })\n\n    rose.param({\n        id: \"schemaAvro\",\n        title: 'AVRO Schema Location',\n        tooltip: \"Location of the AVRO schema definition. This may be either a path to a file on the server or a URL. This value is required, even if the columns have been filled in using the \" + df + \" button.\",\n        type: \"string\",\n        defval: \"\",\n        valueIsRequired: true,\n        invisibleDefault: true,\n        visibleWhen: () => rose.param('format') === 'BINARY' && rose.param('formatBin') === 'AVRO'\n    })\n\n    rose.param({\n        id: \"jarBin\",\n        title: 'Schema Jar File',\n        tooltip: \"Path to the jar file containing the Protobuf schema. This must be specified.\",\n        type: \"string\",\n        defval: \"\",\n        //-- valueIsRequired: true,\n        invisibleDefault: true,\n        visibleWhen: () => rose.param('format') === 'BINARY' && rose.param('formatBin') === 'PROTOBUF'\n    })\n\n    rose.param({\n        id: \"classBin\",\n        title: 'Schema Class',\n        tooltip: \"Java class name for the Protobuf schema. This must be specified.\",\n        type: \"string\",\n        defval: \"\",\n        //-- valueIsRequired: true,\n        invisibleDefault: true,\n        visibleWhen: () => rose.param('format') === 'BINARY' && rose.param('formatBin') === 'PROTOBUF'\n    })\n\n    rose.param({\n        id: 'columnsBin',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"List of columns to create. Each entry consists of a column name, the path used to extract the value, and its SQL type. If the binary schema information is provided \" + df + \" will attempt to fill this in. For AVRO sources, the schema file may not be required.\",\n        columns: ['column', 'path', 'type'],\n        columnTypes: [null, null, '=sqltype='],\n        columnDefs: ['', '', 'VARCHAR(1024)'],\n        columnInits: [null, '#0', 'r'],\n        columnWidths: ['25%', '50%', '25%'],\n        invisibleDefault: true,\n        visibleWhen: () => rose.param('format') === 'BINARY'\n    })\n\n    rose.param({\n        id: \"msglength\",\n        title: \"Are messages prefixed with their length?\",\n        tooltip: \"If true, each message will be prefixed by its length in bytes\",\n        type: \"boolean\",\n        defval: false,\n        invisibleDefault: true,\n        visibleWhen: () => rose.param('format') === 'BINARY' && rose.param('formatBin') === 'PROTOBUF'\n    })\n\n    rose.param({\n        id: \"msgstream\",\n        title: \"Does the input contain a stream of multiple messages?\",\n        tooltip: \"If true, messages are read one after the other with no respect to message boundaries\",\n        type: \"boolean\",\n        defval: false,\n        invisibleDefault: true,\n        visibleWhen: () => rose.param('format') === 'BINARY' && rose.param('formatBin') === 'PROTOBUF'\n    })\n\n    //-- These two are never shown now, but could be re-enabled for debugging.\n    const showDiscoverParams = false\n\n    rose.param({\n        id: \"max_example\",\n        title: \"Sample Kbytes\",\n        tooltip: \"Number of Kbytes to read to collect the sample data for discovery\",\n        type: \"real\",\n        defval: '1024',\n        visibleWhen: () => showDiscoverParams && rose.param('format') === 'Discover'\n    })\n\n    rose.param({\n        id: \"timeout\",\n        title: \"Sample Timeout\",\n        tooltip: \"How long to wait for data to arrive when collecting the sample data for discovery\",\n        type: \"timePeriod\",\n        defval: '3:3:seconds',\n        visibleWhen: () => showDiscoverParams && rose.param('format') === 'Discover'\n    })\n\n\n            /*\n     * Adds a table field of add-on options and defines xtras\n     */\n    rose.param({\n        id: 'xtras',\n        title: 'Additional Options',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"Insert additional options not yet supported by StreamLab\",\n        columns: ['option', 'value'],\n        columnTypes: [null, null],\n        columnDefs: ['', ''],\n    });\n\n    var xtras = rose.tableParam('xtras', function(t) {\n        return '        ' + rose.sqlInColumn(t[0]) + ' ' + rose.sqlLiteral(t[1]) +',' }).join('\\n');\n\n    rose.tableParam('xtras', function(t) { rose.ecdaProp(t[0], t[1]) });\n\n\n\n    /* Compute the render mode. A param called addin_renderMode must\n     * have been set by the input media form (ecda_*_reader.sql)\n     * to 'native', 'directStream', or 'directTable'. \n     *\n     * If not set, we default to native\n     * (generate a pump to a native stream from the foreign stream), but\n     * each ecda_*_reader.sql must set addin_renderMode, or switching\n     * between them using the input selector won't work. It can be set in \n     * the define() function if it's not going to change for that media.\n     *\n     * In this version, we avoid having to do dropAlsos by giving each\n     * possible type its own name. The endpoint, the name given by the user,\n     * will always be a view.\n     */\n    let renderMode = rose.param('addin_renderMode') || 'native'\n    const direct = /^direct/.test(renderMode)\n    var epSplit = rose.param('endpoint').split('::')\n    var foreignTable    //-- if false, it's a sforeign stream\n\n    /* Note that this will be STREAM for Standard mode as well, and always for Discovery */\n    if(rose.param('format') !== 'Discover' && renderMode === 'directTable') {\n        foreignTable = true\n        if(epSplit.length === 3) rose.paramSet('endpoint', epSplit[0] + '::' + epSplit[1] + '::table')\n    } else {\n        foreignTable = false\n        if(epSplit.length === 3) rose.paramSet('endpoint', epSplit[0] + '::' + epSplit[1] + '::stream')\n    }\n\n    /* Goals */\n    rose.goal(e => {\n        const v = e.getPath('params.endpoint')\n        return !!v\n    }, \"Schema and stream must be specified.\")\n\n    rose.goal(e => {\n        switch(e.getPath('params.format')) {\n            case 'Line': return true\n            case 'CSV': return rose.tableParam('columnsCSV').length > 0\n            case 'CPER': return rose.tableParam('columnsCSV').length > 0\n            case 'BINARY': return rose.tableParam('columnsBin').length > 0\n            default: return rose.tableParam('columns').length > 0\n        }\n    }, \"At least one column must be specified.\")\n\n    rose.goal(e => {\n        const x = e.getTrans('trackExecutionStatus')\n        return x === 'success'\n    }, \"Sample rows from this source and get a successful result\")\n\n    rose.goal(e => {\n        const isBinary = e.getPath('params.format') === 'BINARY'\n        const t = e.getPath('params.jarBin')\n        return !isBinary || !!t\n    }, \"The path to the AVRO or PROTOBUF schema's jar file must be specified.\")\n\n    rose.goal(e => {\n        const isBinary = e.getPath('params.format') === 'BINARY'\n        const t = e.getPath('params.class')\n        return !isBinary || !!t\n    }, \"The Java class for the AVRO or PROTOBUF schema must be specified.\")\n\n        //-- Split hostport params\n    _.each(['amqp09', 'amqp10', 'kafka', 'socket_remote', 'socket_server'], function(hp) {\n        var x = rose.param('addin_ecda_' + hp + '_hostport').split('|');\n        if(x && x.length == 2) {\n            rose['ecda_' + hp + '_host'] = x[0];\n            rose['ecda_' + hp + '_port'] = x[1];\n        } else {\n            rose['ecda_' + hp + '_host'] = '';\n            rose['ecda_' + hp + '_port'] = '';\n        }\n    });\n\n    //-- Split userpass params\n    _.each(['amqp10'], function(hp) {\n        var x = rose.param('addin_ecda_' + hp + '_userpass').split('|');\n        if(x && x.length == 2) {\n            rose['ecda_' + hp + '_userid'] = x[0];\n            rose['ecda_' + hp + '_password'] = x[1];\n        } else {\n            rose['ecda_' + hp + '_userid'] = '';\n            rose['ecda_' + hp + '_password'] = '';\n        }\n    });\n\n    //-- Are we going to be creating a foreign stream or just a stream?\n    rose.ecda_foreign = rose.param('addin_ecda_remote') ? '' : 'FOREIGN';\n\n\n    rose.whenCloned(e => {\n        rose.makeEndpointUniqueWithin(e, 'sources', 'data')\n        rose.makeParamUniqueWithin(e, 'ecda_reader_server', 'sources', rose.plusProjectName('ECDAReaderServer'))\n        rose.makeParamUniqueWithin(e, 'addin_ecda_kinesis_name', 'sources', 'kinesis')\n        rose.makeParamUniqueWithin(e, 'addin_ecda_kinesis_app_name', 'sources', 'sqlstream')\n    })\n\n    rose.whenExited(e => rose.sourceExit(e))\n\n    var timeout = rose.param('timeout')\n    if(timeout)\n        timeout = parseFloat(timeout.split(':')[0]) * 1000\n\n    var options = []\n    var columnOptions = []\n    var cols\n\n    function prop(r,p,v) {\n        r.ecdaProp(p, v)\n        options.push(rose.sqlIdentifier(p) + ' ' + rose.sqlLiteral(v))\n    }\n\n    function propMaybe(r,p,v) {\n        return v && v !== \"''\" ? prop(r,p,v) : ''\n    }\n\n    //-- Force msglength if msgstream\n    if(rose.param('msgstream')) \n        rose.paramSet('msglength', true)\n\n    var sug = rose.local('format_suggestion')\n    var binProps = false\n\n    if(sug === 'BINARY') {\n        sug = rose.param('formatBin')\n        binProps = true\n    }\n\n    switch(rose.param('format')) {\n        case 'Discover':\n            prop(rose,'PARSER', 'DISCOVERY')\n            prop(rose,'MAX_EXAMPLE_BYTES', Math.round(rose.param(\"max_example\") * 1024))\n            prop(rose,'DISCOVERY_TIMEOUT', timeout)\n            prop(rose,'FORMAT_SUGGESTION', sug)\n            if(binProps) {\n                prop(rose,'SCHEMA_JAR', rose.param(\"jarBin\"))\n                prop(rose,'SCHEMA_CLASS', rose.param(\"classBin\"))\n                prop(rose,'AVRO_SCHEMA_LOCATION', rose.param(\"schemaAvro\"))\n            }\n            prop(rose,'SKIP_HEADER',  rose.param(\"skip_header\") ? 'true' : 'false')\n            propMaybe(rose,'QUOTE_CHARACTER', rose.param(\"quoteChar\"))\n            propMaybe(rose,'SEPARATOR', rose.param(\"separator\"))\n            propMaybe(rose,'ROW_SEPARATOR', rose.unicodeParam(\"rowSeparator\"))\n            rose.discColumnList = rose.ecdaColumnList = '(\"d_name\" VARCHAR(1024), \"d_path\" VARCHAR(1024), \"d_type\" VARCHAR(1024), \"d_precision\" INTEGER, \"d_scale\" INTEGER, \"d_nullable\" BOOLEAN, \"d_sample\" VARCHAR(4096), \"d_properties\" VARCHAR(40960))'\n            break\n\n        case 'Line':\n            prop(rose,'PARSER', 'CSV')\n            prop(rose,'CHARACTER_ENCODING', rose.param(\"encoding\"))\n            propMaybe(rose,'ROW_SEPARATOR', rose.unicodeParam(\"rowSeparator\"))\n            prop(rose,'SEPARATOR', \"\")\n            prop(rose,'SKIP_HEADER', 'false')\n            rose.ecdaColumnList = '(\"line\" VARCHAR(' + rose.param('line_buf_size') + '))'\n            break\n\n        case 'CSV':\n            prop(rose,'PARSER', 'CSV')\n            prop(rose,'CHARACTER_ENCODING', rose.param(\"encoding\"))\n            propMaybe(rose,'QUOTE_CHARACTER', rose.param(\"quoteChar\"))\n            propMaybe(rose,'SEPARATOR', rose.param(\"separator\"))\n            propMaybe(rose,'ROW_SEPARATOR', rose.unicodeParam(\"rowSeparator\"))\n            prop(rose,'SKIP_HEADER',  rose.param(\"skip_header\") ? 'true' : 'false')\n\n            cols = rose.tableParam('columnsCSV', t => `\"${t[0]}\" ${t[1]}`).join(',\\n    ')\n            rose.ecdaColumnList = cols ? '(\\n    ' + cols + '\\n)' : ''\n            break\n\n        case 'CPER':\n            prop(rose,'PARSER', 'CPER')\n\n            cols = rose.tableParam('columnsCSV', t => `\"${t[0]}\" ${t[1]}`).join(',\\n    ')\n            rose.ecdaColumnList = cols ? '(\\n    ' + cols + '\\n)' : ''\n            break\n\n        case 'JSON':\n            prop(rose,'PARSER', 'JSON')\n            prop(rose,'ROW_PATH', rose.param(\"rowpath\"))\n            columnOptions = rose.tableParam('columns', t => `\"${t[0]}_PATH\" ${rose.sqlLiteral(t[1])}`)\n            cols = rose.tableParam('columns', t => `\"${t[0]}\" ${t[2]}`).join(',\\n    ')\n            rose.ecdaColumnList = cols ? '(\\n    ' + cols + '\\n)' : ''\n            break\n\n        case 'XML':\n            prop(rose,'PARSER', 'XML')\n            prop(rose,'CHARACTER_ENCODING', rose.param(\"encoding\"))\n            prop(rose,'PARSER_XML_ROW_TAGS', rose.param(\"parser_xml_row_tags\"))\n            prop(rose,'PARSER_XML_USE_ATTRIBUTES',  rose.param(\"parser_xml_use_attributes\") ? 'true' : 'false')\n            columnOptions = rose.tableParam('columns', t => `\"${t[0]}_XPATH\" ${rose.sqlLiteral(t[1])}`)\n            cols = rose.tableParam('columns', t => `\"${t[0]}\" ${t[2]}`).join(',\\n    ')\n            rose.ecdaColumnList = cols ? '(\\n    ' + cols + '\\n)' : ''\n            break\n\n        case 'BINARY':\n            prop(rose,'PARSER', rose.param(\"formatBin\").toUpperCase())\n\n            switch(rose.param('formatBin')) {\n                case 'PROTOBUF':\n                    prop(rose,'SCHEMA_JAR', rose.param(\"jarBin\"))\n                    prop(rose,'SCHEMA_CLASS', rose.param(\"classBin\"))\n                    prop(rose,'MESSAGE_STREAM', rose.param(\"msgstream\"))\n                    prop(rose,'MESSAGE_LENGTH_PREFIXED', rose.param(\"msglength\"))\n                    break\n\n                case 'AVRO':\n                    prop(rose,'SCHEMA_HEADER', rose.param(\"schemaHeader\") ? 'true' : 'false')\n                    if(rose.param(\"schemaAvro\")) prop(rose,'AVRO_SCHEMA_LOCATION', rose.param(\"schemaAvro\"))\n                    prop(rose,'ROW_PATH', rose.param(\"rowpath\"))\n                    break\n            }\n\n            columnOptions = rose.tableParam('columnsBin', t => `\"${t[0]}_PATH\" ${rose.sqlLiteral(t[1])}`)\n            cols = rose.tableParam('columnsBin', t => `\"${t[0]}\" ${t[2]}`).join(',\\n    ')\n            rose.ecdaColumnList = cols ? '(\\n    ' + cols + '\\n)' : ''\n            break\n    }\n\n    var pc_columns = {\n    none: \"do not include\",\n    before: \"include before other columns\",\n    after: \"include after other columns\"\n};\n\n\n    //-- Handle provenance columns\n    var aep = rose.param(\"addin_ecda_\" + rose.param('addin_ecda_selector') + \"_provenance\")\n    if(aep && aep !== pc_columns.none) {\n        var pcs = rose.ecdaProvenanceColumns('reader', rose.param('addin_ecda_selector'), {formatted:true})\n        var ecl = rose.ecdaColumnList || ''\n        if(aep === pc_columns.before)\n            rose.ecdaColumnList = ecl.replace(/^\\(/, `(${pcs},\\n`)\n        else\n            rose.ecdaColumnList = ecl.replace(/\\)$/, `,\\n${pcs})`)\n    }\n\n    //-- STREAM or nothing\n    const stream = rose.isStreamingEndpoint() ? 'STREAM' : ''\n\n    if(options.length > 0)\n        options = options.join(',\\n        ') + ','\n    else\n        options = ''\n\n    if(columnOptions.length > 0)\n        columnOptions = columnOptions.join(',\\n        ') + ','\n    else\n        columnOptions = ''\n\n    rose.ecdaProp('SCHEMA_NAME', rose.endp2schema(rose.param(\"endpoint\")));\nrose.ecdaProp('TABLE_NAME', rose.endp2sqlobj(rose.param(\"endpoint\")));\nrose.ecdaProp('ROWTYPE', 'RecordType(' +  rose.tableParam('columns', function(t) { return t[1] + ' \"' + t[0] + '\"' }).join(', ') + ')');\n\nrose.ecdaProperties('reader', rose.param('addin_ecda_selector'));\n\n%>\n\n<% /* Define a function to render the view endpoint, given the input's name. \n    * If dontThottle is true, ignore func and don't throttle\n    */\nfunction view(input, dontThottle) {\n    let out = []\n\n    out.push(rose.createSqlObj('VIEW', ep) + ' AS')\n    if(!dontThottle && func) {\n        out.push(`SELECT ${type} *`)\n        out.push(`FROM ${type}(${func}(`)\n        out.push(`  CURSOR(SELECT ${stream} * FROM ${input}), ${period}));`)\n    } else {\n        out.push(`SELECT ${stream} * FROM ${input};`)\n    }\n\n    out.push('')\n\n    return out.join('\\n')\n}\n%>\n\n<% /* Define a function to render the main object given its type and name */\nfunction mainObj(type, name) {\n    let out = []\n\n    out.push(rose.createSqlObj(type, name))\n    out.push(rose.ecdaColumnList)\n    out.push(rose.ecdaServer('reader', rose.param('addin_ecda_selector')))\n    out.push('OPTIONS (')\n    out.push(options)\n    out.push(columnOptions)\n    out.push(xtras)\n    out.push(rose.ecdaOptions('reader', rose.param('addin_ecda_selector')))\n    out.push(');')\n    out.push('')\n\n    return out.join('\\n')\n}\n%>\n\n\n<%= rose.createSqlObj('SCHEMA', rose.sqlIdentifier(rose.endp2schema(rose.param(\"endpoint\"))), {\n        wasCoR: true,\n        ifNotProjectSchema: true\n}) %>;\n\n<%= rose.ecdaDeactivate('reader', rose.param('addin_ecda_selector')) %>\n\n\n<% if(rose.param('format') !== 'Discover') { %>\n<% /* If we're throttling, define the func, else define it as null */\nif(!rose.projectSetting('disableAllThrottlers') && rose.param('addin_throttle_enabled')) {\n    var func = rose.endp2fqn(rose.param(\"endpoint\"), 'throttlefunc');\n    var period = Math.round(1000.0 / parseFloat(rose.projectSetting('projectThrottleRate')));\n    var type = rose.isStreamingEndpoint() ? 'STREAM' : 'TABLE';\n    var ep = rose.endp2fqn(rose.param(\"endpoint\"));\n    var epRaw = rose.endp2fqn(rose.param(\"endpoint\"), 'raw');\n%>\n\n<%= rose.createSqlObj('FUNCTION', func) %>(inputRows CURSOR, throttleScale int)\n    returns TABLE(inputRows.*)\nLANGUAGE JAVA\nPARAMETER STYLE SYSTEM DEFINED JAVA\nNO SQL\nEXTERNAL NAME 'class:com.sqlstream.plugin.timesync.ThrottleStream.throttle';\n\n<% } else {\n\n    var func = null;\n    if(rose.projectSetting('disableAllThrottlers')) { %>\n-- Throttling is disabled globally in the project settings\n    <% } %>\n<% } %>\n\n<% } %>\n\n<% /* Define the reader, possibly multiple SQL objects.\n    * This version will leave the fanout streams lying around when switching between kinesis and !kinesis,\n    * but nothing will be using them if !kinesis, so that's OK.\n    * Now that the endpoint is always a view we leave more objects around, but since we're normally\n    * dropping the whole schema when running the whole project, it matters very little.\n    *\n    * Assumes rose.ecdaColumnList is defined.\n    */\n    var fanout = rose.param('addin_ecda_kinesis_fanout') || 0\n    var ep = rose.endp2fqn(rose.param(\"endpoint\"))\n    var epDisc = rose.endp2fqn(rose.param(\"endpoint\"), \"discovery\")\n    var epRemote = rose.endp2fqn(rose.param(\"endpoint\"), \"remote\")\n    var epNS = rose.endp2fqn(rose.param(\"endpoint\"), \"ns\")\n    var epFS = rose.endp2fqn(rose.param(\"endpoint\"), \"fs\")\n    var epTable = rose.endp2fqn(rose.param(\"endpoint\"), \"table\")\n    var epThrottle = rose.endp2fqn(rose.param(\"endpoint\"), \"throttle\")\n%>\n\n<% if(rose.param('addin_ecda_selector') != 'kinesis') { /* Not kinesis */ %>\n    <% if(rose.param('addin_ecda_remote')) { /* remote: just create native stream to be fed by remote agent, possibly throttled */ %>\n\n<%= rose.createSqlObj('STREAM', epRemote) %>\n<%= rose.ecdaColumnList %>;   \n<%= view(epRemote) %>\n\n    <% } else if(rose.param('format') === 'Discover') { /* local discovery: create foreign stream, ignore throttling and endpoint view */ %>\n\n<%= rose.ecdaDefinition('reader', rose.param('addin_ecda_selector')) %>\n\n<%= rose.createSqlObj('FOREIGN STREAM', epDisc) %>\n<%= rose.discColumnList %>\n<%= rose.ecdaServer('reader', rose.param('addin_ecda_selector')) %>\n    OPTIONS (\n<%= options %>\n<%= columnOptions %>\n<%= xtras %>\n<%= rose.ecdaOptions('reader', rose.param('addin_ecda_selector')) %>\n    );\n\n    <% } else if(direct) { /* direct: create foreign stream or table only, with the endpoint view */ %>\n\nDROP PUMP <%= rose.sqlIdentifier(rose.endp2pump(rose.param('endpoint'),{typeHint:'source'})) %>;\n<%= rose.ecdaDefinition('reader', rose.param('addin_ecda_selector')) %>\n<%= foreignTable ? mainObj('FOREIGN TABLE', epTable) + view(epTable) : mainObj('FOREIGN STREAM', epFS) + view(epFS) %>\n\n    <% } else { /* normal: create foreign stream -> pump with or w/o throttle -> native stream -> view */ %>\n\nDROP PUMP <%= rose.sqlIdentifier(rose.endp2pump(rose.param('endpoint'),{typeHint:'source'})) %>;\n<%= rose.ecdaDefinition('reader', rose.param('addin_ecda_selector')) %>\n<%= mainObj('FOREIGN STREAM', epFS) %>\n\n<%= rose.createSqlObj('STREAM', epNS) %>\n<%= rose.ecdaColumnList %>;\n\n<%= rose.createPump(rose.endp2pump(rose.param('endpoint'),{typeHint:'source'}), epNS) %>\nSELECT <%= stream %> * \n<% if(func) { %>\nFROM <%= type %>(<%= func %> (CURSOR(SELECT <%= stream %> * FROM <%= epFS %>), <%= period %>));\n<% } else { %>\nFROM <%= epFS %>;\n<% } %>\n\n<%= view(epNS, true) %>\n\n    <%  } /* end not remote */ %>\n\n<% } else { /* kinesis, no throttling at all */\n    /* Define each of the streams ep_1, ep_2, and so on. Assumes rose.ecdaColumnList is defined. Always create native streams, even if not remote (ignoring ecda_foreign). */\n%>\n\n<% for(var i=1; i <= fanout; i++) { %>\n<%= rose.createSqlObj('STREAM', rose.endp2fqn(rose.param(\"endpoint\"), i)) %>\n    <%=    rose.ecdaColumnList %>;\n<%  } %>\n\n<%  } /* end kinesis */ %>\n\n<%= rose.ecdaActivate('reader', rose.param('addin_ecda_selector'), options+columnOptions+xtras) %>\n","external":true,"binary":false,"title":"External Stream","public":true,"doc":"# Streaming Data from an External Source\nThe Streaming Data Source option lets you select a source that you know is streaming, from a file, HTTP, a WebSocket, network socket, AMQP message bus, Kafka topic, AWS Kinesis stream, or Teradata listener. StreamLab will automatically determine the format for the source.\n\nFor more information on the options for inputs, see\n<a href=\"https://docs.sqlstream.com/integrating-sqlstream/reading-data/\" target=\"\\_blank\">Reading Data into s-Server</a>, as well as the topics <a href=\"https://docs.sqlstream.com/integrating-sqlstream/file-system/#reading-from-the-file-system\" target=\"\\_blank\">Reading from the File System</a>, <a href=\"https://docs.sqlstream.com/integrating-sqlstream/sockets/#reading-from-sockets\" target=\"\\_blank\">Reading from Sockets</a>, <a href=\"https://docs.sqlstream.com/integrating-sqlstream/amqp/#reading-from-amqp\" target=\"\\_blank\">Reading from AMQP</a>, <a href=\"https://docs.sqlstream.com/integrating-sqlstream/kafka/#reading-from-kafka\" target=\"\\_blank\">Reading from Kafka</a>, <a href=\"https://docs.sqlstream.com/integrating-sqlstream/kinesis/#reading-from-amazon-kinesis\" target=\"\\_blank\">Reading from Amazon Kinesis</a>, <a href=\"https://docs.sqlstream.com/integrating-sqlstream/http/#reading-from-http\" target=\"\\_blank\">Reading over HTTP</a>, <a href=\"https://docs.sqlstream.com/integrating-sqlstream/websockets/#reading-from-websockets\" target=\"\\_blank\">Reading from WebSockets</a>, <a href=\"https://docs.sqlstream.com/integrating-sqlstream/mqtt/#reading-from-mqtt\" target=\"\\_blank\">Reading from MQTT</a>.\n\n\nTo add a Streaming Data source:\n\n1. On the Sources page, drag a Streaming Data source from the left column into the center area.\n2. Click the new Streaming Data source.\n3. Select File System, Socket, AMQP, Kafka, Kinesis, WebSocket, or HTTP.\n4. Enter connection information for the input source. For example, to access a File source, you need to enter directory and filename pattern information for the file.\n    By default, StreamLab uses the project schema for the new source. If you wish to use a different schema, click the dropdown menu to the right of Schema.Stream. You can also choose a different name for the stream by clicking the dropdown menu that reads \"data_1\".\n\n1. Click the Discover Format button. This feature examines the file to determine its file format.\n    Currently, the Discovery parser can identify CSV, XML, JSON, and Avro files. StreamLab can also work with ProtoBuf files, but you need to add these as their own source. Avro files may require additional configuration to work.\n\n    The Discover Format dialog box opens. You can select an amount for the Discover Format feature to read in bytes and a timeout for the feature. In most cases, defaults should device.\n\n    ![](/images/doc/sl_discover_format_dialog.png)\n\n1. Click Start. The Discover Format feature runs. The left section of the dialog box should display a format--either CSV, JSON, XML, or Binary.\n\n    If you don't get a result you may have to adjust the **Sample Bytes** and **Timeout** parameters. These\ncontrol how large of a sample SQLstream reads from the input, and how long to wait for that\nmany bytes to arrive.\n\n1. Click Accept.\n     The indicated format should be automatically selected under Format. You can also choose the Line format, which lets you access files line-by-line.\n1. Next, fill in the list of columns and their SQL types. You can use the Clipboard to copy column names and types from another form.\n1. Test the source by clicking the *Sample 5 Rows from Source button*.\n1. Click the Go Up arrow to exit the Edit Source page.\n\n**Note:** Not all inputs are supported for Protocol Buffers yet. SQLstream supports Kafka for receiving protocol buffers.\n\nIn some cases you have to select the format from the menu and configure it manually. For most formats you will need to define the list of **Columns** and their SQL data types.\n\n## Line\nThis format reads whole lines from an input. The character delimiting input lines can be set via\nthe **Row Separator** field as hexidecimal. The default is _000A_, the newline character. You may also configure the\n**Line Buffer Size**, in bytes. The resulting stream will have two columns, one containing each line from the input, and a column containing the ROWTIME.\nWhen you view this source in a guide StreamLab will provide suggested operations to parse the components of\nthe line column into multiple columns.\n\n## CSV\nThis format reads lines from an input and parses them into columns using a separator character (usually a comma).\nThe resulting stream will have a ROWTIME column in addition to the columns you define.\n\nYou can change the row and column separator characters and the character encoding if necessary. The **Skip Header**\nswitch, if enabled, will cause SQLstream to ignore the first line of the input.\n\nFor more information on parsing CSV, see the topic < a href=\"https://docs.sqlstream.com/integrating-sqlstream/parsing-data/parsing-csv/\" target=\\_blank\">Reading CSV</a> in the Integrating SQLstream with Other Systems guide.\n\n## JSON\nThis format reads JSON (JavaScript Object Notation) objects from an input and extracts\ntheir properties into into columns.\nThe resulting stream will have a ROWTIME column in addition to the columns you define.\n\nThe JSON parser uses <a href=\"https://github.com/jayway/JsonPath\" target=\"\\_blank\">JsonPath</a>\nto select values from the incoming JSON stream.  The **Row Path** is a JsonPath expression that\nselects the object from the incoming JSON that contains a row.\nWhen you enter the columns you'd like to extract, for each one specify the JsonPath that selects the\nvalue from the row path object.\n\nFor more information on parsing JSON, see the topic < a href=\"https://docs.sqlstream.com/integrating-sqlstream/parsing-data/parsing-json/\" target=\\_blank\">Reading JSON</a> in the Integrating SQLstream with Other Systems guide.\n\n## XML\nThis format reads XML (eXtensible Markup Language) objects from an input and extracts\ntheir fields into into columns.\nThe resulting stream will have a ROWTIME column in addition to the columns you define.\n\nSQLstream can extract values from anywhere inside your XML input by specifying the value's\n<a href=\"http://en.wikipedia.org/wiki/XPath\" target=\"\\_blank\">XPath</a>.  The **XPath Prefix** is an\nabsolute XPath that selects the container of the values you want to extract.\nFill in the columns and their XPath and SQL data types in the table (the XPaths should\nbe relative to the XPath prefix). If you're extracting attributes rather than\nvalues from the input, enable **Assign each attribute to a row**. If necessary,\nyou can change the default **Character Encoding**.\n\nFor more information on parsing XML, see the topic < a href=\"https://docs.sqlstream.com/integrating-sqlstream/parsing-data/parsing-xml/\" target=\\_blank\">Reading XML/a> in the Integrating SQLstream with Other Systems guide.\n\n## Binary\nThis format is used to configure a binary input, and can currently handle AVRO and Protobuf data\n(as selected by the **Binary Format** menu). In some cases Discovery will only be able to determine that\nthe data is in some binary format, and you will need to fill in the rest. Sometimes, though, Discovery\nwill be able to determine the entire binary format specification.\n\nIf you are filling this in by hand, first select the binary format. For AVRO, we use a JsonPath\nto specify the **Row Path**, in a manner analagous to how rows are selected from JSON inputs. You\ncan also specify the path to the AVRO schema file (this is a path to a file on the SQLstream server, which\nmay not be the same as the machine you're running StreamLab on). If Discovery was unable to fill in\nthe columns list, you will most likely need to fill in **AVRO schema file**. Once you've specified\nthe file, try the **Discover Format** button again to see if it can now fill in the columns for you. If you have\nto fill in the columns by hand, use JsonPaths to indicate how to extract each column from the rows,\nas if you were reading a JSON source.\n\nFor more information on parsing AVRO, see the topic < a href=\"https://docs.sqlstream.com/integrating-sqlstream/parsing-data/parsing-avro/\" target=\\_blank\">Reading AVRO</a> in the Integrating SQLstream with Other Systems guide.\n\nFor Protobuf, you can specify the path (again, to a file on the SQLstream server) to a .jar file containing\nthe schema along with the Java class name of the schema within that file.\n\nFor more information on parsing Protobuf, see the topic < a href=\"https://docs.sqlstream.com/integrating-sqlstream/parsing-data/parsing-protobuf/\" target=\\_blank\">Reading Protobuf</a> in the Integrating SQLstream with Other Systems guide.\n\n## Local vs. Remote\n![](/images/doc/ecda-local.png)\nIn this mode the input is accessed directly from SQLstream s-Server. Files are local to the s-Server host,\nand sockets and other network connections are relative to the s-Server host. When this mode\nis enabled, StreamLab submits your configuration for this source directly to your instance of SQLstream.\n\n![](/images/doc/ecda-remote.png)\n\nIn this mode you can access sources via a host running the ECDA Agent (see\n<a href=\"https://docs.sqlstream.com/integrating-sqlstream/ecda-agent/\" target=\"\\_blank\">our docs</a>).\nThe agent is a Java app running on a host other than the s-Server host, configured to write data to\nyour instance of s-Server. When this mode is enabled, StreamLab configures the stream that the remote agent\nwill insert into. To configure the remote agent, use the ![](/images/doc/ecda-export.png) button\nto get the contents of the properties file, and paste this into a new file on the remote agent server (for\nexample, *mysource.props*). From a command shell on the remote host, run\n\n> % $SQLSTREAM_HOME/../clienttools/EcdaAgent/commondataagent.sh --input --props mysource.props\n\nEverything you've specified here to configure the source will now apply within the remote agent, so\nfile names will be local to that host, and sockets and other network connections will be relative to that host.\n\n## Testing the Source\n\n![](/images/doc/sl_sample_btn.png)\n\nPress this button to attempt to read 5 rows from the source you've defined.\nIf you don't get any data, check the *Last Run* button to see if there\nwere any errors reported when the SQL was executed, especially if you see\na SQL script error indicator: ![](/images/doc/script-failed.png).\nAlso check for runtime errors when you see the runtime error indicator: ![](/images/doc/runtime-bad.png).\n\nIf that doesn't help, check the input parameters and other settings to see if you can identify the cause.\n\n## Throttling\nThis source can be throttled so that rows will be read at only a certain number of rows per second, regardless of\nhow much data is available. The project settings include a setting for the throttle rate. You can also throttle\na stream using an operation in a StreamLab guide.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/sources/foreignTable.sql":{"value":"-- External table\n<%= rose.panel('params_source') %>\n\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n    rose.localSet('docsDismissed', true);\n    rose.localSet('runBtnState', 'untried');\n    rose.localSet('showDiscoveryBtn', false);\n    rose.localSet('showAutoFillBtn', true);\n    rose.localSet('forceAutoFillTable', true);\n    rose.localSet('trackExecution', true);\n    rose.transientSet('trackExecutionStatus', 'none');\n\n    rose.param({\n        id: \"endpoint\",\n        title: \"Schema.Table\",\n        tooltip: \"SQLstream schema and object name\",\n        type: \"table\",\n        defval: rose.autoSchemaMarker()+\"::external_table_1::table\",\n    });\n\n    rose.param({\n        id: 'serverName',\n        title: 'External connection',\n        tooltip: \"Select from the connections defined in the External Connections top-level page\",\n        type: \"choice\",\n        valuesFunc: function() { return rose.serverList() },\n        defval: rose.serverList(0)\n    });\n\n    rose.param({\n        id: 'fschema',\n        title: 'External schema',\n        tooltip: 'Schema in external database',\n        type: 'string',\n        defval: 'public',\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: 'ftable',\n        title: 'External table',\n        tooltip: 'Table in external database',\n        type: 'string',\n        defval: '',\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: 'columns',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"List of columns to read\",\n        columns: ['column', 'type'],\n        columnTypes: [null, '=sqltype='],\n        columnDefs: ['', 'VARCHAR(1024)'],\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: 'asStream',\n        title: \"Read the external table as a stream? (See the help for this page.)\",\n        tooltip: \"\",\n        type: \"boolean\",\n        defval: false\n    });\n\n    var qCols = function(r, index) {\n        /* no longer including only timestamps, as per #5349\n        var colsArray = r.tableParam('columns', function(t) { return t[0] }, function(t) { return /^time/i.test(t[1]) });\n        */\n        var colsArray = r.tableParam('columns', function(t) { return t[0] });\n\n        if(colsArray.length < 1)\n            colsArray = [\"*** no columns have been defined yet ***\"];\n\n        if(typeof index === 'number')\n            return colsArray[index];\n        else\n            return colsArray;\n    };\n\n    rose.param({\n        id: 'queryCol',\n        title: 'High Watermark Timestamp',\n        tooltip: \"To stream from an external table, select one of its columns as the high watermark column. For the best performance, the column should be an indexed TIMESTAMP (see the help for this page)\", \n        type: \"choice\",\n        visibleWhen: function() { return rose.param('asStream') },\n        valuesFunc: function() { return qCols(rose) },\n        defval: qCols(rose, 0),\n        dependentOn: ['columns']\n    });\n\n\n        /*\n     * Adds a table field of add-on options and defines xtras\n     */\n    rose.param({\n        id: 'xtras',\n        title: 'Additional Options',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"Insert additional options not yet supported by StreamLab\",\n        columns: ['option', 'value'],\n        columnTypes: [null, null],\n        columnDefs: ['', ''],\n    });\n\n    var xtras = rose.tableParam('xtras', function(t) {\n        return '        ' + rose.sqlInColumn(t[0]) + ' ' + rose.sqlLiteral(t[1]) +',' }).join('\\n');\n\n\n    rose.whenCloned(function(e) { rose.makeEndpointUniqueWithin(e, 'sources', 'external_table', 'table') });\n    rose.whenExited(function(e) { rose.sourceExit(e) });\n\n    var cols = rose.tableParam('columns', function(t) { return '\"' + t[0] + '\" ' + t[1] }).join(',\\n    ');\n\n    var colList = cols ? '(' + cols + ')' : '';\n\n    rose.goal(function(e) {\n        var rbs = rose.local('runBtnState');\n        return rbs === 'success';\n    }, \"Sample rows from this source and get a successful result\");\n\n    if(rose.param('asStream')) {\n        rose.endpSetType('endpoint', 'STREAM');\n        rose.local('isStream', true);\n    } else {\n        rose.endpSetType('endpoint', 'TABLE');\n        rose.local('isStream', false);\n    }\n\n    var ep = rose.endp2fqn(rose.param(\"endpoint\"));\n    var epraw = rose.endp2fqn(rose.param(\"endpoint\"), 'raw');\n\n    //-- Note that we drop both the table and stream, in case asStream just changed, using dropAlso\n%>\n\n<% if(rose.param('asStream')) { %>\n\n<%= rose.createSqlObj('FOREIGN STREAM', epraw, {dropAlso: [{type: 'FOREIGN TABLE', obj: ep}]}) %> <%= colList %>\nSERVER <%= rose.sqlIdentifier(rose.plusProjectName(rose.param('serverName'))) %>\nOPTIONS (\n    \"SCHEMA_NAME\" <%= rose.literal(rose.param('fschema')) %>,\n    \"queryCol\" <%= rose.literal(rose.param('queryCol')) %>,\n<%= xtras %>\n    \"TABLE_NAME\" <%= rose.literal(rose.param('ftable')) %>\n);\n\n<% /* If we're throttling, define the func, else define it as null */\nif(!rose.projectSetting('disableAllThrottlers') && rose.param('addin_throttle_enabled')) {\n    var func = rose.endp2fqn(rose.param(\"endpoint\"), 'throttlefunc');\n    var period = Math.round(1000.0 / parseFloat(rose.projectSetting('projectThrottleRate')));\n    var type = rose.isStreamingEndpoint() ? 'STREAM' : 'TABLE';\n    var ep = rose.endp2fqn(rose.param(\"endpoint\"));\n    var epRaw = rose.endp2fqn(rose.param(\"endpoint\"), 'raw');\n%>\n\n<%= rose.createSqlObj('FUNCTION', func) %>(inputRows CURSOR, throttleScale int)\n    returns TABLE(inputRows.*)\nLANGUAGE JAVA\nPARAMETER STYLE SYSTEM DEFINED JAVA\nNO SQL\nEXTERNAL NAME 'class:com.sqlstream.plugin.timesync.ThrottleStream.throttle';\n\n<% } else {\n\n    var func = null;\n    if(rose.projectSetting('disableAllThrottlers')) { %>\n-- Throttling is disabled globally in the project settings\n    <% } %>\n<% } %>\n\n<%= rose.createSqlObj('VIEW', ep, {dropAlso: [{type: 'STREAM', obj: ep}]}) %> AS\n<% if(func) { %>\nSELECT <%= type %> *\nFROM <%= type %>(<%= func %> (\n      CURSOR(SELECT <%= rose.isStreamingEndpoint() ? 'STREAM ' : '' %> * FROM <%= rose.endp2fqn(rose.param(\"endpoint\"), 'raw') %>), <%= period %>));\n<% } else { %>\nSELECT <%= rose.isStreamingEndpoint() ? 'STREAM' : '' %> *\nFROM <%= rose.endp2fqn(rose.param(\"endpoint\"), 'raw') %>;\n<% } %>\n\n\n\n<% } else { %>\n\n<%= rose.createSqlObj('FOREIGN TABLE', ep, {dropAlso: [{type: 'FOREIGN STREAM', obj: epraw}]}) %> <%= colList %>\nSERVER <%= rose.sqlIdentifier(rose.plusProjectName(rose.param('serverName'))) %>\nOPTIONS (\n    \"SCHEMA_NAME\" <%= rose.literal(rose.param('fschema')) %>,\n<%= xtras %>\n    \"TABLE_NAME\" <%= rose.literal(rose.param('ftable')) %>\n);\n\n<% } %>\n","external":true,"binary":false,"title":"External Table","public":true,"doc":"# External Table Source\n\nThis source reads a table from a database server external to s-Server. You\nshould have already defined one or more connections to external servers in\nthe *External Connections* page (navigate up to the top page to get there).\nYou need to define the connection first because you can use the same connection\nto access multiple external tables, both as sources and sinks.\n\nStart by selecting the s-Server **stream** and **table** that will receive\ndata from the external table, and select the external connection. Then\nspecify the **external schema** and **external table** names. If the external\ntable already exists and you've specified the connection parameters correctly,\nyou should be able to automatically fill the list of columns using the **AutoFill Columns**\nbutton. You may also enter the columns by hand.\nThe column names and types should match what's defined in the external database, but you\ndon't have to include all of the columns.\nThe resulting stream will have a ROWTIME column in addition to the columns you define.\n\nIf you enable **Read the external table as a stream?** you must select one of the\ncolumns as a high watermark, and it must be a TIMESTAMP column with an index.\n\n![Warning](/images/doc/small_warn_icon.png)<span style=\"color:red;\">If you\nselect an unindexed column, the SQLstream server's ability to stream the table will be\nseverely impaired, and the resulting performance will probably be unacceptable.</span>\n\n## Testing the Source\n\n![](/images/doc/sl_sample_btn.png)\n\nPress this button to attempt to read 5 rows from the source you've defined.\nIf you don't get any data, check the *Last Run* button to see if there\nwere any errors reported when the SQL was executed. If not, check the input parameters\nand other settings to see if you can identify the cause. If you're still\nstumped as to why data isn't flowing, check the trace\nlog (/var/log/sqlstream/Trace.log.0) on your s-Server host for runtime errors.\n\n## Throttling\nThis source can be throttled so that rows will be read at only 1 row per second, regardless of\nhow much data is available.\n\nFor more information on reading from and writing to external databases in s-Server,\n\nFor more information on reading from and writing to external databases in s-Server, see the topics <a href=\"https://docs.sqlstream.com/integrating-sqlstream/rdbms/\" target=\"\\_blank\">reading from RDBMS sources</a> and <a href=\"https://docs.sqlstream.com/integrating-sqlstream/rdbms/\" target=\"\\_blank\">writing to RDBMS sources</a> in the Integrating SQLstream with Other Systems guide.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/sources/stream.sql":{"value":"-- Pre-existing SQLstream stream\n<%= rose.panel('params_source') %>\n\n<%\n    rose.localSet('docsDismissed', true)\n    rose.localSet('dontThrottle', true)\n    rose.localSet('runBtnState', 'untried')\n    rose.localSet('showAutoFillBtn', true)\n    rose.localSet('trackExecution', false) /* We don't track execution here, because there's nothing to execute */\n\n    rose.param({\n        id: \"endpoint\",\n        title: \"Schema.Stream\",\n        type: \"stream\",\n        defval: '',\n        preexistingOnly: true,\n        valueIsRequired: true\n    })\n\n    rose.param({\n        id: 'columns',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        readOnly: true,\n        tooltip: \"List of columns in stream\",\n        columns: ['column', 'type'],\n        columnTypes: [null, '=sqltype='],\n        columnDefs: ['', 'VARCHAR(1024)'],\n        tableHeight: 400,\n        valueIsRequired: true\n\n    })\n\n    var cols = rose.tableParam('columns', function(t) { return '\"' + t[0] + '\" ' + t[1] }).join(',\\n    ')\n\n    var colList = cols ? '(' + cols + ')' : ''\n\n    rose.whenExited(function(e) { rose.sourceExit(e) })\n\n    rose.goal(function(e) {\n        var rbs = rose.local('runBtnState')\n        return rbs === 'success'\n    }, \"Sample rows from this source and get a successful result\")\n%>","external":true,"binary":false,"title":"Use SQLstream Stream","public":true,"doc":"# Stream\n\nUse this source to access an existing s-Server stream. You can enter the schema and stream names or get them from s-Server using the ![](/images/doc/sl_catalog_trigger.png) buttons. For more information on getting data into a stream in s-Server, please see the s-Server Enterprise Integration Guide.\n\n![](/images/doc/sl_add_stream_source_sel_schema_zoom20.png)\n\nIf you want to create a new stream that is managed by StreamLab, use the *Create SQLstream Stream* operator.\n\n## Testing the Source\n\n![](/images/doc/sl_sample_btn.png)\n\nPress this button to attempt to read 5 rows from the source you've defined. If you don't get any data, check the *Last Run* button to see if there were any errors reported when the SQL was run. If not, check the schema and stream names to see if you can identify the cause. If you're still stumped as to why data isn't flowing, check the trace log (/var/log/sqlstream/Trace.log.0) on your s-Server host for runtime errors.\n\nFor more information on streams, see the topic <a href=\"https://docs.sqlstream.com/concepts/sqlstream-overview/stream-and-view/\" target=\"_blank\">Stream and View</a> in the Understanding Streaming SQL Concepts guide as well as the topics <a href=\"https://docs.sqlstream.com/sql-reference-guide/create-statements/createstream/\" target=\"_blank\">CREATE STREAM</a> and <a href=\"https://docs.sqlstream.com/sql-reference-guide/create-statements/createforeignstream/\" target=\"_blank\">CREATE FOREIGN STREAM</a> in the s-Server Streaming SQL Reference Guide.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/sources/new_stream.sql":{"value":"-- New SQLstream stream\n<%= rose.panel('params_source') %>\n\n<%\n    rose.localSet('docsDismissed', true)\n    rose.localSet('dontThrottle', true)\n    rose.localSet('runBtnState', 'untried')\n    rose.localSet('showAutoFillBtn', false)\n    rose.localSet('trackExecution', true) \n\n    rose.param({\n        id: \"endpoint\",\n        title: \"Schema.Stream\",\n        type: \"stream\",\n        defval: '',\n        preexistingOnly: false,\n        valueIsRequired: true\n    })\n\n/* Not a parameter: always on here, always off in stream.sql\n *\n * SQL statement below was wrapped in a \"if(rose.param('create'))\" if statement\n * when this was a parameter.\n *\n    rose.param({\n        id: \"create\",\n        title: \"Create stream?\",\n        type: \"boolean\",\n        falseValue: \"Stream already exists\",\n        trueValue: \"Create stream with given columns\",\n        defval: false,\n    })\n*/\n\n    rose.param({\n        id: 'columns',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        readOnly: false,\n        tooltip: \"List of columns in stream\",\n        columns: ['column', 'type'],\n        columnTypes: [null, '=sqltype='],\n        columnDefs: ['', 'VARCHAR(1024)'],\n        tableHeight: 400,\n        valueIsRequired: true\n    })\n\n    var cols = rose.tableParam('columns', function(t) { return '\"' + t[0] + '\" ' + t[1] }).join(',\\n    ')\n\n    var colList = cols ? '(' + cols + ')' : ''\n\n    rose.whenExited(function(e) { rose.sourceExit(e) })\n\n    rose.goal(function(e) {\n        var rbs = rose.local('runBtnState')\n        return rbs === 'success'\n    }, \"Sample rows from this source and get a successful result\")\n%>\n\n<%= rose.createSqlObj('STREAM', rose.endp2fqn(rose.param(\"endpoint\"))) %>(\n    <%= cols %>\n);\n","external":true,"binary":false,"title":"Create SQLstream Stream","public":true,"doc":"# Stream\n\nUse this source to create a new s-Server stream that will be managed by StreamLab (created when the project is created and destroyed when the project is removed from a server). You can enter the schema and stream names or get them from s-Server using the ![](/images/doc/sl_catalog_trigger.png) buttons. For more information on getting data into a stream in s-Server, please see the s-Server Enterprise Integration Guide.\n\n![](/images/doc/sl_add_stream_source_sel_schema_zoom20.png)\n\nIf you want to access an existing SQLstream stream that was created outside this project, use the *Use SQLstream Stream* source.\n\n## Testing the Source\n\n![](/images/doc/sl_sample_btn.png)\n\nPress this button to attempt to read 5 rows from the source you've defined. If you don't get any data, check the *Last Run* button to see if there were any errors reported when the SQL was run. If not, check the schema and stream names to see if you can identify the cause. If you're still stumped as to why data isn't flowing, check the trace log (/var/log/sqlstream/Trace.log.0) on your s-Server host for runtime errors.\n\nFor more information on streams, see the topic <a href=\"https://docs.sqlstream.com/concepts/sqlstream-overview/stream-and-view/\" target=\"_blank\">Stream and View</a> in the Understanding Streaming SQL Concepts guide as well as the topics <a href=\"https://docs.sqlstream.com/sql-reference-guide/create-statements/createstream/\" target=\"_blank\">CREATE STREAM</a> and <a href=\"https://docs.sqlstream.com/sql-reference-guide/create-statements/createforeignstream/\" target=\"_blank\">CREATE FOREIGN STREAM</a> in the s-Server Streaming SQL Reference Guide.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/sources/publicData.sql":{"value":"-- Public data sources\n<%= rose.panel('params_source') %>\n\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    var sources = [\n        \"Meetup RSVPs\",\n        \"New South Wales Bus Data\",\n    ];\n\n    rose.localSet('docsDismissed', true)\n    rose.localSet('runBtnState', 'untried');\n    rose.localSet('trackExecution', true);\n    rose.transientSet('trackExecutionStatus', 'none');\n\n    rose.param({\n        id: \"whichOne\",\n        title: \"Data Source\",\n        tooltip: \"Select a public source of streaming data\",\n        type: \"choice\",\n        values: sources,\n        defval: sources[0]\n    });\n\n    rose.param({\n        id: \"endpoint\",\n        title: \"Schema.Stream\",\n        tooltip: \"s-Server schema and object name.\",\n        type: \"stream\",\n        defval: rose.autoSchemaMarker()+\"::public_1::stream\"\n    });\n\n    rose.whenCloned(function(e) { rose.makeEndpointUniqueWithin(e, 'sources', 'public') });\n    rose.whenExited(function(e) { rose.sourceExit(e) });\n\n    var ep = rose.endp2fqn(rose.param(\"endpoint\"));\n    var epFS = rose.endp2fqn(rose.param(\"endpoint\"), \"raw_fs\");\n%>\n\n<% /* If we're throttling, define the func, else define it as null */\nif(!rose.projectSetting('disableAllThrottlers') && rose.param('addin_throttle_enabled')) {\n    var func = rose.endp2fqn(rose.param(\"endpoint\"), 'throttlefunc');\n    var period = Math.round(1000.0 / parseFloat(rose.projectSetting('projectThrottleRate')));\n    var type = rose.isStreamingEndpoint() ? 'STREAM' : 'TABLE';\n    var ep = rose.endp2fqn(rose.param(\"endpoint\"));\n    var epRaw = rose.endp2fqn(rose.param(\"endpoint\"), 'raw');\n%>\n\n<%= rose.createSqlObj('FUNCTION', func) %>(inputRows CURSOR, throttleScale int)\n    returns TABLE(inputRows.*)\nLANGUAGE JAVA\nPARAMETER STYLE SYSTEM DEFINED JAVA\nNO SQL\nEXTERNAL NAME 'class:com.sqlstream.plugin.timesync.ThrottleStream.throttle';\n\n<% } else {\n\n    var func = null;\n    if(rose.projectSetting('disableAllThrottlers')) { %>\n-- Throttling is disabled globally in the project settings\n    <% } %>\n<% } %>\n\n\n<% switch(rose.param('whichOne')) {  case sources[0]: /* Meetup RSVPs */ %>\n\n<%= rose.createSqlObj('FOREIGN STREAM', epFS) %>\n(\n    \"venue_name\" VARCHAR(64),\n    \"lon\" DOUBLE,\n    \"lat\" DOUBLE,\n    \"venue_id\" BIGINT,\n    \"visibility\" VARCHAR(8),\n    \"response\" VARCHAR(4),\n    \"guests\" INTEGER,\n    \"member_id\" BIGINT,\n    \"photo\" VARCHAR(128),\n    \"member_name\" VARCHAR(32),\n    \"rsvp_id\" BIGINT,\n    \"mtime\" BIGINT,\n    \"event_name\" VARCHAR(128),\n    \"event_id\" VARCHAR(16),\n    \"time\" BIGINT,\n    \"event_url\" VARCHAR(128),\n    \"urlkey\" VARCHAR(64),\n    \"topic_name\" VARCHAR(64),\n    \"group_city\" VARCHAR(16),\n    \"group_country\" VARCHAR(4),\n    \"group_id\" BIGINT,\n    \"group_name\" VARCHAR(64),\n    \"group_lon\" REAL,\n    \"group_urlname\" VARCHAR(64),\n    \"group_lat\" REAL,\n    \"group_state\" VARCHAR(4),\n    \"identifier\" VARCHAR(64),\n    \"identifier0\" VARCHAR(8)\n)\n    SERVER \"WEBSOCKET_SERVER\"\n    OPTIONS (\n        \"PARSER\" 'JSON',\n        \"ROW_PATH\" '$',\n        \"venue_name_PATH\" '$.venue.venue_name',\n        \"lon_PATH\" '$.venue.lon',\n        \"lat_PATH\" '$.venue.lat',\n        \"venue_id_PATH\" '$.venue.venue_id',\n        \"visibility_PATH\" '$.visibility',\n        \"response_PATH\" '$.response',\n        \"guests_PATH\" '$.guests',\n        \"member_id_PATH\" '$.member.member_id',\n        \"photo_PATH\" '$.member.photo',\n        \"member_name_PATH\" '$.member.member_name',\n        \"rsvp_id_PATH\" '$.rsvp_id',\n        \"mtime_PATH\" '$.mtime',\n        \"event_name_PATH\" '$.event.event_name',\n        \"event_id_PATH\" '$.event.event_id',\n        \"time_PATH\" '$.event.time',\n        \"event_url_PATH\" '$.event.event_url',\n        \"urlkey_PATH\" '$.group.group_topics[0:].urlkey',\n        \"topic_name_PATH\" '$.group.group_topics[0:].topic_name',\n        \"group_city_PATH\" '$.group.group_city',\n        \"group_country_PATH\" '$.group.group_country',\n        \"group_id_PATH\" '$.group.group_id',\n        \"group_name_PATH\" '$.group.group_name',\n        \"group_lon_PATH\" '$.group.group_lon',\n        \"group_urlname_PATH\" '$.group.group_urlname',\n        \"group_lat_PATH\" '$.group.group_lat',\n        \"group_state_PATH\" '$.group.group_state',\n        \"identifier_PATH\" '$.member.other_services.facebook.identifier',\n        \"identifier0_PATH\" '$.member.other_services.twitter.identifier',\n\n        \"URL\" 'ws://stream.meetup.com/2/rsvps'\n    );\n\n<%= rose.createSqlObj('STREAM', ep, {dropAlso: [{type: 'FOREIGN STREAM', obj: ep}]}) %>\n(\n    \"venue_name\" VARCHAR(64),\n    \"lon\" DOUBLE,\n    \"lat\" DOUBLE,\n    \"venue_id\" BIGINT,\n    \"visibility\" VARCHAR(8),\n    \"response\" VARCHAR(4),\n    \"guests\" INTEGER,\n    \"member_id\" BIGINT,\n    \"photo\" VARCHAR(128),\n    \"member_name\" VARCHAR(32),\n    \"rsvp_id\" BIGINT,\n    \"mtime\" BIGINT,\n    \"event_name\" VARCHAR(128),\n    \"event_id\" VARCHAR(16),\n    \"time\" BIGINT,\n    \"event_url\" VARCHAR(128),\n    \"urlkey\" VARCHAR(64),\n    \"topic_name\" VARCHAR(64),\n    \"group_city\" VARCHAR(16),\n    \"group_country\" VARCHAR(4),\n    \"group_id\" BIGINT,\n    \"group_name\" VARCHAR(64),\n    \"group_lon\" REAL,\n    \"group_urlname\" VARCHAR(64),\n    \"group_lat\" REAL,\n    \"group_state\" VARCHAR(4),\n    \"identifier\" VARCHAR(64),\n    \"identifier0\" VARCHAR(8)\n);\n\n<% break; case sources[1]: /* NSW bus data in JSON format */ %>\n\n\n<%= rose.createSqlObj('FOREIGN STREAM', epFS) %>\n(\n    \"id\" BIGINT,\n    \"reported_at\" TIMESTAMP,\n    \"lat\" DOUBLE,\n    \"lon\" DOUBLE,\n    \"speed\" TINYINT,\n    \"bearing\" SMALLINT,\n    \"driver_no\" INTEGER,\n    \"prescribed\" BOOLEAN,\n    \"highway\" VARCHAR(8)\n)\n    SERVER \"FILE_SERVER\"\n    OPTIONS (\n        \"PARSER\" 'JSON',\n        \"ROW_PATH\" '$',\n        \"id_PATH\" '$.id',\n        \"reported_at_PATH\" '$.reported_at',\n        \"lat_PATH\" '$.lat',\n        \"lon_PATH\" '$.lon',\n        \"speed_PATH\" '$.speed',\n        \"bearing_PATH\" '$.bearing',\n        \"driver_no_PATH\" '$.driver_no',\n        \"prescribed_PATH\" '$.prescribed',\n        \"highway_PATH\" '$.highway',\n\n        \"DIRECTORY\" '/tmp',\n        \"FILENAME_PATTERN\" 'buses\\.log'\n    );\n\n<%= rose.createSqlObj('STREAM', ep, {dropAlso: [{type: 'FOREIGN STREAM', obj: ep}]}) %>\n(\n    \"id\" BIGINT,\n    \"reported_at\" TIMESTAMP,\n    \"lat\" DOUBLE,\n    \"lon\" DOUBLE,\n    \"speed\" TINYINT,\n    \"bearing\" SMALLINT,\n    \"driver_no\" INTEGER,\n    \"prescribed\" BOOLEAN,\n    \"highway\" VARCHAR(8)\n);\n\n<% break; } %>\n\n<%= rose.createPump(rose.endp2pump(rose.param('endpoint'),{typeHint:'source'}), ep) %>\n<% if(func) { %>\nSELECT STREAM * FROM <%= type %>(<%= func %> (\n      CURSOR(SELECT <%= rose.isStreamingEndpoint() ? 'STREAM ' : '' %> * FROM <%= epFS %>), <%= period %>));\n<% } else { %>\nSELECT STREAM * FROM <%= epFS %>;\n<% } %>\n","external":true,"binary":false,"title":"Public Data","public":true,"doc":"# Public Data\n\nThis source contains several pre-configured source definitions that can be quickly added to a project. \nJust select a source and, optionally, change the name of the stream.\n\n### Meetup RSVPs\n\nA live web feed of the responses to meeting announcements on Meetup. Good for playing around with map data, since it includes\nthe lat/lon of each response.\n\nThis was created by using the External Stream source and configuring it to read from a websocket at ws://stream.meetup.com/2/rsvps\n\n### NSW Bus Data\n\nHistorical data of bus movements in New South Wales. This is a good source of geographical data along with additional columns to play with.\n\nThis source reads from a log file on the SQLstream server. You'll need to start the data flowing into the log file. If you have SQLstream installed\nlocally on a server with a GUI, it will install desktop icons to start and stop the data. If you're using a pre-configured virtual machine, the web interface for the\nVM will include controls to start and stop the data. If you have no GUI or no web interface, you can run the following from the server command line:\n```\n. /etc/sqlstream/environment  # to set SQLSTREAM_HOME\ncd $SQLSTREAM_HOME/demo/data/buses\n./dribbleJson.sh\n```\nThis script starts JSON data flowing at 1 record / second to `/tmp/buses.log`. \n\n## Testing the Source\n\n![](/images/doc/sl_sample_btn.png)\n\nPress this button to attempt to read 5 rows from the source you've defined. \nIf you don't get any data, check the *Last Run* button to see if there \nwere any errors reported when the SQL was executed. If not, check the input parameters \nand other settings to see if you can identify the cause. If you're still \nstumped as to why data isn't flowing, check the trace \nlog (/var/log/sqlstream/Trace.log.0) on your s-Server host for runtime errors.\n\n## Throttling\nThis source can be throttled so that rows will be read at only 1 row per second, regardless of\nhow much data is available. \n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/sinks.sql":{"value":"<%= rose.panel('include_multiple') %>\n<%\n    rose.localSet('showTelemetry', true);\n    rose.localSet('docsDismissed', true);\n    rose.localSet('deferRender', 'looseEndsMode');\n\n    rose.local('subview', 'endpoints');\n    rose.global('destinations', 'chosen');\n\n    rose.include('sinks/ecda.sql');\n    rose.include('sinks/foreignTable.sql');\n    rose.include('sinks/stream_existing.sql');\n    rose.include('sinks/stream_new.sql');\n%>\n","external":true,"binary":false,"title":"Sinks","public":true,"doc":"#StreamLab Sinks\nStreamLab supports outputting rows to streaming and table sinks. Use this page to add sinks to your project, which will\nthen be available via the 'Route to Sink' button in a Guide. When you use one of these sinks in a Guide you'll be able to select\nwhich column in the guide to use for each column in the sink.\n\nYou can also create a sink automatically from the current output view in a Guide, those sinks will show up here too.\n\nTo add a sink, drag it from the left-hand column onto the page. Then click on the new sink to go to that page and fill it in.\n\n* **External Stream** streams out data to an external destination using a number of different media (files, sockets, Kafka, etc.) in CSV, JSON,\nXML or BSON format\n* **External Table** streams rows into a table stored in an external database (create an *external connection* definition first)\n* **Use an Existing SQLstream Stream** outputs to a SQLstream stream that was created elsewhere, perhaps in s-Studio or in another StreamLab project\n* **Create a New SQLstream Stream** allows you to create a new SQLstream stream and output to it\n\n\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/sinks/ecda.sql":{"value":"-- ECDA writing adapter/agent (multi-format)\n<%= rose.panel('params_ecda_destination') %>\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    rose.localSet('docsDismissed', true)\n    rose.localSet('runBtnState', 'untried')\n    rose.localSet('showRunBtn', true);\n    rose.localSet('allowAutogenerate', true);\n\trose.localSet('autoSinksMenuTitle', 'External data stream');\n    rose.localSet('outputHasConnector', true);\n    rose.localSet('trackExecution', true);\n    rose.transientSet('trackExecutionStatus', 'none');\n\n    rose.computedFormat = function() {\n        var f = this.param('format');\n        var selectedAdapter = this.param('addin_ecda_selector');\n\n        switch (selectedAdapter) {\n            case 'mongodb':\n                return 'BSON';\n            case 'snowflake':\n                return 'CSV';\n            default:\n                return f;\n        }\n    };\n\n    rose.param({\n        id: \"ecda_writer_server\",\n        title: \"Server Name\",\n        type: \"string\",\n        defval: rose.plusProjectName('ECDAWriterServer') + '_1',\n        visibleWhen: function() { return false }\n    });\n\n    rose.param({\n        id: \"endpoint\",\n        title: \"Schema.Stream\",\n        tooltip: \"Foreign Stream schema and object name.\",\n        type: \"stream\",\n        defval: rose.autoSchemaMarker()+\"::data_out_1::stream\",\n    });\n\n\n    rose.param({\n        id: \"format\",\n        title: \"Format\",\n        tooltip: \"The format of the output\",\n        type: \"choice\",\n        values: ['CSV','JSON','XML', 'BSON', 'ORC'],\n        defval: 'JSON',\n        visibleWhen: function() {\n            var f = rose.param('addin_ecda_selector');\n            return f !== 'mongodb' && f !== 'snowflake';\n        }\n    });\n\n    rose.param({\n        id: 'columns',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"List of columns to output\",\n        columns: ['column', 'type'],\n        columnTypes: [null, '=sqltype='],\n        columnDefs: ['', 'VARCHAR(1024)'],\n        visibleWhen: function() {\n            var f = rose.computedFormat();\n            return f === 'ORC' || f === 'CSV' || f === 'JSON' || f === 'AVRO' || f === 'ProtoBuf' || f === 'BSON';\n        },\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: 'columnsXML',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"List of columns to output\",\n        columns: ['column', 'type', 'element', 'attribute'],\n        columnTypes: [null, '=sqltype=', null, null],\n        columnDefs: ['', 'VARCHAR(1024)', '', ''],\n        visibleWhen: function() {\n            var f = rose.computedFormat();\n            return f === 'XML';\n        },\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: \"rowSeparator\",\n        title: \"Row Separator\",\n        tooltip: \"Defines the Unicode character used to delimit the rows in your data. You may enter a single ASCII character, an escape sequence like \\\\n or \\\\r, or a hexidecimal character code. The default is \\\\n.\",\n        type: \"string\",\n        defval: \"000A\",\n        invisibleDefault: true,\n        visibleWhen: function() {\n            var f = rose.computedFormat();\n            return f === 'CSV';\n        }\n    });\n\n    rose.param({\n        id: \"separator\",\n        title: \"Column Separator\",\n        tooltip: \"Defines the character used to delimit the columns in your data.\",\n        type: \"string\",\n        defval: \",\",\n        visibleWhen: function() {\n            var f = rose.computedFormat();\n            return f === 'CSV';\n        },\n    });\n\n    rose.param({\n        id: \"quoteChar\",\n        title: \"Quote Character\",\n        tooltip: \"Specifies the character used to quote text that contains the separator character.\",\n        type: \"string\",\n        defval: \"\",\n        invisibleDefault: true,\n        visibleWhen: function() { return rose.computedFormat() === 'CSV' }\n    });\n\n    rose.param({\n        id: 'encoding',\n        title: 'Character Encoding',\n        tooltip: 'Any encoding supported by Java',\n        type: 'choice',\n        values: ['IBM00858',\n'IBM437',\n'IBM775',\n'IBM850',\n'IBM852',\n'IBM855',\n'IBM857',\n'IBM862',\n'IBM866',\n'ISO-8859-1',\n'ISO-8859-2',\n'ISO-8859-4',\n'ISO-8859-5',\n'ISO-8859-7',\n'ISO-8859-9',\n'ISO-8859-13',\n'ISO-8859-15',\n'KOI8-R',\n'KOI8-U',\n'US-ASCII',\n'UTF-8',\n'UTF-16',\n'UTF-16BE',\n'UTF-16LE',\n'UTF-32',\n'UTF-32BE',\n'UTF-32LE',\n'x-UTF-32BE-BOM',\n'x-UTF-32LE-BOM',\n'windows-1250',\n'windows-1251',\n'windows-1252',\n'windows-1253',\n'windows-1254',\n'windows-1257',\n'x-IBM737',\n'x-IBM874',\n'x-UTF-16LE-BOM']\n,\n        defval: 'UTF-8',\n        visibleWhen: function() {\n            var f = rose.computedFormat();\n            return f === 'CSV' || f === 'XML' || f === 'AVRO' || f === 'ProtoBuf';\n        },\n    });\n\n    rose.param({\n        id: \"write_header\",\n        title: \"Write Header?\",\n        type: \"boolean\",\n        defval: false,\n        visibleWhen: function() {\n            var f = rose.computedFormat();\n            return f === 'CSV';\n        },\n    });\n\n    rose.param({\n        id: \"doc_elements\",\n        title: \"Document Elements\",\n        tooltip: \"Highest level element in the XML document\",\n        type: \"string\",\n        defval: \"batch\",\n        visibleWhen: function() {\n            var f = rose.computedFormat();\n            return f === 'XML';\n        },\n    });\n\n    rose.param({\n        id: \"row_elements\",\n        title: \"Row Elements\",\n        tooltip: \"Element to use for the start of a row\",\n        type: \"string\",\n        defval: \"row\",\n        visibleWhen: function() {\n            var f = rose.computedFormat();\n            return f === 'XML';\n        },\n    });\n\n    rose.param({\n        id: \"data_elements\",\n        title: \"Data Elements\",\n        tooltip: \"Element to use for all columns\",\n        type: \"string\",\n        defval: \"data\",\n        visibleWhen: function() {\n            var f = rose.computedFormat();\n            return f === 'XML';\n        },\n    });\n\n    rose.param({\n        id: \"data_attributes\",\n        title: \"Data Attributes\",\n        tooltip: \"Attribute to use for all columns\",\n        type: \"string\",\n        defval: \"value\",\n        visibleWhen: function() {\n            var f = rose.computedFormat();\n            return f === 'XML';\n        },\n    });\n\n    var _isOrcFormat = function() {return rose.computedFormat() === 'ORC'}\n    var _isOrcNotHive = function() {return _isOrcFormat() && ! (rose.param('addin_ecda_file_delivery_mode') === 'hive')}\n\n    const SIZE_CHOICES = [\n            {title: 'bytes', name: 'bytes', value: 'b'},\n            {title: 'kilobytes', name: 'kilobytes', value: 'k'},\n            {title: 'megabytes', name: 'megabytes', value: 'm'},\n            {title: 'gigabytes', name: 'gigabytes', value: 'g'}\n        ]\n\n    const SIZE_VALUES = { 'b':1 , 'k':1024, 'm':1048576, 'g':1073741824 }\n\n    rose.param({\n        id: \"orc_block_padding\",\n        title: \"ORC block padding\",\n        tooltip: \"Sets whether the HDFS blocks are padded to prevent stripes from straddling blocks. Padding improves locality and thus the speed of reading, but costs space\",\n        type: \"boolean\",\n        defval: true,\n        visibleWhen: _isOrcFormat,\n    })\n\n    rose.param({\n        id: \"orc_block_size\",\n        title: \"ORC block size\",\n        tooltip: \"Set the file system block size for the file. For optimal performance, set the block size to be multiple factors of stripe size.\",\n        type: 'valueChoice',\n        defval: '250|m',\n        choiceItems: SIZE_CHOICES,\n        visibleWhen: _isOrcFormat,\n    })\n\n    rose.param({\n        id: \"orc_direct_encoding_columns\",\n        title: \"ORC direct encoded columns\",\n        tooltip: \"Set the comma-separated list of case-sensitive names of columns that should be direct encoded.\",\n        type: \"string\",\n        defval: '',\n        visibleWhen: _isOrcFormat,\n    })\n\n\n    rose.param({\n        id: \"orc_batch_size\",\n        title: \"ORC batch size\",\n        tooltip: \"Number of rows to batch together before issuing an ORC write.\",\n        type: \"integer\",\n        defval: '10000',\n        visibleWhen: _isOrcFormat,\n    })\n\n\n    rose.param({\n        id: \"orc_version\",\n        title: \"ORC format version\",\n        tooltip: \"The ORC format version.\",\n        type: \"choice\",\n        defval: 'V_0_11',\n        values: [ 'V_0_11', 'V_0_12'],\n        visibleWhen: _isOrcFormat,\n    })\n\n    //-- orc.user.metadata_XXX\n    //-- Where XXX is a string. XXX is the name of an application-specific metadata key. \n    //-- Therefore, it should be clear that it lives in a namespace unique to the application. \n    //-- There can be many of these options. \n    //-- The value of each option is a SQL BINARY literal with the leading X' stripped off.\n    rose.param({\n        id: \"orc_user_metadata\",\n        title: \"ORC user metadata\",\n        type: \"tupleList\",\n        defval: JSON.stringify([]),\n        tooltip: \"The metadata to include in generated ORC files\",\n        columns: ['key', 'hexvalue'],\n        columnTypes: [null, null],\n        columnDefs: ['', ''],\n        visibleWhen: _isOrcFormat,\n    })\n\n\n    rose.param({\n        id: \"orc_compress\",\n        title: \"ORC Compression algorithm\",\n        tooltip: \"The ORC compression algorithm to use\",\n        type: \"choice\",\n        defval: 'ZLIB',\n        values: [ 'NONE', 'LZ4', 'LZ0', 'SNAPPY', 'ZLIB', 'ZSTD'],\n        visibleWhen: _isOrcNotHive,\n    })\n\n    rose.param({\n        id: \"orc_compress_size\",\n        title: \"ORC Compression chunk size\",\n        tooltip: \"The ORC compression chunk size\",\n        type: 'valueChoice',\n        defval: '256|k',\n        choiceItems: SIZE_CHOICES,\n        visibleWhen: _isOrcNotHive,\n    })\n\n    rose.param({\n        id: \"orc_stripe_size\",\n        title: \"ORC stripe size\",\n        tooltip: \"The ORC stripe size: size of in-memory write buffer\",\n        type: 'valueChoice',\n        defval: '64|m',\n        choiceItems: SIZE_CHOICES,\n        visibleWhen: _isOrcNotHive,\n    })\n\n    rose.param({\n        id: \"orc_row_index_stride\",\n        title: \"ORC row index stride\",\n        tooltip: \"Number of rows between index entries.\",\n        type: \"integer\",\n        defval: 10000,\n        visibleWhen: _isOrcNotHive,\n    })\n\n    rose.param({\n        id: \"orc_bloom_filter_columns\",\n        title: \"ORC bloom filter columns\",\n        tooltip: \"Column-separated list of bloom filter columns. These are names from the foreign table/stream's column signature.\",\n        type: \"string\",\n        defval: '',\n        visibleWhen: _isOrcNotHive,\n    })\n\n    rose.param({\n        id: \"orc_bloom_filter_fpp\",\n        title: \"ORC bloom filter false-positive probability\",\n        tooltip: \"ORC bloom filter false-positive probability\",\n        type: \"real\",\n        defval: \"0.05\",\n        visibleWhen: _isOrcNotHive,\n    })\n\n\n\n    //-- If this is true, we're inserting an autogenerated sink into a guide\n    rose.param({\n        id: 'inGuide',\n        title: 'In Guide',\n        type: 'boolean',\n        defval: false,\n        visibleWhen: function() { return false }\n    });\n\n\n            /*\n     * Adds a table field of add-on options and defines xtras\n     */\n    rose.param({\n        id: 'xtras',\n        title: 'Additional Options',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"Insert additional options not yet supported by StreamLab\",\n        columns: ['option', 'value'],\n        columnTypes: [null, null],\n        columnDefs: ['', ''],\n    });\n\n    var xtras = rose.tableParam('xtras', function(t) {\n        return '        ' + rose.sqlInColumn(t[0]) + ' ' + rose.sqlLiteral(t[1]) +',' }).join('\\n');\n\n    rose.tableParam('xtras', function(t) { rose.ecdaProp(t[0], t[1]) });\n\n\n\n\n    rose.goal(function(e) {\n        var v = e.getPath('params.endpoint');\n        return !!v;\n    }, \"Schema and stream must be specified.\");\n\n    rose.goal(function(e) {\n        var f = e.getPath('params.format');\n        var v = e.getPath('params.separator');\n        return f !== 'CSV' || !!v;\n    }, \"At least one separator character must be specified.\");\n\n    rose.goal(function(e) {\n        var f = e.getPath('params.format');\n        var t = rose.tableParam('columns');\n        var tx = rose.tableParam('columnsXML');\n        return (f === 'XML' && tx.length > 0) || (f !== 'XML' && t.length > 0);\n    }, \"At least one column must be specified.\");\n\n    rose.goal(function(e) {\n        var rbs = rose.local('runBtnState');\n        return rbs === 'success';\n    }, \"Attempt to create this sink and get a successful result\");\n\n        rose.goal(function(e) {\n        var mb = rose.param(\"addin_ecda_file_max_bytes\");\n        var mt = rose.param(\"addin_ecda_file_max_time\");\n        mt = mt ? parseInt(mt.split(':')[0]) * 1000 : 0;\n\n        return mb > 0 || mt > 0;\n    }, \"The maximum file size must be specified in either bytes or time (both can't be zero)\");\n\n\n        //-- Split hostport params\n    _.each(['amqp09', 'amqp10', 'kafka', 'socket_remote', 'socket_server'], function(hp) {\n        var x = rose.param('addin_ecda_' + hp + '_hostport').split('|');\n        if(x && x.length == 2) {\n            rose['ecda_' + hp + '_host'] = x[0];\n            rose['ecda_' + hp + '_port'] = x[1];\n        } else {\n            rose['ecda_' + hp + '_host'] = '';\n            rose['ecda_' + hp + '_port'] = '';\n        }\n    });\n\n    //-- Split userpass params\n    _.each(['amqp10'], function(hp) {\n        var x = rose.param('addin_ecda_' + hp + '_userpass').split('|');\n        if(x && x.length == 2) {\n            rose['ecda_' + hp + '_userid'] = x[0];\n            rose['ecda_' + hp + '_password'] = x[1];\n        } else {\n            rose['ecda_' + hp + '_userid'] = '';\n            rose['ecda_' + hp + '_password'] = '';\n        }\n    });\n\n    //-- Are we going to be creating a foreign stream or just a stream?\n    rose.ecda_foreign = rose.param('addin_ecda_remote') ? '' : 'FOREIGN';\n\n\n    rose.whenCloned(function(e) {\n        rose.makeEndpointUniqueWithin(e, 'destinations', 'data_out');\n        rose.makeParamUniqueWithin(e, 'ecda_writer_server', 'destinations', rose.plusProjectName('ECDAWriterServer'));\n    });\n\n\n    var options = [];\n    var cols;\n\n    //-- TODO candidate for refactoring into rose API as it can be used in many templates\n    function prop(r,p,v) {\n        r.ecdaProp(p, v);\n        options.push(rose.sqlIdentifier(p) + ' ' + rose.sqlLiteral(v));\n    }\n\n    //-- common function for calculating sizes in b/kb/mb/gb\n    //-- TODO candidate for refactoring into rose API\n\n    function sizeProp(r,p,v) {\n        let sv = v.split('|')\n        let sizeVal = parseInt(sv[0]) * SIZE_VALUES[sv[1]]\n        prop(r, p, sizeVal)\n    }\n    //-- the default column definitions\n    cols = rose.tableParam('columns', function(t) { return '\"' + t[0] + '\" ' + t[1] }).join(',\\n    ');\n\n    switch(rose.computedFormat()) {\n        case 'CSV':\n            prop(rose,'FORMATTER', 'CSV');\n            prop(rose,'CHARACTER_ENCODING', rose.param(\"encoding\"));\n            prop(rose,'QUOTE_CHARACTER', rose.param(\"quoteChar\"));\n            prop(rose,'ROW_SEPARATOR', rose.unicodeParam(\"rowSeparator\"));\n            prop(rose,'SEPARATOR', rose.param(\"separator\"));\n            prop(rose,'WRITE_HEADER',  rose.param(\"write_header\") ? 'true' : 'false');\n\n            break;\n\n        case 'BSON':\n            prop(rose,'FORMATTER', 'BSON');\n\n            break;\n\n        case 'JSON':\n            prop(rose,'FORMATTER', 'JSON');\n\n            break;\n\n        case 'XML':\n            prop(rose,'FORMATTER', 'XML');\n            prop(rose,'CHARACTER_ENCODING', rose.param(\"encoding\"));\n            prop(rose,'DOC_ELEMENTS', rose.param(\"doc_elements\"));\n            prop(rose,'ROW_ELEMENTS', rose.param(\"row_elements\"));\n            prop(rose,'DATA_ELEMENTS', rose.param(\"data_elements\"));\n            prop(rose,'DATA_ATTRIBUTES', rose.param(\"data_attributes\"));\n\n            //-- non-standard column definitions\n            cols = rose.tableParam('columnsXML', function(t) {\n                if(t[2]) prop(rose, t[0].toUpperCase() + '_ELEMENTS', t[2]);\n                if(t[3]) prop(rose, t[0].toUpperCase() + '_ATTRIBUTES', t[3]);\n\n                return '\"' + t[0] + '\" ' + t[1];\n            }).join(',\\n    ');\n\n            break;\n\n        case 'ORC':\n            prop(rose,'FORMATTER', 'ORC')\n            prop(rose,'orc.block.padding', rose.param('orc_block_padding'))\n            sizeProp(rose,'orc.block.size', rose.param('orc_block_size'))\n            prop(rose,'orc.direct.encoding.columns', rose.param('orc_direct_encoding_columns'))\n            prop(rose,'orc.batch.size', rose.param('orc_batch_size'))\n            prop(rose,'orc.version', rose.param('orc_version'))\n\n            rose.tableParam('orc_user_metadata', function(t) {\n                prop(rose, 'orc.user.metadata_' + t[0], t[1])\n            })\n\n            //-- TODO following props don't apply for hive delivery mode (they will be introspected)\n            if (_isOrcNotHive()) {\n                prop(rose,'orc.compress', rose.param('orc_compress'))\n                sizeProp(rose,'orc.compress.size', rose.param('orc_compress_size'))\n                sizeProp(rose,'orc.stripe.size', rose.param('orc_stripe_size'))\n                prop(rose,'orc.row.index.stride', rose.param('orc_row_index_stride'))\n                prop(rose,'orc.bloom.filter.columns', rose.param('orc_bloom_filter_columns'))\n                prop(rose,'orc.bloom.filter.fpp', rose.param('orc_bloom_filter_fpp'))\n            }\n\n            break;\n\n    }\n\n    rose.ecdaColumnList = cols ? '(\\n    ' + cols + '\\n)' : '';\n\n    if(options.length > 0)\n        options = options.join(',\\n        ') + ',';\n    else\n        options = '';\n\n    rose.ecdaProp('SCHEMA_NAME', rose.endp2schema(rose.param(\"endpoint\")));\nrose.ecdaProp('TABLE_NAME', rose.endp2sqlobj(rose.param(\"endpoint\")));\nrose.ecdaProp('ROWTYPE', 'RecordType(' +  rose.tableParam('columns', function(t) { return t[1] + ' \"' + t[0] + '\"' }).join(', ') + ')');\n\nrose.ecdaProperties('writer', rose.param('addin_ecda_selector'));\n\n\n    rose.local('destination_description', 'Route to ' + rose._ecdaDesc + ' as ' + rose.computedFormat());\n\n    var ep = rose.endp2fqn(rose.param(\"endpoint\"));\n    var epFS = rose.endp2fqn(rose.param(\"endpoint\"), \"fs\");\n    var epPump = rose.endp2fqn(rose.param(\"endpoint\"), \"fs_pump\");\n    rose.epPumpFQN = rose.endp2fqn(rose.param(\"endpoint\"), \"fs_pump\", {catalog: true, quote: false}); //-- making this visible in ecda_*_writer.sql\n%>\n\n<%= rose.drop('DROP PUMP ' + rose.endp2pump(rose.param('endpoint'),{typeHint:'sink'})) %>\n\n\n<%= rose.createSqlObj('SCHEMA', rose.sqlIdentifier(rose.endp2schema(rose.param(\"endpoint\"))), {wasCoR: true}) %>;\n<% if(!rose.param('addin_ecda_remote')) { %>\n\n<%= rose.ecdaDefinition('writer', rose.param('addin_ecda_selector')) %>\n<% } %>\n\n\n<% if(rose.param('addin_ecda_remote')) { /* remote, just define native stream that will be read by remote agent */ %>\n\n<%= rose.createSqlObj('STREAM', ep, {dropAlso: [{type: 'FOREIGN STREAM', obj: ep}]}) %>\n<%= rose.ecdaColumnList %>;\n\n<% } else { /* local, define foreign stream, native stream, and pump */ %>\n\n<%= rose.createSqlObj('FOREIGN STREAM', epFS) %>\n<%= rose.ecdaColumnList %>\n    <%= rose.ecdaServer('writer', rose.param('addin_ecda_selector')) %>\n\nOPTIONS (\n    <%= options %>\n    <%= xtras %>\n        <%= rose.ecdaOptions('writer', rose.param('addin_ecda_selector')) %>\n\n    );\n<% } %>\n\n<%= rose.createSqlObj('STREAM', ep) %>\n<%= rose.ecdaColumnList %>;\n\n<%= rose.createPump(epPump, epFS) %>\nSELECT STREAM * FROM <%= ep %>;\n\n<% rose.defineConnector(function(rose) { var __p = '';  %>\n-- Define the pump\n<%\n    /* Supports three insModes: merge and insert require a mapModel, all just pumps all columns */\n    var opts = {typeHint:'sink'}\n    // when template is called in a loop, pumps must have unique names\n    var pumpIndex = rose.local('pumpIndex')\n    if (pumpIndex) opts.suffix = pumpIndex\n    var pump = rose.endp2pump(rose.param('endpoint'), opts)\n    var external_table = rose.endp2fqn(rose.param('endpoint'))\n    var insMode = rose.local('insMode')\n\n%>\n<% switch(insMode) { case 'Merge':  %>\n\n<%= rose.createPump(pump, external_table, {merge: true}) %> AS \"sink\"\n    USING (SELECT <%= rose.local('stream') %> <%= rose.sinkMap2fromListWithCasts(rose.local('mapModel')) %> FROM <%= rose.guideInput() %>) AS \"input\"\n    ON <%= rose.sinkMap2onExpr(rose.local('mapModel')) %>\nWHEN MATCHED THEN\n    UPDATE SET <%= rose.sinkMap2update(rose.local('mapModel')) %>\nWHEN NOT MATCHED THEN\n    INSERT <%= rose.sinkMap2intoList(rose.local('mapModel')) %>\n    VALUES (<%= rose.sinkMap2fromList(rose.local('mapModel')) %>);\n\n<% break; case 'Insert': %>\n\n<%= rose.createPump(pump, external_table, {merge: false}) %>\n    <%= rose.sinkMap2intoList(rose.local('mapModel') ,'columns') %>\nSELECT <%= rose.local('stream') %> <%= rose.sinkMap2fromListWithCasts(rose.local('mapModel'), 'columns') %> <% /* if this causes problems, use sinkMap2fromList instead */ %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% break; default: %>\n\n<%= rose.createPump(pump, external_table, {merge: false}) %>\nSELECT <%= rose.local('stream') %> *\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% break; } %>\n\n<%      return __p; }); %>\n","external":true,"binary":false,"title":"External Stream","public":false,"doc":"# Streaming Data to an External Sink\nThis sink writes rows in the selected format to an output.\n\nStart by specifying the s-Server *schema* and *stream* names for the sink's stream,\nor you can use the values already filled in.\n\nSelect a format from the menu: CSV, JSON, or XML. Then\ndefine the list of *Columns* and their SQL data types.\n\n## CSV\nThis format writes CSV (Comma-Separated Values) rows.\nThe character used to separate columns defaults to comma and can be changed via the *Column Separator(s)* field.\n\nYou can also change the *Character Encoding* and decide if you want a CSV header\ncontaining the column names to be written.\n\n## JSON\nThis format writes JSON (JavaScript Object Notation) objects.\nEach column name will become a property name for the JSON objects that are output.\n\n\n## XML\nThis format writes XML (eXtensible Markup Language) documents.\nThe format of the XML documents that will be output is controlled by the text fields\nbelow the *Character Encoding*:\n\n* *Document Elements* is a list of elements, separated by slashes, to use as the root of the XML document\n* *Row Elements* is a list of elements, separated by slashes, to add for each row output to the document\n* *Data Elements* is a list of elements, separated by slashes, to add for each value output to the document\n* *Data Attributes* is the name of an attribute to add to the output\n\nEach value is written as an XML element or an XML attribute, but not both. If *Data Elements* and\n*Data Attributes* are defined, *Data Elements* will be used. If neither are specified, the column\nname will be used as the element name.\n\nWhen defining the columns in the *Columns* table, you can specify the data element or data attribute\nfor each column individually.\n\nFor more information on writing to XML outputs, see\n<a href=\"https://docs.sqlstream.com/integrating-sqlstream/formatting-data/xml/\" target=\"\\_blank\">Formatting Data as XML</a> in Guavus SQLstream documentation.\n\n### Testing\n\nYou can test the configuration using the *Execute* button, which issues SQL commands\nto s-Server to create the sink. The *Last run* button shows the log from the last execution.\nNo data will be written to the sink until you use it as the output of a *guide*.\n\n\n### Selecting an Output\n![](/images/doc/ecda-output.png)\nThis sink uses the ECDA (Extensible Common Data Adapter) framework to support writing to a\nnumber of different output media. Use the output selector to choose an output, and fill in the parameters\nto connect to that source. For more information on the options for ECDA outputs, see\n<a href=\"https://docs.sqlstream.com/integrating-sqlstream/writing-data/\" target=\"\\_blank\">Writing Data out of s-Server</a> in Guavus SQLstream documentation.\n\n### Local vs. Remote\n![](/images/doc/ecda-local.png)\nIn this mode the output is accessed directly from s-Server. Files are local to the s-Server host,\nand sockets and other network connections are relative to the s-Server host. When this mode\nis enabled, StreamLab submits your configuration for this sink directly to your instance of s-Server.\n\n![](/images/doc/ecda-remote.png)\nIn this mode you can access sinks via a host running the ECDA Agent (see\n<a href=\"https://docs.sqlstream.com/integrating-sqlstream/ecda-agent/\" target=\"\\_blank\">Using the ECD Agent</a>) in Guavus SQLstream documentation.\n\nThe agent is a Java app running on a host other than the s-Server host, configured to read data from\nyour instance of s-Server. When this mode is enabled, StreamLab configures the stream that the remote agent\nwill read from. To configure the remote agent, use the ![](/images/doc/ecda-export.png) button\nto get the contents of the properties file, and paste this into a new file on the remote agent server (for\nexample, *mysource.props*). From a command shell on the remote host, run\n\n> % $SQLSTREAM_HOME/../clienttools/EcdaAgent/commondataagent.sh --output --props mysource.props\n\nEverything you've specified here to configure the sink will now apply within the remote agent, so\nfile names will be local to that host, and sockets and other network connections will be relative to that host.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/sinks/foreignTable.sql":{"value":"-- External table\n<%= rose.panel('params_destination') %>\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n    rose.localSet('docsDismissed', true);\n    rose.localSet('showAutoFillBtn', true);\n    rose.localSet('showRunBtn', true);\n    rose.localSet('runBtnState', 'untried');\n    rose.localSet('outputHasConnector', true);\n    rose.localSet('trackExecution', true);\n    rose.transientSet('trackExecutionStatus', 'none');\n\n\n    rose.param({\n        id: \"endpoint\",\n        title: \"Schema.Table\",\n        tooltip: \"s-Server schema and object name.\",\n        type: \"table\",\n        defval: rose.autoSchemaMarker()+\"::external_table_out_1::table\",\n    });\n\n    rose.param({\n        id: 'serverName',\n        title: 'External connection',\n        tooltip: \"Select from the connections defined in the External Connections top-level page\",\n        type: \"choice\",\n        valuesFunc: function() { return rose.serverList() }\n    });\n\n    rose.param({\n        id: 'fschema',\n        title: 'External schema',\n        tooltip: 'Schema in external database',\n        type: 'string',\n        defval: 'public',\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: 'ftable',\n        title: 'External table',\n        tooltip: 'Table in external database',\n        type: 'string',\n        defval: '',\n        valueIsRequired: true\n    });\n\n    rose.param({\n        id: 'columns',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"List of columns to output\",\n        columns: ['column', 'type'],\n        columnTypes: [null, '=sqltype='],\n        columnDefs: ['', 'VARCHAR(1024)'],\n        valueIsRequired: true\n    });\n\n\n    rose.param({\n        id: 'transTimeLimit',\n        title: 'Transaction time limit',\n        tooltip: 'Row time limit before committing transaction, in milliseconds. If 0, only the row limit applies.',\n        type: 'integer',\n        defval: 1000\n    });\n\n\n    rose.param({\n        id: 'transRowLimit',\n        title: 'Transaction row limit',\n        tooltip: 'Number of rows sent before committing transaction. If 0, only the time limit applies.',\n        type: 'integer',\n        defval: 0\n    });\n\n        /*\n     * Adds a table field of add-on options and defines xtras\n     */\n    rose.param({\n        id: 'xtras',\n        title: 'Additional Options',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"Insert additional options not yet supported by StreamLab\",\n        columns: ['option', 'value'],\n        columnTypes: [null, null],\n        columnDefs: ['', ''],\n    });\n\n    var xtras = rose.tableParam('xtras', function(t) {\n        return '        ' + rose.sqlInColumn(t[0]) + ' ' + rose.sqlLiteral(t[1]) +',' }).join('\\n');\n\n\n    rose.whenCloned(function(e) { rose.makeEndpointUniqueWithin(e, 'destinations', 'external_table_out', 'table') });\n\n    var cols = rose.tableParam('columns', function(t) { return '\"' + t[0] + '\" ' + t[1] }).join(',\\n    ');\n    var colList = cols ? '(' + cols + ')' : '';\n\n    rose.local('destination_description', (rose.local('insMode') || 'Insert') +  ' to external table ' +\n        rose.param('fschema') + '.' + rose.param('ftable') + ' on ' +\n        rose.plusProjectName(rose.param('serverName')));\n\n    //-- causes dialog_guide_output controller to generate a sink first,\n    //-- before this node is output. This is a KLUDGE that shouldn't be\n    //-- needed in the future.\n    rose.local('generate_sink_first', true);\n%>\n\n<%= rose.createSqlObj('SCHEMA', rose.sqlIdentifier(rose.endp2schema(rose.param(\"endpoint\"))), {wasCoR: true}) %>;\n\n<%= rose.drop('DROP PUMP ' + rose.endp2pump(rose.param('endpoint'),{typeHint:'sink'})) %>\n\n\n<%= rose.createSqlObj('FOREIGN TABLE', rose.endp2fqn(rose.param(\"endpoint\"))) %> <%= colList %>\nSERVER <%= rose.sqlIdentifier(rose.plusProjectName(rose.param('serverName'))) %>\nOPTIONS (\n    \"SCHEMA_NAME\" <%= rose.literal(rose.param('fschema')) %>,\n    \"TABLE_NAME\" <%= rose.literal(rose.param('ftable')) %>,\n<%= xtras %>\n    \"TRANSACTION_ROW_LIMIT\" <%= rose.sqlLiteral(rose.param('transRowLimit')) %>,\n    \"TRANSACTION_ROWTIME_LIMIT\" <%= rose.sqlLiteral(rose.param('transTimeLimit')) %>\n);\n\n<% rose.defineConnector(function(rose) { var __p = '';  %>\n-- Define the pump\n<%\n    /* Supports three insModes: merge and insert require a mapModel, all just pumps all columns */\n    var opts = {typeHint:'sink'}\n    // when template is called in a loop, pumps must have unique names\n    var pumpIndex = rose.local('pumpIndex')\n    if (pumpIndex) opts.suffix = pumpIndex\n    var pump = rose.endp2pump(rose.param('endpoint'), opts)\n    var external_table = rose.endp2fqn(rose.param('endpoint'))\n    var insMode = rose.local('insMode')\n\n%>\n<% switch(insMode) { case 'Merge':  %>\n\n<%= rose.createPump(pump, external_table, {merge: true}) %> AS \"sink\"\n    USING (SELECT <%= rose.local('stream') %> <%= rose.sinkMap2fromListWithCasts(rose.local('mapModel')) %> FROM <%= rose.guideInput() %>) AS \"input\"\n    ON <%= rose.sinkMap2onExpr(rose.local('mapModel')) %>\nWHEN MATCHED THEN\n    UPDATE SET <%= rose.sinkMap2update(rose.local('mapModel')) %>\nWHEN NOT MATCHED THEN\n    INSERT <%= rose.sinkMap2intoList(rose.local('mapModel')) %>\n    VALUES (<%= rose.sinkMap2fromList(rose.local('mapModel')) %>);\n\n<% break; case 'Insert': %>\n\n<%= rose.createPump(pump, external_table, {merge: false}) %>\n    <%= rose.sinkMap2intoList(rose.local('mapModel') ,'columns') %>\nSELECT <%= rose.local('stream') %> <%= rose.sinkMap2fromListWithCasts(rose.local('mapModel'), 'columns') %> <% /* if this causes problems, use sinkMap2fromList instead */ %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% break; default: %>\n\n<%= rose.createPump(pump, external_table, {merge: false}) %>\nSELECT <%= rose.local('stream') %> *\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% break; } %>\n\n<%      return __p; }); %>\n","external":true,"binary":false,"title":"External Table","public":true,"doc":"# External Table Sink\n\nThis sink inserts into a table in a database server external to s-Server. You\nshould have already defined one or more connections to external servers in\nthe *External Connections* page (navigate up to the top page to get there).\nYou need to define the connection first because you can use the same connection\nto access multiple external tables, both as sources and sinks.\n\nStart by selecting the s-Server **stream** and **table** and select the external connection. Then\nspecify the **external schema** and **external table** names.\nIf the external table already exists and you've specified the connection parameters correctly,\nyou should be able to automatically fill the list of columns using the **Discover columns**\nbutton. You may also enter the columns by hand.\nThe column names and types should match what's defined in the external database, but you\ndon't have to include all of the columns.\nThe **batch row limit** specifies how many rows are allowed to accumulate before they\nare written to the external database.\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/sinks/stream_existing.sql":{"value":"-- sink for an existing stream\n<%= rose.panel('params_destination') %>\n<%\n    rose.localSet('docsDismissed', true);\n    rose.localSet('showAutoFillBtn', true);\n    rose.localSet('showRunBtn', true);\n    rose.localSet('outputHasConnector', true);\n    rose.localSet('trackExecution', true);\n    rose.transientSet('trackExecutionStatus', 'none');\n\n    rose.param({\n        id: \"endpoint\",\n        title: \"Schema.Stream\",\n        tooltip: \"Stream schema and object name.\",\n        type: \"stream\",\n        preexistingOnly: true\n    });\n\n    /*\n    rose.param({\n        id: \"include_rowtime\",\n        title: \"Include ROWTIME?\",\n        type: \"boolean\",\n        defval: false,\n        tooltip: \"Whether or not to include the ROWTIME column in the output stream\"\n    });\n    */\n\n    rose.param({\n        id: 'columns',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"List of columns to output\",\n        columns: ['column', 'type'],\n        columnTypes: [null, '=sqltype='],\n        columnDefs: ['', 'VARCHAR(1024)'],\n        valueIsRequired: true\n    });\n\n    rose.local('destination_description', 'Route to existing stream ' + rose.endp2nice_fqn(rose.param(\"endpoint\")));\n\n    var ep = rose.param('endpoint');\n%>\n\n<% rose.defineConnector(function(rose) { var __p = '';  %>\n-- Define the pump\n<%\n    /* Supports three insModes: merge and insert require a mapModel, all just pumps all columns */\n    var opts = {typeHint:'sink'}\n    // when template is called in a loop, pumps must have unique names\n    var pumpIndex = rose.local('pumpIndex')\n    if (pumpIndex) opts.suffix = pumpIndex\n    var pump = rose.endp2pump(rose.param('endpoint'), opts)\n    var external_table = rose.endp2fqn(rose.param('endpoint'))\n    var insMode = rose.local('insMode')\n\n%>\n<% switch(insMode) { case 'Merge':  %>\n\n<%= rose.createPump(pump, external_table, {merge: true}) %> AS \"sink\"\n    USING (SELECT <%= rose.local('stream') %> <%= rose.sinkMap2fromListWithCasts(rose.local('mapModel')) %> FROM <%= rose.guideInput() %>) AS \"input\"\n    ON <%= rose.sinkMap2onExpr(rose.local('mapModel')) %>\nWHEN MATCHED THEN\n    UPDATE SET <%= rose.sinkMap2update(rose.local('mapModel')) %>\nWHEN NOT MATCHED THEN\n    INSERT <%= rose.sinkMap2intoList(rose.local('mapModel')) %>\n    VALUES (<%= rose.sinkMap2fromList(rose.local('mapModel')) %>);\n\n<% break; case 'Insert': %>\n\n<%= rose.createPump(pump, external_table, {merge: false}) %>\n    <%= rose.sinkMap2intoList(rose.local('mapModel') ,'columns') %>\nSELECT <%= rose.local('stream') %> <%= rose.sinkMap2fromListWithCasts(rose.local('mapModel'), 'columns') %> <% /* if this causes problems, use sinkMap2fromList instead */ %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% break; default: %>\n\n<%= rose.createPump(pump, external_table, {merge: false}) %>\nSELECT <%= rose.local('stream') %> *\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% break; } %>\n\n<%      return __p; }); %>\n","external":true,"binary":false,"title":"Use an Existing SQLstream Stream","public":true,"doc":"# Stream Sink\n\nThis sink connects to an existing stream in s-Server.\nStart by selecting the s-Server **stream** and **stream** names, then \nuse the 'Discover columns' button to fill in the list of columns and their SQL types.\n\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/sinks/stream_new.sql":{"value":"-- create a new stream as a sink\n<%= rose.panel('params_destination') %>\n<%\n    rose.localSet('docsDismissed', true);\n    rose.localSet('allowAutogenerate', true);\n    rose.localSet('autoSinksMenuDefault', true);\n\trose.localSet('autoSinkRemoveRuntime', true);\n\trose.localSet('autoSinksMenuTitle', 'Internal stream');\n    rose.localSet('runBtnState', 'untried');\n    rose.localSet('showRunBtn', true);\n    rose.localSet('outputHasConnector', true);\n    rose.localSet('trackExecution', true);\n    rose.transientSet('trackExecutionStatus', 'none');\n\n    rose.param({\n        id: \"endpoint\",\n        title: \"Schema.Stream\",\n        tooltip: \"Stream schema and object name.\",\n        type: \"stream\",\n        defval: rose.autoSchemaMarker()+\"::sink_1::stream\",\n    });\n\n    rose.param({\n        id: 'columns',\n        title: 'Columns',\n        type: 'tupleList',\n        defval: JSON.stringify([]),\n        tooltip: \"List of columns to output\",\n        columns: ['column', 'type'],\n        columnTypes: [null, '=sqltype='],\n        columnDefs: ['', 'VARCHAR(1024)'],\n        valueIsRequired: true\n    });\n\n    rose.whenCloned(function(e) { rose.makeEndpointUniqueWithin(e, 'destinations', 'sink') });\n\n    rose.local('destination_description', 'Route to stream ' + rose.endp2nice_fqn(rose.param(\"endpoint\")));\n\n    var ep = rose.param('endpoint');\n%>\n\n<%= rose.createSqlObj('SCHEMA', rose.sqlIdentifier(rose.endp2schema(rose.param(\"endpoint\"))), {wasCoR: true}) %>;\n\n<%= rose.createSqlObj('STREAM', rose.endp2fqn(rose.param(\"endpoint\"))) %>(\n    <%= rose.tableParam('columns', function(t) { return '\"' + t[0] + '\" ' + t[1] }).join(',\\n    ') %>\n);\n\n<% rose.defineConnector(function(rose) { var __p = '';  %>\n-- Define the pump\n<%\n    /* Supports three insModes: merge and insert require a mapModel, all just pumps all columns */\n    var opts = {typeHint:'sink'}\n    // when template is called in a loop, pumps must have unique names\n    var pumpIndex = rose.local('pumpIndex')\n    if (pumpIndex) opts.suffix = pumpIndex\n    var pump = rose.endp2pump(rose.param('endpoint'), opts)\n    var external_table = rose.endp2fqn(rose.param('endpoint'))\n    var insMode = rose.local('insMode')\n\n%>\n<% switch(insMode) { case 'Merge':  %>\n\n<%= rose.createPump(pump, external_table, {merge: true}) %> AS \"sink\"\n    USING (SELECT <%= rose.local('stream') %> <%= rose.sinkMap2fromListWithCasts(rose.local('mapModel')) %> FROM <%= rose.guideInput() %>) AS \"input\"\n    ON <%= rose.sinkMap2onExpr(rose.local('mapModel')) %>\nWHEN MATCHED THEN\n    UPDATE SET <%= rose.sinkMap2update(rose.local('mapModel')) %>\nWHEN NOT MATCHED THEN\n    INSERT <%= rose.sinkMap2intoList(rose.local('mapModel')) %>\n    VALUES (<%= rose.sinkMap2fromList(rose.local('mapModel')) %>);\n\n<% break; case 'Insert': %>\n\n<%= rose.createPump(pump, external_table, {merge: false}) %>\n    <%= rose.sinkMap2intoList(rose.local('mapModel') ,'columns') %>\nSELECT <%= rose.local('stream') %> <%= rose.sinkMap2fromListWithCasts(rose.local('mapModel'), 'columns') %> <% /* if this causes problems, use sinkMap2fromList instead */ %>\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% break; default: %>\n\n<%= rose.createPump(pump, external_table, {merge: false}) %>\nSELECT <%= rose.local('stream') %> *\n    FROM <%= rose.guideInput() %> AS \"input\";\n\n<% break; } %>\n\n<%      return __p; }); %>\n","external":true,"binary":false,"title":"Create a New SQLstream Stream","public":true,"doc":"# Stream Sink\n\nThis sink creates a new stream internal to s-Server that serves as a sink.\nStart by selecting the s-Server **stream** and **stream** names, then \nfill in the list of columns and their SQL types.\n\nYou can test the configuration using the **Execute** button, which issues SQL commands\nto s-Server to create the sink. The **Last run** button shows the log from the last execution.\nNo data will be written to the sink until you use it as the output of a *guide*.\n\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides.sql":{"value":"<%= rose.panel('include_multiple') %>\n<%\n    rose.localSet('docsDismissed', true);\n    rose.local('subview', 'guides');\n    rose.local('layout', 'guide_tree');\n\n    rose.global('guides', 'chosen');\n\n    rose.include('guides/guide.sql');\n\n    rose.goal(function(e) {\n        var c = e.getPath('chosen');\n        return c && c.length > 0;\n    }, \"Create one or more pipeline guides\");\n%>\n","external":true,"binary":false,"title":"Pipeline Guides","public":true,"doc":"##Guides Overview\nCreate a new guide by dropping the box on the left on the center of the page. Then click on the new guide, you'll be asked to select a source when the guide starts.","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1},"/sqlstream/StreamLab_App_2_0_0/sql-templates/guides/guide.sql":{"value":"<%= rose.panel('guide') %>\n<%  /*** WARNING! This template uses server-side templating, do not write from within StreamLab!!! ***/\n\n\n    rose.localSet('docsDismissed', true);\n    rose.whenCloned(function(e) { rose.makeLocalUniqueWithin(e, 'auto_name', 'guides', 'pipeline') });\n    rose.whenExited(function(e) { rose.guideExit(e) });\n\n    if(false) {      // new tab organization\n    rose.include(['Ingest'],'guides/operations/drop.sql')\n    rose.include(['Ingest'],'guides/operations/filter.sql')\n    rose.include(['Ingest'],'guides/operations/rename.sql')\n    rose.include(['Ingest'],'guides/operations/renameBulk.sql')\n    rose.include(['Ingest'],'guides/operations/sortColumns.sql')\n    rose.include(['Ingest'],'guides/operations/throttle.sql')\n    rose.include(['Ingest'],'guides/operations/parseTimestamp.sql')\n    rose.include(['Ingest'],'guides/operations/timesort.sql')\n\n    rose.include(['Discover'],'guides/operations/parseCDR.sql')\n    rose.include(['Discover'],'guides/operations/parseJSON.sql')\n    //rose.include(['Discover'],'guides/operations/parseXML.sql')\n    rose.include(['Discover'],'guides/operations/w3c.sql')\n    rose.include(['Discover'],'guides/operations/regex.sql')\n    rose.include(['Discover'],'guides/operations/split.sql')\n\n    rose.include(['Wrangle'],'guides/operations/calculate.sql')\n    rose.include(['Wrangle'],'guides/operations/cast.sql')\n    rose.include(['Wrangle'],'guides/operations/castBulk.sql')\n    rose.include(['Wrangle'],'guides/operations/categorize.sql')\n    rose.include(['Wrangle'],'guides/operations/duplicateColumns.sql')\n    rose.include(['Wrangle'],'guides/operations/extract.sql')\n    rose.include(['Wrangle'],'guides/operations/filter.sql')\n    rose.include(['Wrangle'],'guides/operations/merge.sql')\n    rose.include(['Wrangle'],'guides/operations/newColumn.sql')\n    rose.include(['Wrangle'],'guides/operations/useNull.sql')\n\n    rose.include(['Enrich'],'guides/operations/addCount.sql')\n    rose.include(['Enrich'],'guides/operations/callUDX.sql')\n    rose.include(['Enrich'],'guides/operations/distinct.sql')\n    rose.include(['Enrich'],'guides/operations/filter.sql')\n    rose.include(['Enrich'],'guides/operations/geoIP.sql')\n    rose.include(['Enrich'],'guides/operations/group_rank.sql')\n    rose.include(['Enrich'],'guides/operations/join.sql')\n    rose.include(['Enrich'],'guides/operations/replaceNull.sql')\n    rose.include(['Enrich'],'guides/operations/parseTimestamp.sql')\n    rose.include(['Enrich'],'guides/operations/injectSQLview.sql')\n    rose.include(['Enrich'],'guides/operations/injectSQL.sql')\n     \n    rose.include(['Analyze'],'guides/operations/aggregate.sql')\n    rose.include(['Analyze'],'guides/operations/runningAverage.sql')\n    rose.include(['Analyze'],'guides/operations/categorize.sql')\n    rose.include(['Analyze'],'guides/operations/filter.sql')\n    rose.include(['Analyze'],'guides/operations/fold.sql')\n    rose.include(['Analyze'],'guides/operations/timesort.sql')\n    rose.include(['Analyze'],'guides/operations/unfold.sql')\n\n    rose.include(['Visualize'],'guides/operations/dash-multipanel.sql')\n    rose.include(['Visualize'],'guides/operations/dash-chartjs-bars.sql')\n    rose.include(['Visualize'],'guides/operations/dash-bars-over-time.sql')\n    rose.include(['Visualize'],'guides/operations/dash-bars-over-key.sql')\n    rose.include(['Visualize'],'guides/operations/dash-bars-and-lines.sql')\n    rose.include(['Visualize'],'guides/operations/dash-bollinger.sql')\n    rose.include(['Visualize'],'guides/operations/dash-map-and-table.sql')\n    rose.include(['Visualize'],'guides/operations/dash-timeseries.sql')\n} else {        // old tab organization\n    rose.include(['Basic'],'guides/operations/addCount.sql')\n    rose.include(['Basic'],'guides/operations/cast.sql')\n    rose.include(['Basic'],'guides/operations/castBulk.sql')\n    rose.include(['Basic'],'guides/operations/drop.sql')\n    rose.include(['Basic'],'guides/operations/duplicateColumns.sql')\n    rose.include(['Basic'],'guides/operations/extract.sql')\n    rose.include(['Basic'],'guides/operations/filter.sql')\n    rose.include(['Basic'],'guides/operations/merge.sql')\n    rose.include(['Basic'],'guides/operations/rename.sql')\n    rose.include(['Basic'],'guides/operations/renameBulk.sql')\n    rose.include(['Basic'],'guides/operations/replaceNull.sql')\n    rose.include(['Basic'],'guides/operations/split.sql')\n    rose.include(['Basic'],'guides/operations/throttle.sql')\n    rose.include(['Basic'],'guides/operations/parseTimestamp.sql')\n    rose.include(['Basic'],'guides/operations/useNull.sql')\n     \n    //rose.include(['Parsers'],'guides/operations/parseXML.sql')\n    rose.include(['Parsers'],'guides/operations/parseCDR.sql')\n    rose.include(['Parsers'],'guides/operations/parseJSON.sql')\n    rose.include(['Parsers'],'guides/operations/w3c.sql')\n    rose.include(['Parsers'],'guides/operations/regex.sql')\n    rose.include(['Parsers'],'guides/operations/split.sql')\n    rose.include(['Parsers'],'guides/operations/parseTimestamp.sql')\n\n    rose.include(['Pivot'],'guides/operations/unfold.sql')\n    rose.include(['Pivot'],'guides/operations/fold.sql')\n    rose.include(['Pivot'],'guides/operations/sortColumns.sql')\n\n    rose.include(['Analytics'],'guides/operations/aggregate.sql')\n    rose.include(['Analytics'],'guides/operations/runningAverage.sql')\n    rose.include(['Analytics'],'guides/operations/calculate.sql')\n    rose.include(['Analytics'],'guides/operations/categorize.sql')\n    rose.include(['Analytics'],'guides/operations/distinct.sql')\n    rose.include(['Analytics'],'guides/operations/geoIP.sql')\n    rose.include(['Analytics'],'guides/operations/group_rank.sql')\n    rose.include(['Analytics'],'guides/operations/join.sql')\n    rose.include(['Analytics'],'guides/operations/timesort.sql')\n    rose.include(['Analytics'],'guides/operations/newColumn.sql')\n\n    rose.include(['Advanced'],'guides/operations/callUDX.sql')\n    rose.include(['Advanced'],'guides/operations/injectSQLview.sql')\n    rose.include(['Advanced'],'guides/operations/injectSQL.sql')\n\n    rose.include(['Dashboards'],'guides/operations/dash-multipanel.sql')\n    rose.include(['Dashboards'],'guides/operations/dash-chartjs-bars.sql')\n    rose.include(['Dashboards'],'guides/operations/dash-bars-over-time.sql')\n    rose.include(['Dashboards'],'guides/operations/dash-bars-over-key.sql')\n    rose.include(['Dashboards'],'guides/operations/dash-bars-and-lines.sql')\n    rose.include(['Dashboards'],'guides/operations/dash-bollinger.sql')\n    rose.include(['Dashboards'],'guides/operations/dash-map-and-table.sql')\n    rose.include(['Dashboards'],'guides/operations/dash-timeseries.sql')\n}\n\n\n/*\n    rose.include(['Old'],'guides/operations/bucketize.sql')\n    rose.include(['Old'],'guides/operations/old-sliding-window.sql')\n    rose.include(['Old'],'guides/operations/partition_window.sql')\n    rose.include(['Test'],'guides/operations/testFocus1.sql')\n    rose.include(['Test'],'guides/operations/testFocus2.sql')\n    rose.include(['Test'],'guides/operations/testFocus3.sql')\n    rose.include(['Test'],'guides/operations/testFocus.sql')\n*/\n\n%>\n","external":true,"binary":false,"title":"Pipeline Guide","public":true,"doc":"<hr />\n##StreamLab Pipeline Guide\nThe guide helps you assemble a SQL script, shown in the lower left corner, that defines a pipeline to transform your source stream or table.\nEach step in the script has a ![](/images/doc/dash-btn.png) button to open a dashboard to view the stream or table at that point.\nIf a step causes an error in your SQL script, you'll see the ![](/images/doc/step-bomb.png) button, which opens the script at this step so you can inspect the error.\nThe result of a Guide will usually either be a sink or a dashboard.\n\n###Operations\nOperations are grouped by functionality, and you can switch between sets by clicking the one of the buttons \nin the top left hand corner of the guide. \nWhen you select a tab, the suggestions using that operation are brought to the top of the suggestion list.\nThe topmost suggestion matches the parameters you've edited for the operation, and will be shown with a dark border. \nBelow that will be other suggestions using the selected operation, based on what StreamLab has observed about the data.\nIf the topmost suggestion doesn't have a dark border, it's because \nthe current parameter settings don't generate a valid transformation.\nAn error message may also appear as the top suggestion, if the parameters that have been entered are invalid.\n\n![](/images/doc/sl_guide_operations.png)\n\n###Suggestions\nSuggestions appear in the Suggestions list in the middle left. \nOnly the operations in the currently selected group are allowed to display suggestions.\nSuggestions change depending on your input data, the column selected in the Output view, and\nthe parameters you've set for the current operation. \nNote that you can edit the parameters for a suggestion before you add it to the script, by selecting the underlined values.\n\n![](/images/doc/sl_guide_suggestions_zoom25.png)\n\n###Script\nAs you add steps to the script, they are implemented in SQL and executed in s-Server, with changes visible in the Output view. \nYou can remove items from the script by clicking the - button. At each step of the script you can view a dashboard\nusing the ![](/images/doc/dash-btn.png) button. For dashboard commands, the button is show in red to indicate that a custom dashboard has been generated.\n\n![](/images/doc/sl_guide_script_zoom25.png)\n\n####Live/Offline \nThe **Live/Offline** button is an experimental feature to allow multiple operations to be applied to the stream quickly.\nThe normal mode is **Live**, where each operation added to the script is sent to s-Server immediately, and the input and\noutput views are updated. In **Offline** mode, s-Server is not updated until you return to **Live** mode. This\nworks when renaming columns or when adding new columns, all other operations should be added to the script in **Live** mode,\nso that StreamLab can sync up. **Offline** mode can also be used when you've assembled the whole script and want to\ntweak multiple values (the parameters that can be edited are shown underlined).\n\n###Output View\nThe main output view table not only shows your data streaming live, it can also be used to enter parameters for the current operation.\nColumns can be selected by clicking on the header cells, shift-click to \nselect a range of columns and control-click to toggle a column. \nYou can select a row by clicking on any cell, and double-click allows you \nto select text. Note that a streaming view will pause when a row is selected, \nto clear the selection use the button in the upper left corner of the table.\n\n![](/images/doc/clear-btn.png)\n\nYou can see what StreamLab has learned about your data by hovering the mouse over the header for a column.\n\n\n###Last Run Status\n\nThe Last Run indicator shows the result of the last attempt to run the SQL script corresponding to this page in s-Server.\nClick on it to bring up the log, from there you can inspect any errors and re-run the script. \nIf you're getting errors about views being in use, make sure you don't have any \ndashboards open in other browser tabs. Then save your project and refresh this \npage to make sure StreamLab closes all its views.\nUse the script button on the top-most toolbar to view and execute the SQL script for the entire project.\n\n![](/images/doc/sl_guide_view_log_zoom25.png)\n\n\n\n","destination":"sqlstream","external_doc":false,"dont_render":false,"icon":"","version":1}},"dashboards":{"/sqlstream/StreamLab_App_2_0_0/dashboard-templates/panels-multi.json":"<%\n\tvar which = 1;\n\tvar locals = rose.dash('locals');\n\tif(locals) which = locals.get('whichDash');\n\tswitch(which) { case 1:\n%>\n{\n\t\"topframe\": {\n\t\t\"title\": \"\",\n\t\t\"showbar\": true,\n\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\"panelOptions\": {\n            \"tables_v2-simple-html\": {\n                \"maxrows\": 100,\n                \"tabstyle\": \"Horizontal\",\n                \"greenMax\": 0,\n                \"redMin\": 0,\n                \"sendChannel\": \"\",\n                \"autoscroll\": false\n            }\n\t\t},\n\t\t\"panelSettings\": {},\n\t\t\"input\": {\n\t\t\t\"db\": \"sqlstream\",\n            \"schema\": \"<%= rose.dash('schema') %>\",\n            \"name\": \"<%= rose.dash('object') %>\",\n            \"type\": \"<%= rose.dash('type') %>\"\n\t\t},\n\t\t\"inputOptions\": {\n            \"dataWindow\": \"n rows\",\n            \"dwRows\": 20,\n            \"dwRowsPerKey\": 1,\n            \"dwKey\": \"key\",\n            \"dwSliding\": \"60:1:minutes\",\n            \"dwTumbling\": \"1\",\n\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',0) %>,\n\t\t\t\"tableview\": false,\n\t\t\t\"updateSeconds\": 0,\n\t\t\t\"controlChannel\": \"\",\n            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',0) %> <%= rose.dash('from') %>\"\n\t\t},\n\t\t\"subframes\": {\n\t\t\t\"layout\": null\n\t\t}\n\t},\n\t\"isProtected\": false\n}\n\n<% \t\tbreak; case 2: %>\n{\n\t\"topframe\": {\n\t\t\"title\": \"\",\n\t\t\"showbar\": true,\n\t\t\"panel\": null,\n\t\t\"panelOptions\": {},\n\t\t\"panelSettings\": {},\n\t\t\"input\": null,\n\t\t\"inputOptions\": {},\n\t\t\"subframes\": {\n\t\t\t\"0\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"input\": {\n\t\t\t\t\t\"db\": \"sqlstream\",\n                    \"schema\": \"<%= rose.dash('schema') %>\",\n                    \"name\": \"<%= rose.dash('object') %>\",\n                    \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t},\n\t\t\t\t\"inputOptions\": {\n\t\t            \"dataWindow\": \"n rows\",\n\t\t            \"dwRows\": 20,\n\t\t            \"dwRowsPerKey\": 1,\n\t\t            \"dwKey\": \"key\",\n\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',0) %>,\n\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',0) %> <%= rose.dash('from') %>\"\n\t\t\t\t},\n\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\"panelOptions\": {\n\t\t            \"tables_v2-simple-html\": {\n\t\t                \"maxrows\": 100,\n\t\t                \"tabstyle\": \"Horizontal\",\n\t\t                \"greenMax\": 0,\n\t\t                \"redMin\": 0,\n\t\t                \"sendChannel\": \"\",\n\t\t                \"autoscroll\": false\n\t\t            }\n\t\t\t\t},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"layout\": null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"1\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"input\": {\n\t\t\t\t\t\"db\": \"sqlstream\",\n                    \"schema\": \"<%= rose.dash('schema') %>\",\n                    \"name\": \"<%= rose.dash('object') %>\",\n                    \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t},\n\t\t\t\t\"inputOptions\": {\n\t\t            \"dataWindow\": \"n rows\",\n\t\t            \"dwRows\": 20,\n\t\t            \"dwRowsPerKey\": 1,\n\t\t            \"dwKey\": \"key\",\n\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',1) %>,\n\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',1) %> <%= rose.dash('from') %>\"\n\t\t\t\t},\n\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\"panelOptions\": {\n\t\t            \"tables_v2-simple-html\": {\n\t\t                \"maxrows\": 100,\n\t\t                \"tabstyle\": \"Horizontal\",\n\t\t                \"greenMax\": 0,\n\t\t                \"redMin\": 0,\n\t\t                \"sendChannel\": \"\",\n\t\t                \"autoscroll\": false\n\t\t            }\n\t\t\t\t},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"layout\": null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"hwm\": 2,\n\t\t\t\"layout\": \"horz\",\n\t\t\t\"order\": [\"0\", \"1\"]\n\t\t}\n\t},\n\t\"isProtected\": false\n}\n\n<% \t\tbreak; case 3: %>\n{\n\t\"topframe\": {\n\t\t\"title\": \"\",\n\t\t\"showbar\": true,\n\t\t\"panel\": null,\n\t\t\"panelOptions\": {},\n\t\t\"panelSettings\": {},\n\t\t\"input\": null,\n\t\t\"inputOptions\": {\n            \"dataWindow\": \"n rows\",\n            \"dwRows\": 20,\n            \"dwRowsPerKey\": 1,\n            \"dwKey\": \"key\",\n            \"dwSliding\": \"60:1:minutes\",\n            \"dwTumbling\": \"1\",\n\t\t\t\"rowtime\": true,\n\t\t\t\"tableview\": false,\n\t\t\t\"updateSeconds\": 0,\n\t\t\t\"controlChannel\": \"\",\n\t\t\t\"selectTemplate\": \"\"\n\t\t},\n\t\t\"subframes\": {\n\t\t\t\"0\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"input\": {\n\t\t\t\t\t\"db\": \"sqlstream\",\n                    \"schema\": \"<%= rose.dash('schema') %>\",\n                    \"name\": \"<%= rose.dash('object') %>\",\n                    \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t},\n\t\t\t\t\"inputOptions\": {\n\t\t            \"dataWindow\": \"n rows\",\n\t\t            \"dwRows\": 20,\n\t\t            \"dwRowsPerKey\": 1,\n\t\t            \"dwKey\": \"key\",\n\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',0) %>,\n\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',0) %> <%= rose.dash('from') %>\"\n\t\t\t\t},\n\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\"panelOptions\": {\n\t\t            \"tables_v2-simple-html\": {\n\t\t                \"maxrows\": 100,\n\t\t                \"tabstyle\": \"Horizontal\",\n\t\t                \"greenMax\": 0,\n\t\t                \"redMin\": 0,\n\t\t                \"sendChannel\": \"\",\n\t\t                \"autoscroll\": false\n\t\t            }\n\t\t\t\t},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"layout\": null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"1\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"input\": {\n\t\t\t\t\t\"db\": \"sqlstream\",\n                    \"schema\": \"<%= rose.dash('schema') %>\",\n                    \"name\": \"<%= rose.dash('object') %>\",\n                    \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t},\n\t\t\t\t\"inputOptions\": {\n\t\t            \"dataWindow\": \"n rows\",\n\t\t            \"dwRows\": 20,\n\t\t            \"dwRowsPerKey\": 1,\n\t\t            \"dwKey\": \"key\",\n\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',1) %>,\n\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',1) %> <%= rose.dash('from') %>\"\n\t\t\t\t},\n\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\"panelOptions\": {\n\t\t            \"tables_v2-simple-html\": {\n\t\t                \"maxrows\": 100,\n\t\t                \"tabstyle\": \"Horizontal\",\n\t\t                \"greenMax\": 0,\n\t\t                \"redMin\": 0,\n\t\t                \"sendChannel\": \"\",\n\t\t                \"autoscroll\": false\n\t\t            }\n\t\t\t\t},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"layout\": null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"2\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"input\": {\n\t\t\t\t\t\"db\": \"sqlstream\",\n                    \"schema\": \"<%= rose.dash('schema') %>\",\n                    \"name\": \"<%= rose.dash('object') %>\",\n                    \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t},\n\t\t\t\t\"inputOptions\": {\n\t\t            \"dataWindow\": \"n rows\",\n\t\t            \"dwRows\": 20,\n\t\t            \"dwRowsPerKey\": 1,\n\t\t            \"dwKey\": \"key\",\n\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',2) %>,\n\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',2) %> <%= rose.dash('from') %>\"\n\t\t\t\t},\n\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\"panelOptions\": {\n\t\t            \"tables_v2-simple-html\": {\n\t\t                \"maxrows\": 100,\n\t\t                \"tabstyle\": \"Horizontal\",\n\t\t                \"greenMax\": 0,\n\t\t                \"redMin\": 0,\n\t\t                \"sendChannel\": \"\",\n\t\t                \"autoscroll\": false\n\t\t            }\n\t\t\t\t},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"layout\": null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"hwm\": 3,\n\t\t\t\"layout\": \"horz\",\n\t\t\t\"order\": [\"0\", \"1\", \"2\"]\n\t\t}\n\t},\n\t\"isProtected\": false\n}\n\n<% \t\tbreak; case 4: %>\n{\n\t\"topframe\": {\n\t\t\"title\": \"\",\n\t\t\"showbar\": true,\n\t\t\"panel\": null,\n\t\t\"panelOptions\": {},\n\t\t\"panelSettings\": {},\n\t\t\"input\": null,\n\t\t\"inputOptions\": {\n            \"dataWindow\": \"n rows\",\n            \"dwRows\": 20,\n            \"dwRowsPerKey\": 1,\n            \"dwKey\": \"key\",\n            \"dwSliding\": \"60:1:minutes\",\n            \"dwTumbling\": \"1\",\n\t\t\t\"rowtime\": true,\n\t\t\t\"tableview\": false,\n\t\t\t\"updateSeconds\": 0,\n\t\t\t\"controlChannel\": \"\",\n\t\t\t\"selectTemplate\": \"\"\n\t\t},\n\t\t\"subframes\": {\n\t\t\t\"0\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"panel\": null,\n\t\t\t\t\"panelOptions\": {},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"input\": null,\n\t\t\t\t\"inputOptions\": {\n\t\t            \"dataWindow\": \"n rows\",\n\t\t            \"dwRows\": 20,\n\t\t            \"dwRowsPerKey\": 1,\n\t\t            \"dwKey\": \"key\",\n\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\"rowtime\": true,\n\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t\t\"selectTemplate\": \"\"\n\t\t\t\t},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"0\": {\n\t\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\t\"showbar\": true,\n\t\t\t\t\t\t\"input\": {\n\t\t\t\t\t\t\t\"db\": \"sqlstream\",\n                            \"schema\": \"<%= rose.dash('schema') %>\",\n                            \"name\": \"<%= rose.dash('object') %>\",\n                            \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"inputOptions\": {\n\t\t\t\t            \"dataWindow\": \"n rows\",\n\t\t\t\t            \"dwRows\": 20,\n\t\t\t\t            \"dwRowsPerKey\": 1,\n\t\t\t\t            \"dwKey\": \"key\",\n\t\t\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',0) %>,\n\t\t\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',0) %> <%= rose.dash('from') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\t\t\"panelOptions\": {\n\t\t\t\t            \"tables_v2-simple-html\": {\n\t\t\t\t                \"maxrows\": 100,\n\t\t\t\t                \"tabstyle\": \"Horizontal\",\n\t\t\t\t                \"greenMax\": 0,\n\t\t\t\t                \"redMin\": 0,\n\t\t\t\t                \"sendChannel\": \"\",\n\t\t\t\t                \"autoscroll\": false\n\t\t\t\t            }\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\t\t\"subframes\": {\n\t\t\t\t\t\t\t\"layout\": null\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\t\"showbar\": true,\n\t\t\t\t\t\t\"input\": {\n\t\t\t\t\t\t\t\"db\": \"sqlstream\",\n                            \"schema\": \"<%= rose.dash('schema') %>\",\n                            \"name\": \"<%= rose.dash('object') %>\",\n                            \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"inputOptions\": {\n\t\t\t\t            \"dataWindow\": \"n rows\",\n\t\t\t\t            \"dwRows\": 20,\n\t\t\t\t            \"dwRowsPerKey\": 1,\n\t\t\t\t            \"dwKey\": \"key\",\n\t\t\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',1) %>,\n\t\t\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',1) %> <%= rose.dash('from') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\t\t\"panelOptions\": {\n\t\t\t\t            \"tables_v2-simple-html\": {\n\t\t\t\t                \"maxrows\": 100,\n\t\t\t\t                \"tabstyle\": \"Horizontal\",\n\t\t\t\t                \"greenMax\": 0,\n\t\t\t\t                \"redMin\": 0,\n\t\t\t\t                \"sendChannel\": \"\",\n\t\t\t\t                \"autoscroll\": false\n\t\t\t\t            }\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\t\t\"subframes\": {\n\t\t\t\t\t\t\t\"layout\": null\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"2\": null,\n\t\t\t\t\t\"hwm\": 3,\n\t\t\t\t\t\"layout\": \"horz\",\n\t\t\t\t\t\"order\": [\"0\", \"1\"]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"1\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"panel\": null,\n\t\t\t\t\"panelOptions\": {},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"input\": null,\n\t\t\t\t\"inputOptions\": {\n\t\t\t\t\t\"rowtime\": true,\n\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t\t\"selectTemplate\": \"\"\n\t\t\t\t},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"0\": {\n\t\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\t\"showbar\": true,\n\t\t\t\t\t\t\"input\": {\n\t\t\t\t\t\t\t\"db\": \"sqlstream\",\n                            \"schema\": \"<%= rose.dash('schema') %>\",\n                            \"name\": \"<%= rose.dash('object') %>\",\n                            \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"inputOptions\": {\n\t\t\t\t            \"dataWindow\": \"n rows\",\n\t\t\t\t            \"dwRows\": 20,\n\t\t\t\t            \"dwRowsPerKey\": 1,\n\t\t\t\t            \"dwKey\": \"key\",\n\t\t\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',2) %>,\n\t\t\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',2) %> <%= rose.dash('from') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\t\t\"panelOptions\": {\n\t\t\t\t            \"tables_v2-simple-html\": {\n\t\t\t\t                \"maxrows\": 100,\n\t\t\t\t                \"tabstyle\": \"Horizontal\",\n\t\t\t\t                \"greenMax\": 0,\n\t\t\t\t                \"redMin\": 0,\n\t\t\t\t                \"sendChannel\": \"\",\n\t\t\t\t                \"autoscroll\": false\n\t\t\t\t            }\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\t\t\"subframes\": {\n\t\t\t\t\t\t\t\"layout\": null\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\t\"showbar\": true,\n\t\t\t\t\t\t\"input\": {\n\t\t\t\t\t\t\t\"db\": \"sqlstream\",\n                            \"schema\": \"<%= rose.dash('schema') %>\",\n                            \"name\": \"<%= rose.dash('object') %>\",\n                            \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"inputOptions\": {\n\t\t\t\t            \"dataWindow\": \"n rows\",\n\t\t\t\t            \"dwRows\": 20,\n\t\t\t\t            \"dwRowsPerKey\": 1,\n\t\t\t\t            \"dwKey\": \"key\",\n\t\t\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\t\t\"rowtime\": true,\n\t\t\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',3) %>,\n\t\t\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',3) %> <%= rose.dash('from') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\t\t\"panelOptions\": {\n\t\t\t\t            \"tables_v2-simple-html\": {\n\t\t\t\t                \"maxrows\": 100,\n\t\t\t\t                \"tabstyle\": \"Horizontal\",\n\t\t\t\t                \"greenMax\": 0,\n\t\t\t\t                \"redMin\": 0,\n\t\t\t\t                \"sendChannel\": \"\",\n\t\t\t\t                \"autoscroll\": false\n\t\t\t\t            }\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\t\t\"subframes\": {\n\t\t\t\t\t\t\t\"layout\": null\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"2\": null,\n\t\t\t\t\t\"hwm\": 3,\n\t\t\t\t\t\"layout\": \"horz\",\n\t\t\t\t\t\"order\": [\"0\", \"1\"]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"hwm\": 2,\n\t\t\t\"layout\": \"vert\",\n\t\t\t\"order\": [\"0\", \"1\"]\n\t\t}\n\t},\n\t\"isProtected\": false\n}\n\n<% \t\tbreak; case 5: %>\n{\n\t\"topframe\": {\n\t\t\"title\": \"\",\n\t\t\"showbar\": true,\n\t\t\"panel\": null,\n\t\t\"panelOptions\": {},\n\t\t\"panelSettings\": {},\n\t\t\"input\": null,\n\t\t\"inputOptions\": {\n            \"dataWindow\": \"n rows\",\n            \"dwRows\": 20,\n            \"dwRowsPerKey\": 1,\n            \"dwKey\": \"key\",\n            \"dwSliding\": \"60:1:minutes\",\n            \"dwTumbling\": \"1\",\n\t\t\t\"rowtime\": true,\n\t\t\t\"tableview\": false,\n\t\t\t\"updateSeconds\": 0,\n\t\t\t\"controlChannel\": \"\",\n\t\t\t\"selectTemplate\": \"\"\n\t\t},\n\t\t\"subframes\": {\n\t\t\t\"0\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"panel\": null,\n\t\t\t\t\"panelOptions\": {},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"input\": null,\n\t\t\t\t\"inputOptions\": {\n\t\t            \"dataWindow\": \"n rows\",\n\t\t            \"dwRows\": 20,\n\t\t            \"dwRowsPerKey\": 1,\n\t\t            \"dwKey\": \"key\",\n\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\"rowtime\": true,\n\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t\t\"selectTemplate\": \"\"\n\t\t\t\t},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"0\": {\n\t\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\t\"showbar\": true,\n\t\t\t\t\t\t\"input\": {\n\t\t\t\t\t\t\t\"db\": \"sqlstream\",\n                            \"schema\": \"<%= rose.dash('schema') %>\",\n                            \"name\": \"<%= rose.dash('object') %>\",\n                            \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"inputOptions\": {\n\t\t\t\t            \"dataWindow\": \"n rows\",\n\t\t\t\t            \"dwRows\": 20,\n\t\t\t\t            \"dwRowsPerKey\": 1,\n\t\t\t\t            \"dwKey\": \"key\",\n\t\t\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',0) %>,\n\t\t\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',0) %> <%= rose.dash('from') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\t\t\"panelOptions\": {\n\t\t\t\t            \"tables_v2-simple-html\": {\n\t\t\t\t                \"maxrows\": 100,\n\t\t\t\t                \"tabstyle\": \"Horizontal\",\n\t\t\t\t                \"greenMax\": 0,\n\t\t\t\t                \"redMin\": 0,\n\t\t\t\t                \"sendChannel\": \"\",\n\t\t\t\t                \"autoscroll\": false\n\t\t\t\t            }\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\t\t\"subframes\": {\n\t\t\t\t\t\t\t\"layout\": null\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\t\"showbar\": true,\n\t\t\t\t\t\t\"input\": {\n\t\t\t\t\t\t\t\"db\": \"sqlstream\",\n                            \"schema\": \"<%= rose.dash('schema') %>\",\n                            \"name\": \"<%= rose.dash('object') %>\",\n                            \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"inputOptions\": {\n\t\t\t\t            \"dataWindow\": \"n rows\",\n\t\t\t\t            \"dwRows\": 20,\n\t\t\t\t            \"dwRowsPerKey\": 1,\n\t\t\t\t            \"dwKey\": \"key\",\n\t\t\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',1) %>,\n\t\t\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',1) %> <%= rose.dash('from') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\t\t\"panelOptions\": {\n\t\t\t\t            \"tables_v2-simple-html\": {\n\t\t\t\t                \"maxrows\": 100,\n\t\t\t\t                \"tabstyle\": \"Horizontal\",\n\t\t\t\t                \"greenMax\": 0,\n\t\t\t\t                \"redMin\": 0,\n\t\t\t\t                \"sendChannel\": \"\",\n\t\t\t\t                \"autoscroll\": false\n\t\t\t\t            }\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\t\t\"subframes\": {\n\t\t\t\t\t\t\t\"layout\": null\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"2\": null,\n\t\t\t\t\t\"hwm\": 3,\n\t\t\t\t\t\"layout\": \"horz\",\n\t\t\t\t\t\"order\": [\"0\", \"1\"]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"1\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"panel\": null,\n\t\t\t\t\"panelOptions\": {},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"input\": null,\n\t\t\t\t\"inputOptions\": {\n\t\t\t\t\t\"rowtime\": true,\n\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t\t\"selectTemplate\": \"\"\n\t\t\t\t},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"0\": {\n\t\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\t\"showbar\": true,\n\t\t\t\t\t\t\"input\": {\n\t\t\t\t\t\t\t\"db\": \"sqlstream\",\n                            \"schema\": \"<%= rose.dash('schema') %>\",\n                            \"name\": \"<%= rose.dash('object') %>\",\n                            \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"inputOptions\": {\n\t\t\t\t            \"dataWindow\": \"n rows\",\n\t\t\t\t            \"dwRows\": 20,\n\t\t\t\t            \"dwRowsPerKey\": 1,\n\t\t\t\t            \"dwKey\": \"key\",\n\t\t\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',2) %>,\n\t\t\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',2) %> <%= rose.dash('from') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\t\t\"panelOptions\": {\n\t\t\t\t            \"tables_v2-simple-html\": {\n\t\t\t\t                \"maxrows\": 100,\n\t\t\t\t                \"tabstyle\": \"Horizontal\",\n\t\t\t\t                \"greenMax\": 0,\n\t\t\t\t                \"redMin\": 0,\n\t\t\t\t                \"sendChannel\": \"\",\n\t\t\t\t                \"autoscroll\": false\n\t\t\t\t            }\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\t\t\"subframes\": {\n\t\t\t\t\t\t\t\"layout\": null\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\t\"showbar\": true,\n\t\t\t\t\t\t\"input\": {\n\t\t\t\t\t\t\t\"db\": \"sqlstream\",\n                            \"schema\": \"<%= rose.dash('schema') %>\",\n                            \"name\": \"<%= rose.dash('object') %>\",\n                            \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"inputOptions\": {\n\t\t\t\t            \"dataWindow\": \"n rows\",\n\t\t\t\t            \"dwRows\": 20,\n\t\t\t\t            \"dwRowsPerKey\": 1,\n\t\t\t\t            \"dwKey\": \"key\",\n\t\t\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',3) %>,\n\t\t\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',3) %> <%= rose.dash('from') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\t\t\"panelOptions\": {\n\t\t\t\t            \"tables_v2-simple-html\": {\n\t\t\t\t                \"maxrows\": 100,\n\t\t\t\t                \"tabstyle\": \"Horizontal\",\n\t\t\t\t                \"greenMax\": 0,\n\t\t\t\t                \"redMin\": 0,\n\t\t\t\t                \"sendChannel\": \"\",\n\t\t\t\t                \"autoscroll\": false\n\t\t\t\t            }\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\t\t\"subframes\": {\n\t\t\t\t\t\t\t\"layout\": null\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"2\": null,\n\t\t\t\t\t\"3\": {\n\t\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\t\"showbar\": true,\n\t\t\t\t\t\t\"input\": {\n\t\t\t\t\t\t\t\"db\": \"sqlstream\",\n                            \"schema\": \"<%= rose.dash('schema') %>\",\n                            \"name\": \"<%= rose.dash('object') %>\",\n                            \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"inputOptions\": {\n\t\t\t\t            \"dataWindow\": \"n rows\",\n\t\t\t\t            \"dwRows\": 20,\n\t\t\t\t            \"dwRowsPerKey\": 1,\n\t\t\t\t            \"dwKey\": \"key\",\n\t\t\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',4) %>,\n\t\t\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',4) %> <%= rose.dash('from') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\t\t\"panelOptions\": {\n\t\t\t\t            \"tables_v2-simple-html\": {\n\t\t\t\t                \"maxrows\": 100,\n\t\t\t\t                \"tabstyle\": \"Horizontal\",\n\t\t\t\t                \"greenMax\": 0,\n\t\t\t\t                \"redMin\": 0,\n\t\t\t\t                \"sendChannel\": \"\",\n\t\t\t\t                \"autoscroll\": false\n\t\t\t\t            }\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\t\t\"subframes\": {\n\t\t\t\t\t\t\t\"layout\": null\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"hwm\": 4,\n\t\t\t\t\t\"layout\": \"horz\",\n\t\t\t\t\t\"order\": [\"0\", \"1\", \"3\"]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"hwm\": 2,\n\t\t\t\"layout\": \"vert\",\n\t\t\t\"order\": [\"0\", \"1\"]\n\t\t}\n\t},\n\t\"isProtected\": false\n}\n\n<% \t\tbreak; default: %>\n{\n\t\"topframe\": {\n\t\t\"title\": \"\",\n\t\t\"showbar\": true,\n\t\t\"panel\": null,\n\t\t\"panelOptions\": {},\n\t\t\"panelSettings\": {},\n\t\t\"input\": null,\n\t\t\"inputOptions\": {\n            \"dataWindow\": \"n rows\",\n            \"dwRows\": 20,\n            \"dwRowsPerKey\": 1,\n            \"dwKey\": \"key\",\n            \"dwSliding\": \"60:1:minutes\",\n            \"dwTumbling\": \"1\",\n\t\t\t\"rowtime\": true,\n\t\t\t\"tableview\": false,\n\t\t\t\"updateSeconds\": 0,\n\t\t\t\"controlChannel\": \"\",\n\t\t\t\"selectTemplate\": \"\"\n\t\t},\n\t\t\"subframes\": {\n\t\t\t\"0\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"panel\": null,\n\t\t\t\t\"panelOptions\": {},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"input\": null,\n\t\t\t\t\"inputOptions\": {\n\t\t            \"dataWindow\": \"n rows\",\n\t\t            \"dwRows\": 20,\n\t\t            \"dwRowsPerKey\": 1,\n\t\t            \"dwKey\": \"key\",\n\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\"rowtime\": true,\n\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t\t\"selectTemplate\": \"\"\n\t\t\t\t},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"0\": {\n\t\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\t\"showbar\": true,\n\t\t\t\t\t\t\"input\": {\n\t\t\t\t\t\t\t\"db\": \"sqlstream\",\n                            \"schema\": \"<%= rose.dash('schema') %>\",\n                            \"name\": \"<%= rose.dash('object') %>\",\n                            \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"inputOptions\": {\n\t\t\t\t            \"dataWindow\": \"n rows\",\n\t\t\t\t            \"dwRows\": 20,\n\t\t\t\t            \"dwRowsPerKey\": 1,\n\t\t\t\t            \"dwKey\": \"key\",\n\t\t\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',0) %>,\n\t\t\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',0) %> <%= rose.dash('from') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\t\t\"panelOptions\": {\n\t\t\t\t            \"tables_v2-simple-html\": {\n\t\t\t\t                \"maxrows\": 100,\n\t\t\t\t                \"tabstyle\": \"Horizontal\",\n\t\t\t\t                \"greenMax\": 0,\n\t\t\t\t                \"redMin\": 0,\n\t\t\t\t                \"sendChannel\": \"\",\n\t\t\t\t                \"autoscroll\": false\n\t\t\t\t            }\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\t\t\"subframes\": {\n\t\t\t\t\t\t\t\"layout\": null\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\t\"showbar\": true,\n\t\t\t\t\t\t\"input\": {\n\t\t\t\t\t\t\t\"db\": \"sqlstream\",\n                            \"schema\": \"<%= rose.dash('schema') %>\",\n                            \"name\": \"<%= rose.dash('object') %>\",\n                            \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"inputOptions\": {\n\t\t\t\t            \"dataWindow\": \"n rows\",\n\t\t\t\t            \"dwRows\": 20,\n\t\t\t\t            \"dwRowsPerKey\": 1,\n\t\t\t\t            \"dwKey\": \"key\",\n\t\t\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',1) %>,\n\t\t\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',1) %> <%= rose.dash('from') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\t\t\"panelOptions\": {\n\t\t\t\t            \"tables_v2-simple-html\": {\n\t\t\t\t                \"maxrows\": 100,\n\t\t\t\t                \"tabstyle\": \"Horizontal\",\n\t\t\t\t                \"greenMax\": 0,\n\t\t\t\t                \"redMin\": 0,\n\t\t\t\t                \"sendChannel\": \"\",\n\t\t\t\t                \"autoscroll\": false\n\t\t\t\t            }\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\t\t\"subframes\": {\n\t\t\t\t\t\t\t\"layout\": null\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"2\": null,\n\t\t\t\t\t\"3\": {\n\t\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\t\"showbar\": true,\n\t\t\t\t\t\t\"input\": {\n\t\t\t\t\t\t\t\"db\": \"sqlstream\",\n                            \"schema\": \"<%= rose.dash('schema') %>\",\n                            \"name\": \"<%= rose.dash('object') %>\",\n                            \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"inputOptions\": {\n\t\t\t\t            \"dataWindow\": \"n rows\",\n\t\t\t\t            \"dwRows\": 20,\n\t\t\t\t            \"dwRowsPerKey\": 1,\n\t\t\t\t            \"dwKey\": \"key\",\n\t\t\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',2) %>,\n\t\t\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',2) %> <%= rose.dash('from') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\t\t\"panelOptions\": {\n\t\t\t\t            \"tables_v2-simple-html\": {\n\t\t\t\t                \"maxrows\": 100,\n\t\t\t\t                \"tabstyle\": \"Horizontal\",\n\t\t\t\t                \"greenMax\": 0,\n\t\t\t\t                \"redMin\": 0,\n\t\t\t\t                \"sendChannel\": \"\",\n\t\t\t\t                \"autoscroll\": false\n\t\t\t\t            }\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\t\t\"subframes\": {\n\t\t\t\t\t\t\t\"layout\": null\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"hwm\": 4,\n\t\t\t\t\t\"layout\": \"horz\",\n\t\t\t\t\t\"order\": [\"0\", \"1\", \"3\"]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"1\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"panel\": null,\n\t\t\t\t\"panelOptions\": {},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"input\": null,\n\t\t\t\t\"inputOptions\": {\n\t\t            \"dataWindow\": \"n rows\",\n\t\t            \"dwRows\": 20,\n\t\t            \"dwRowsPerKey\": 1,\n\t\t            \"dwKey\": \"key\",\n\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\"rowtime\": true,\n\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t\t\"selectTemplate\": \"\"\n\t\t\t\t},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"0\": {\n\t\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\t\"showbar\": true,\n\t\t\t\t\t\t\"input\": {\n\t\t\t\t\t\t\t\"db\": \"sqlstream\",\n                            \"schema\": \"<%= rose.dash('schema') %>\",\n                            \"name\": \"<%= rose.dash('object') %>\",\n                            \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"inputOptions\": {\n\t\t\t\t            \"dataWindow\": \"n rows\",\n\t\t\t\t            \"dwRows\": 20,\n\t\t\t\t            \"dwRowsPerKey\": 1,\n\t\t\t\t            \"dwKey\": \"key\",\n\t\t\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',3) %>,\n\t\t\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',3) %> <%= rose.dash('from') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\t\t\"panelOptions\": {\n\t\t\t\t            \"tables_v2-simple-html\": {\n\t\t\t\t                \"maxrows\": 100,\n\t\t\t\t                \"tabstyle\": \"Horizontal\",\n\t\t\t\t                \"greenMax\": 0,\n\t\t\t\t                \"redMin\": 0,\n\t\t\t\t                \"sendChannel\": \"\",\n\t\t\t\t                \"autoscroll\": false\n\t\t\t\t            }\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\t\t\"subframes\": {\n\t\t\t\t\t\t\t\"layout\": null\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\t\"showbar\": true,\n\t\t\t\t\t\t\"input\": {\n\t\t\t\t\t\t\t\"db\": \"sqlstream\",\n                            \"schema\": \"<%= rose.dash('schema') %>\",\n                            \"name\": \"<%= rose.dash('object') %>\",\n                            \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"inputOptions\": {\n\t\t\t\t            \"dataWindow\": \"n rows\",\n\t\t\t\t            \"dwRows\": 20,\n\t\t\t\t            \"dwRowsPerKey\": 1,\n\t\t\t\t            \"dwKey\": \"key\",\n\t\t\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',4) %>,\n\t\t\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',4) %> <%= rose.dash('from') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\t\t\"panelOptions\": {\n\t\t\t\t            \"tables_v2-simple-html\": {\n\t\t\t\t                \"maxrows\": 100,\n\t\t\t\t                \"tabstyle\": \"Horizontal\",\n\t\t\t\t                \"greenMax\": 0,\n\t\t\t\t                \"redMin\": 0,\n\t\t\t\t                \"sendChannel\": \"\",\n\t\t\t\t                \"autoscroll\": false\n\t\t\t\t            }\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\t\t\"subframes\": {\n\t\t\t\t\t\t\t\"layout\": null\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"2\": null,\n\t\t\t\t\t\"3\": {\n\t\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\t\"showbar\": true,\n\t\t\t\t\t\t\"input\": {\n\t\t\t\t\t\t\t\"db\": \"sqlstream\",\n                            \"schema\": \"<%= rose.dash('schema') %>\",\n                            \"name\": \"<%= rose.dash('object') %>\",\n                            \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"inputOptions\": {\n\t\t\t\t            \"dataWindow\": \"n rows\",\n\t\t\t\t            \"dwRows\": 20,\n\t\t\t\t            \"dwRowsPerKey\": 1,\n\t\t\t\t            \"dwKey\": \"key\",\n\t\t\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\t\t\"rowtime\": <%= rose.dashColumnListHasRowtime('pcols',5) %>,\n\t\t\t\t\t\t\t\"tableview\": false,\n\t\t\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.dashColumnList('pcols',5) %> <%= rose.dash('from') %>\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\t\t\"panelOptions\": {\n\t\t\t\t            \"tables_v2-simple-html\": {\n\t\t\t\t                \"maxrows\": 100,\n\t\t\t\t                \"tabstyle\": \"Horizontal\",\n\t\t\t\t                \"greenMax\": 0,\n\t\t\t\t                \"redMin\": 0,\n\t\t\t\t                \"sendChannel\": \"\",\n\t\t\t\t                \"autoscroll\": false\n\t\t\t\t            }\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\t\t\"subframes\": {\n\t\t\t\t\t\t\t\"layout\": null\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"hwm\": 4,\n\t\t\t\t\t\"layout\": \"horz\",\n\t\t\t\t\t\"order\": [\"0\", \"1\", \"3\"]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"hwm\": 2,\n\t\t\t\"layout\": \"vert\",\n\t\t\t\"order\": [\"0\", \"1\"]\n\t\t}\n\t},\n\t\"isProtected\": false\n}\n\n<%  \tbreak;\n} %>\n","/sqlstream/StreamLab_App_2_0_0/dashboard-templates/chartjs-bars.json":"{\n\t\"topframe\": {\n\t\t\"title\": \"Bars\",\n\t\t\"showbar\": true,\n\t\t\"panel\": null,\n\t\t\"panelOptions\": {},\n\t\t\"panelSettings\": {},\n\t\t\"input\": null,\n\t\t\"inputOptions\": {},\n\t\t\"subframes\": {\n\t\t\t\"0\": {\n\t\t\t\t\"showbar\": false,\n\t\t\t\t\"input\": {\n\t\t\t\t\t\"db\": \"sqlstream\",\n                    \"schema\": \"<%= rose.dash('schema') %>\",\n                    \"name\": \"<%= rose.dash('object') %>\",\n                    \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t},\n\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\"subframes\": null,\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"inputOptions\": {\n\t\t\t\t\t\"rowtime\": true,\n                    \"tableview\": <%= rose.dash('tableview') %>,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n                    \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.quoteList(rose.param('dataColumns'),1) %> <%= rose.dash('from') %>\",\n                    \"dataWindow\": \"n rows\",\n                    \"dwRows\": 20,\n                    \"dwRowsPerKey\": 1,\n                    \"dwKey\": \"key\",\n                    \"dwSliding\": \"60:1:minutes\",\n                    \"dwTumbling\": \"1\"\n\t\t\t\t},\n\t\t\t\t\"panelOptions\": {\n\t\t\t\t\t\"tables_v2-simple-html\": {\n\t\t\t\t\t\t\"autoscroll\": false,\n\t\t\t\t\t\t\"maxrows\": \"100\",\n\t\t\t\t\t\t\"tabstyle\": \"Horizontal\",\n\t\t\t\t\t\t\"greenMax\": \"70\",\n\t\t\t\t\t\t\"redMin\": \"90\",\n\t\t\t\t\t\t\"sendChannel\": \"\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"1\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"input\": {\n\t\t\t\t\t\"db\": \"sqlstream\",\n                    \"schema\": \"<%= rose.dash('schema') %>\",\n                    \"name\": \"<%= rose.dash('object') %>\",\n                    \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t},\n\t\t\t\t\"inputOptions\": {\n\t\t\t\t\t\"rowtime\": true,\n                    \"tableview\": <%= rose.dash('tableview') %>,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n                    \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.quoteList(rose.param('dataColumns'),1) %> <%= rose.dash('from') %>\",\n                    \"dataWindow\": \"n rows\",\n                    \"dwRows\": 20,\n                    \"dwRowsPerKey\": 1,\n                    \"dwKey\": \"key\",\n                    \"dwSliding\": \"60:1:minutes\",\n                    \"dwTumbling\": \"1\"\n\t\t\t\t},\n\t\t\t\t\"panel\": \"chartjs-bars-row\",\n\t\t\t\t\"panelOptions\": {},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"layout\": null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"hwm\": 2,\n\t\t\t\"layout\": \"vert-30-70\",\n\t\t\t\"order\": [\"0\", \"1\"]\n\t\t}\n\t},\n\t\"isProtected\": false\n}\n","/sqlstream/StreamLab_App_2_0_0/dashboard-templates/chartjs-bars-over-time.json":"<%\nvar dataCols = rose.param('dataColumns');\n%>\n{\n\t\"topframe\": {\n\t\t\"title\": \"Bars Over Time\",\n\t\t\"showbar\": true,\n\t\t\"panel\": null,\n\t\t\"panelOptions\": {},\n\t\t\"panelSettings\": {},\n\t\t\"input\": null,\n\t\t\"inputOptions\": {},\n\t\t\"subframes\": {\n\t\t\t\"0\": {\n\t\t\t\t\"showbar\": false,\n\t\t\t\t\"input\": {\n\t\t\t\t\t\"db\": \"sqlstream\",\n                    \"schema\": \"<%= rose.dash('schema') %>\",\n                    \"name\": \"<%= rose.dash('object') %>\",\n                    \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t},\n\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\"subframes\": null,\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"inputOptions\": {\n\t\t\t\t\t\"rowtime\": true,\n                    \"tableview\": <%= rose.dash('tableview') %>,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n                    \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.quoteList(dataCols,1) %> <%= rose.dash('from') %>\",\n                    \"dataWindow\": \"n rows\",\n                    \"dwRows\": 20,\n                    \"dwRowsPerKey\": 1,\n                    \"dwKey\": \"key\",\n                    \"dwSliding\": \"60:1:minutes\",\n                    \"dwTumbling\": \"1\"\n\t\t\t\t},\n\t\t\t\t\"panelOptions\": {\n\t\t\t\t\t\"tables_v2-simple-html\": {\n\t\t\t\t\t\t\"autoscroll\": false,\n\t\t\t\t\t\t\"maxrows\": \"100\",\n\t\t\t\t\t\t\"tabstyle\": \"Horizontal\",\n\t\t\t\t\t\t\"greenMax\": \"70\",\n\t\t\t\t\t\t\"redMin\": \"90\",\n\t\t\t\t\t\t\"sendChannel\": \"\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"1\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"input\": {\n\t\t\t\t\t\"db\": \"sqlstream\",\n                    \"schema\": \"<%= rose.dash('schema') %>\",\n                    \"name\": \"<%= rose.dash('object') %>\",\n                    \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t},\n\t\t\t\t\"inputOptions\": {\n\t\t\t\t\t\"rowtime\": true,\n                    \"tableview\": <%= rose.dash('tableview') %>,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n                    \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.quoteList(dataCols,1) %> <%= rose.dash('from') %>\",\n                    \"dataWindow\": \"n rows\",\n                    \"dwRows\": 20,\n                    \"dwRowsPerKey\": 1,\n                    \"dwKey\": \"key\",\n                    \"dwSliding\": \"60:1:minutes\",\n                    \"dwTumbling\": \"1\"\n\t\t\t\t},\n\t\t\t\t\"panel\": \"chartjs-bars-time\",\n\t\t\t\t\"panelOptions\": {},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"layout\": null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"hwm\": 2,\n\t\t\t\"layout\": \"vert-30-70\",\n\t\t\t\"order\": [\"0\", \"1\"]\n\t\t}\n\t},\n\t\"isProtected\": false\n}\n","/sqlstream/StreamLab_App_2_0_0/dashboard-templates/chartjs-bars-over-key.json":"<%\nvar key = rose.param('key')\nvar dataCols = key + ',' + rose.param('dataColumns')\n%>\n{\n\t\"topframe\": {\n\t\t\"title\": \"Bars Over Key\",\n\t\t\"showbar\": true,\n\t\t\"panel\": null,\n\t\t\"panelOptions\": {},\n\t\t\"panelSettings\": {},\n\t\t\"input\": null,\n\t\t\"inputOptions\": {},\n\t\t\"subframes\": {\n\t\t\t\"0\": {\n\t\t\t\t\"showbar\": false,\n\t\t\t\t\"input\": {\n\t\t\t\t\t\"db\": \"sqlstream\",\n\t\t\t\t\t\"schema\": \"<%= rose.dash('schema') %>\",\n\t\t\t\t\t\"name\": \"<%= rose.dash('object') %>\",\n\t\t\t\t\t\"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t},\n\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\"subframes\": null,\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"inputOptions\": {\n\t\t\t\t\t\"rowtime\": true,\n\t\t\t\t\t\"tableview\": <%= rose.dash('tableview') %>,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t\t\"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.quoteList(dataCols,1) %> <%= rose.dash('from') %>\",\n\t\t\t\t\t\"dataWindow\": \"n rows per key\",\n\t\t\t\t\t\"dwRows\": 20,\n\t\t\t\t\t\"dwRowsPerKey\": 1,\n\t\t\t\t\t\"dwKey\": \"<%= rose.param('key') %>\",\n\t\t\t\t\t\"dwSliding\": \"60:1:minutes\",\n\t\t\t\t\t\"dwTumbling\": \"1\"\n\t\t\t\t},\n\t\t\t\t\"panelOptions\": {\n\t\t\t\t\t\"tables_v2-simple-html\": {\n\t\t\t\t\t\t\"autoscroll\": false,\n\t\t\t\t\t\t\"maxrows\": \"100\",\n\t\t\t\t\t\t\"tabstyle\": \"Horizontal\",\n\t\t\t\t\t\t\"greenMax\": \"70\",\n\t\t\t\t\t\t\"redMin\": \"90\",\n\t\t\t\t\t\t\"sendChannel\": \"\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"1\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"input\": {\n\t\t\t\t\t\"db\": \"sqlstream\",\n                    \"schema\": \"<%= rose.dash('schema') %>\",\n                    \"name\": \"<%= rose.dash('object') %>\",\n                    \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t},\n\t\t\t\t\"inputOptions\": {\n\t\t\t\t\t\"rowtime\": true,\n                    \"tableview\": <%= rose.dash('tableview') %>,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n                    \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.quoteList(dataCols,1) %> <%= rose.dash('from') %>\",\n                    \"dataWindow\": \"n rows per key\",\n                    \"dwRows\": 20,\n                    \"dwRowsPerKey\": 1,\n                    \"dwKey\": \"<%= rose.param('key') %>\",\n                    \"dwSliding\": \"60:1:minutes\",\n                    \"dwTumbling\": \"1\"\n\t\t\t\t},\n\t\t\t\t\"panel\": \"chartjs-bars-key\",\n\t\t\t\t\"panelOptions\": {},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"layout\": null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"hwm\": 2,\n\t\t\t\"layout\": \"vert-30-70\",\n\t\t\t\"order\": [\"0\", \"1\"]\n\t\t}\n\t},\n\t\"isProtected\": false\n}\n","/sqlstream/StreamLab_App_2_0_0/dashboard-templates/bars_and_lines.json":"<%\nvar lineCols = rose.param('lineColumns');\n%>\n{\n\t\"topframe\": {\n\t\t\"title\": \"\",\n\t\t\"showbar\": true,\n\t\t\"panel\": null,\n\t\t\"panelOptions\": {\n\t\t},\n\t\t\"panelSettings\": {\n\t\t},\n\t\t\"input\": null,\n\t\t\"inputOptions\": {\n            \"dataWindow\": \"n rows\",\n            \"dwRows\": 20,\n            \"dwRowsPerKey\": 1,\n            \"dwKey\": \"key\",\n            \"dwSliding\": \"60:1:minutes\",\n            \"dwTumbling\": \"1\",\n\t\t\t\"rowtime\": true,\n\t\t\t\"tableview\": false,\n\t\t\t\"updateSeconds\": 0,\n\t\t\t\"controlChannel\": \"\",\n\t\t\t\"selectTemplate\": \"\"\n\t\t},\n\t\t\"subframes\": {\n\t\t\t\"0\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"input\": {\n\t\t\t\t\t\"db\": \"sqlstream\",\n                    \"schema\": \"<%= rose.dash('schema') %>\",\n                    \"name\": \"<%= rose.dash('object') %>\",\n                    \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t},\n\t\t\t\t\"inputOptions\": {\n\t\t            \"dataWindow\": \"n rows\",\n\t\t            \"dwRows\": 20,\n\t\t            \"dwRowsPerKey\": 1,\n\t\t            \"dwKey\": \"key\",\n\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\"rowtime\": true,\n                    \"tableview\": <%= rose.dash('tableview') %>,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t\t\"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.quoteList(rose.param('barColumns'),1) %> <%= rose.dash('from') %>\"\n\t\t\t\t},\n\t\t\t\t\"panel\": \"chartjs-bars-row\",\n\t\t\t\t\"panelOptions\": {},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"layout\": null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"1\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"input\": {\n\t\t\t\t\t\"db\": \"sqlstream\",\n                    \"schema\": \"<%= rose.dash('schema') %>\",\n                    \"name\": \"<%= rose.dash('object') %>\",\n                    \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t},\n\t\t\t\t\"inputOptions\": {\n\t\t            \"dataWindow\": \"n rows\",\n\t\t            \"dwRows\": 20,\n\t\t            \"dwRowsPerKey\": 1,\n\t\t            \"dwKey\": \"key\",\n\t\t            \"dwSliding\": \"60:1:minutes\",\n\t\t            \"dwTumbling\": \"1\",\n\t\t\t\t\t\"rowtime\": true,\n                    \"tableview\": <%= rose.dash('tableview') %>,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t\t\"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.quoteList(lineCols,1) %> <%= rose.dash('from') %>\"\n\t\t\t\t},\n\t\t\t\t\"panel\": \"plots_v2-lines\",\n\t\t\t\t\"panelOptions\": {\n\t\t\t\t\t\"plots_v2-lines\": {\n\t\t\t\t\t\t\"updateSeconds\": 1,\n\t\t\t\t\t\t\"colorstyle\": \"ColorWheel\",\n                        \"interpolation\": \"cardinal\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"panelSettings\": {\n\t\t\t\t\t\"plots_v2-timeseries\": {\n\t\t\t\t\t\t\"renderer\": \"line\",\n\t\t\t\t\t\t\"offset\": \"value\",\n\t\t\t\t\t\t\"interpolation\": \"linear\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"1\": null,\n\t\t\t\t\t\"layout\": null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"hwm\": 2,\n\t\t\t\"layout\": \"vert-30-70\",\n\t\t\t\"order\": [\"0\", \"1\"]\n\t\t}\n\t},\n\t\"isProtected\": false\n}\n","/sqlstream/StreamLab_App_2_0_0/dashboard-templates/bollinger.json":"{\n\t\"topframe\": {\n\t\t\"title\": \"\",\n\t\t\"showbar\": true,\n\t\t\"panel\": \"plots_v2-bollinger\",\n\t\t\"panelOptions\": {},\n\t\t\"panelSettings\": {},\n\t\t\"input\": {\n\t\t\t\"db\": \"sqlstream\",\n            \"schema\": \"<%= rose.dash('schema') %>\",\n            \"name\": \"<%= rose.dash('object') %>\",\n            \"type\": \"<%= rose.dash('type') %>\"\n\t\t},\n\t\t\"inputOptions\": {\n\t\t\t\"rowtime\": true,\n\t\t\t\"tableview\": false,\n\t\t\t\"updateSeconds\": 0,\n\t\t\t\"controlChannel\": \"\",\n            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.renameColumns([{col:rose.param('avg'),to:'boll'},{col:rose.param('avg_upper'),to:'boll_upper'},{col:rose.param('avg_lower'),to:'boll_lower'},{col:rose.param('avg_upper2'),to:'boll_upper2'},{col:rose.param('avg_lower2'),to:'boll_lower2'}],true,1) %> <%= rose.dash('from') %>\",\n            \"dataWindow\": \"sliding time period\",\n            \"dwRows\": 20,\n            \"dwRowsPerKey\": 1,\n            \"dwKey\": \"key\",\n            \"dwSliding\": \"600:10:minutes\",\n            \"dwTumbling\": \"1\"\n\t\t},\n\t\t\"subframes\": {\n\t\t\t\"layout\": null\n\t\t}\n\t},\n\t\"isProtected\": false\n}\n","/sqlstream/StreamLab_App_2_0_0/dashboard-templates/map_and_table.json":"{\n\t\"topframe\": {\n\t\t\"title\": \"Map and Table\",\n\t\t\"showbar\": true,\n\t\t\"panel\": null,\n\t\t\"panelOptions\": {},\n\t\t\"panelSettings\": {},\n\t\t\"input\": null,\n\t\t\"inputOptions\": {\n\t\t\t\"rowtime\": true,\n\t\t\t\"tableview\": true,\n\t\t\t\"updateSeconds\": 0,\n\t\t\t\"controlChannel\": \"\",\n\t\t\t\"selectTemplate\": \"\"\n\t\t},\n\t\t\"subframes\": {\n\t\t\t\"0\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": true,\n\t\t\t\t\"input\": {\n\t\t\t\t\t\"db\": \"sqlstream\",\n                    \"schema\": \"<%= rose.dash('schema') %>\",\n                    \"name\": \"<%= rose.dash('object') %>\",\n                    \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t},\n\t\t\t\t\"inputOptions\": {\n\t\t\t\t\t\"rowtime\": true,\n                    \"tableview\": <%= rose.dash('tableview') %>,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t\t\"selectTemplate\": \"<%= rose.dash('select') %> <%= rose.renameColumns([{col:rose.param('latitude'), to:'lat'}, {col:rose.param('longitude'), to: 'lon'}, {col:rose.param('value'), to:'value'}, {col:rose.param('key'), to:'key'}, {col:rose.param('event_id'), to:'event_id'}],false,1,null,true) %> <%= rose.dash('from') %>\",\n                    \"dataWindow\": \"n rows\",\n                    \"dwRows\": 2000,\n                    \"dwRowsPerKey\": 1,\n                    \"dwKey\": \"key\",\n                    \"dwSliding\": \"60:1:minutes\",\n                    \"dwTumbling\": \"1\"\n\t\t\t\t},\n\t\t\t\t\"panel\": \"<%= /zoom/.test(rose.param('maptype')) ? 'geo_v2-tiled-map' : 'geo_v2-world-events' %>\",\n\t\t\t\t\"panelOptions\": {\n\t\t\t\t\t\"geo_v2-world-events\": {\n\t\t\t\t\t\t\"colorStyle\": \"Black & White, Blue Water\",\n\t\t\t\t\t\t\"map\": \"Regions|World\",\n\t\t\t\t\t\t\"choro\": <%= /choro/.test(rose.param('maptype')) %>,\n\t\t\t\t\t\t\"eventLabel\": \"Lat:: <%= rose.openToken %>= lat <%= rose.closeToken %> Lon: <%= rose.openToken %>= lon <%= rose.closeToken %>\",\n\t\t\t\t\t\t\"mapEventChan\": \"map_event_selected\",\n\t\t\t\t\t\t\"mapRegionChan\": \"map_region_selected\"\n\t\t\t\t\t},\n\t\t\t\t\t\"geo_v2-tiled-map\": {\n\t\t\t\t\t  \"clustering\": false,\n\t\t\t\t\t\t\"diameterFormula\": \"value\",\n\t\t\t\t\t\t\"diameterUnits\": \"pixels\",\n\t\t\t\t\t\t\"mode\": \"show all events\",\n\t\t\t\t\t\t\"eventLabel\": \"Lat:: <%= rose.openToken %>= lat <%= rose.closeToken %> Lon: <%= rose.openToken %>= lon <%= rose.closeToken %>\",\n\t\t\t\t\t\t\"mapEventChan\": \"map_event_selected\",\n\t\t\t\t\t\t\"keymap\": \"[[\\\"\\\",\\\"none\\\",\\\"red\\\",\\\"red\\\"]]\",\n\t\t\t\t\t\t\"markerIcons\": \"Flags\",\n\t\t\t\t\t\t\"markerURL\": \"\",\n\t\t\t\t\t\t\"iconWidth\": 32,\n\t\t\t\t\t\t\"iconHeight\": 32,\n\t\t\t\t\t\t\"iconAnchorX\": 15,\n\t\t\t\t\t\t\"iconAnchorY\": 15\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"1\": null,\n\t\t\t\t\t\"layout\": null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"1\": {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"showbar\": false,\n\t\t\t\t\"input\": {\n\t\t\t\t\t\"db\": \"sqlstream\",\n                    \"schema\": \"<%= rose.dash('schema') %>\",\n                    \"name\": \"<%= rose.dash('object') %>\",\n                    \"type\": \"<%= rose.dash('type') %>\"\n\t\t\t\t},\n\t\t\t\t\"inputOptions\": {\n\t\t\t\t\t\"rowtime\": true,\n                    \"tableview\": <%= rose.dash('tableview') %>,\n\t\t\t\t\t\"updateSeconds\": 0,\n\t\t\t\t\t\"controlChannel\": \"\",\n\t\t\t\t\t\"selectTemplate\": \"\",\n                    \"dataWindow\": \"n rows\",\n                    \"dwRows\": 20,\n                    \"dwRowsPerKey\": 1,\n                    \"dwKey\": \"key\",\n                    \"dwSliding\": \"60:1:minutes\",\n                    \"dwTumbling\": \"1\"\n\t\t\t\t},\n\t\t\t\t\"panel\": \"tables_v2-simple-html\",\n\t\t\t\t\"panelOptions\": {},\n\t\t\t\t\"panelSettings\": {},\n\t\t\t\t\"subframes\": {\n\t\t\t\t\t\"layout\": null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"hwm\": 2,\n\t\t\t\"layout\": \"vert-30-70\",\n\t\t\t\"order\": [\"1\", \"0\"]\n\t\t}\n\t},\n\t\"isProtected\": false\n}\n","/sqlstream/StreamLab_App_2_0_0/dashboard-templates/timeseries.json":"<%\nvar dataCols = rose.param('dataColumns');\n%>\n{\n\t\"topframe\": {\n\t\t\"title\": \"\",\n\t\t\"showbar\": true,\n\t\t\"panel\": \"plots_v2-timeseries\",\n\t\t\"panelOptions\": {\n\t\t\t\"plots_v2-timeseries\": {\n\t\t\t\t\"updateSeconds\": 1,\n\t\t\t\t\"showControls\": true,\n\t\t\t\t\"colorstyle\": \"ColorWheel\"\n\t\t\t}\n\t\t},\n\t\t\"panelSettings\": {\n\t\t\t\"plots_v2-timeseries\": {\n\t\t\t\t\"renderer\": \"area\",\n\t\t\t\t\"offset\": \"wiggle\",\n\t\t\t\t\"interpolation\": \"cardinal\"\n\t\t\t}\n\t\t},\n\t\t\"input\": {\n\t\t\t\"db\": \"sqlstream\",\n            \"schema\": \"<%= rose.dash('schema') %>\",\n            \"name\": \"<%= rose.dash('object') %>\",\n            \"type\": \"<%= rose.dash('type') %>\"\n\t\t},\n\t\t\"inputOptions\": {\n\t\t\t\"rowtime\": true,\n            \"tableview\": <%= rose.dash('tableview') %>,\n\t\t\t\"updateSeconds\": 0,\n\t\t\t\"controlChannel\": \"\",\n            \"selectTemplate\": \"<%= rose.dash('select') %>  <%= rose.quoteList(dataCols,1) %> <%= rose.dash('from') %>\",\n            \"dataWindow\": \"sliding time period\",\n            \"dwRows\": 20,\n            \"dwRowsPerKey\": 1,\n            \"dwKey\": \"key\",\n            \"dwSliding\": \"600:10:minutes\",\n            \"dwTumbling\": \"1\"\n\t\t},\n\t\t\"subframes\": {\n\t\t\t\"1\": null,\n\t\t\t\"layout\": null\n\t\t}\n\t},\n\t\"isProtected\": false\n}\n"}},"dashboards":[]}